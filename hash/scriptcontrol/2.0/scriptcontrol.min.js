
//============================================================================

// Copyright (c) Base Digitale Platform. All rights reserved.

//============================================================================

"use strict";
window.onerror = function(msg, url, lin, col, err) {
  if (window["ifm-disable-blue-screen"] !== true) {
    var message = msg || "crash!";
    var source = url + ":" + lin + ":" + col;
    var stack = err && err.stack ? err.stack : (err || "no stack info");
    debugger;
    setTimeout(function() {
      document.open();
      document.write('<!-- Copyright \u00a9 IFM Infomaster. All rights reserved. -->\
<!doctype html>\
<html style="background-color:#03c;color:#fff;">\
<head>\
    <title>uh oh!</title>\
    <meta charset="utf-8">\
</head>\
<body style="padding:8px;font:1em monospace;">\
    <pre style="font-size:4em;">:(</pre>\
    <pre style="font-size:1.5em;">' + message + '</pre>\
    <pre style="font-size:1em;">' + source + '</pre>\
    <pre style="font-size:1em;">-- stack --\n' + stack + '</pre>\
</body>\
</html>');
      document.close()
    }, 1)
  }
};
;
var global = global || window;
if (Object.defineProperty) {
  Object.defineProperty(global, "T0", {value: +new Date})
}
else {
  var T0 = +new Date
}
var dT = function() {
    return new Date - T0
  };
function defineEvents(names) {
  var eventbox = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i];
    if (!Ifm.Type.isString(name)) {
      throw Ifm.Diagnostics.Errors.arg("name");
    }
    createEventAccessors(eventbox, name)
  }
  return eventbox
}
function createEventAccessors(owner, name) {
  var evt = new Ifm.Event;
  Object.defineProperty(owner, name, {
    get: function() {
      return evt
    }, set: function(handler) {
        evt.addHandler(handler)
      }
  })
}
function inherits(ctorClass, ctorBase) {
  if (!Ifm.Type.isFunction(ctorClass))
    throw Ifm.Diagnostics.Errors.func("ctorClass");
  if (!Ifm.Type.isFunction(ctorBase))
    throw Ifm.Diagnostics.Errors.func("ctorBase");
  ctorClass.prototype = Object.create(ctorBase.prototype);
  ctorClass.prototype.constructor = ctorClass;
  return ctorBase.prototype
}
;
function namespace(globalNamespace, factory) {
  var ns = window,
    parts = globalNamespace.split('.');
  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];
    ns[part] = ns[part] || {};
    ns = ns[part]
  }
  if (typeof factory === typeof namespace) {
    factory.call(ns)
  }
  else {
    for (var e in factory) {
      ns[e] = factory[e]
    }
  }
  return ns
}
function query(url) {
  var query = url || window.location.search,
    pairs = {};
  query.replace(/[?&#]([^=]+)=([^&]*)?/g, function(match, key, val) {
    if (key)
      pairs[key] = val || "";
    return ""
  });
  return pairs
}
Function.getName = function(func) {
  if (!Ifm.Type.isFunction(func))
    throw Ifm.Diagnostics.Errors.func("func");
  var res = /function\s+(\w+)/.exec(func);
  if (res && res.length === 2)
    return res[1];
  res = /(\w+)\s*=\s*function/.exec(func);
  if (res && res.length === 2)
    return res[1];
  return 'anonymous function'
};
Function.prototype.toShortString = function() {
  var body = this.toString().replace(/[\r|\n]/g, '').replace(/[\s]+/g, ' ');
  return body.substr(0, body.indexOf('{')).trim()
};
Array.pushArray = function(array1, array2) {
  if (!Ifm.Type.isArray(array1))
    throw Ifm.Diagnostics.Errors.arg("array1");
  if (!Ifm.Type.isArray(array2))
    throw Ifm.Diagnostics.Errors.arg("array2");
  return Array.prototype.push.apply(array1, array2)
};
if (!Array.prototype.find) {
  try {
    Object.defineProperty(Array.prototype, "find", {
      enumerable: false, value: function(func, thisArg) {
          if (!Ifm.Type.isFunction(func))
            throw Ifm.Diagnostics.Errors.func("func");
          for (var i = 0, len = this.length; i < len; i++) {
            if (i in this && func.call(thisArg, this[i], i, this)) {
              return this[i]
            }
          }
          return undefined
        }
    })
  }
  catch(e) {}
}
if (window.ArrayBuffer) {
  ArrayBuffer.fromBytes = function(bytes) {
    var len = bytes.length;
    var buffer = new ArrayBuffer(len);
    var bufView = new Uint8Array(buffer);
    for (var i = 0; i < len; i++) {
      bufView[i] = bytes[i]
    }
    return buffer
  };
  ArrayBuffer.prototype.getBytes = function() {
    var bufView = new Uint8Array(this);
    var bytes = [];
    for (var i = 0, l = bufView.length; i < l; i++) {
      bytes.push(bufView[i])
    }
    return bytes
  }
}
if (!Object.entries) {
  Object.entries = function(obj) {
    var e = [];
    for (var i in obj)
      if (obj.hasOwnProperty(i))
        e.push([i, obj[i]]);
    return e
  }
}
if (!Object.keys) {
  Object.keys = function(obj) {
    var k = [];
    for (var i in obj)
      if (obj.hasOwnProperty(i))
        k.push(i);
    return k
  }
}
if (!Object.values) {
  Object.values = function(obj) {
    var v = [];
    for (var i in obj)
      if (obj.hasOwnProperty(i))
        v.push(obj[i]);
    return v
  }
}
String.format = function(str, formatargs) {
  if (!str || !Ifm.Type.isString(str))
    return str;
  var args = Array.prototype.slice.call(arguments, 1);
  return str.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] !== 'undefined' ? args[number] : ''
    })
};
String.prototype.format = function(formatargs) {
  var args = [this];
  Array.prototype.push.apply(args, arguments);
  return String.format.apply(null, args)
};
if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(str, position) {
    position = position || 0;
    return this.substr(position, str.length) === str
  }
}
if (!String.prototype.endsWith) {
  String.prototype.endsWith = function(str, position) {
    position = position || this.length;
    var start = Math.max(position - str.length, 0);
    return this.slice(start, position) === str
  }
}
if (!String.prototype.trim) {
  String.prototype.trim = function() {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '')
  }
}
String.prototype.indexAfter = function(str) {
  var p = this.indexOf(str);
  return p + (p < 0 ? 0 : str.length)
};
String.prototype.lastIndexAfter = function(str) {
  var p = this.lastIndexOf(str);
  return p + (p < 0 ? 0 : str.length)
};
if (!Date.now) {
  Date.now = function() {
    return +new Date
  }
}
if (!Date.prototype.toISOString) {
  (function() {
    function pad(number) {
      var r = String(number);
      if (r.length === 1) {
        r = '0' + r
      }
      return r
    }
    Date.prototype.toISOString = function() {
      return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) + 'Z'
    }
  })()
}
if (!Date.prototype.toISOLocaleDateString) {
  Date.prototype.toISOLocaleDateString = function() {
    var yyyy = '' + this.getFullYear(),
      mm = '' + (this.getMonth() + 1),
      dd = '' + this.getDate();
    if (mm.length < 2)
      mm = '0' + mm;
    if (dd.length < 2)
      dd = '0' + dd;
    return yyyy + '-' + mm + '-' + dd
  }
}
namespace("Ifm", function() {
  Ifm.version = "Ifm.js/1.0.93-4708";
  this.Objects = {deepMerge: function recursive(o1, o2, skipNullOrUndefined) {
      for (var i in o2) {
        if (typeof o2[i] === typeof{}) {
          if (o2[i] === null) {
            if (skipNullOrUndefined !== true) {
              o1[i] = null
            }
          }
          else if (typeof o1[i] !== typeof{} || o1[i] === null) {
            o1[i] = {}
          }
          recursive(o1[i], o2[i], skipNullOrUndefined)
        }
        else {
          if (o2[i] !== undefined || skipNullOrUndefined !== true) {
            o1[i] = o2[i]
          }
        }
      }
      return o1
    }};
  this.Enum = {};
  this.Enum.getName = function(enumObject, value) {
    var names = Object.getOwnPropertyNames(enumObject);
    for (var i = 0, l = names.length; i < l; i++) {
      var name = names[i];
      if (enumObject[name] === value) {
        return name
      }
    }
    return ''
  };
  this.Enum.getLength = function(enumObject) {
    return Object.getOwnPropertyNames(enumObject).length
  };
  this.Type = {};
  this.Type.getTypeName = function(o) {
    var ecmaname = Object.prototype.toString.call(o).slice(8, -1);
    if (ecmaname === 'Object') {
      var ctorname = o && o.constructor && o.constructor.toString().match(/function\s+([^\s]{1,})\s*\(/);
      if (ctorname)
        return ctorname[1]
    }
    return ecmaname
  };
  this.Type.isArray = function(o) {
    return Object.prototype.toString.call(o) === "[object Array]"
  };
  this.Type.isLikeArray = function(o) {
    return typeof o === 'object' && !Ifm.Type.isString(o) && typeof o.length === 'number' && !o.propertyIsEnumerable('length')
  };
  this.Type.isFunction = function(o) {
    return typeof o === 'function'
  };
  this.Type.isNumber = function(o) {
    return typeof o === 'number'
  };
  this.Type.isString = function(o) {
    return typeof o === 'string' || o instanceof String
  };
  this.Event = function() {
    if (!(this instanceof Ifm.Event))
      throw Ifm.Diagnostics.Errors.ctor();
    const _handlers = [];
    function raiseHandler(index, args) {
      return new Promise(function(resolve) {
          if (index >= 0) {
            const h = _handlers[index];
            const result = h.func.apply(h.owner, args);
            if (h.options.once) {
              _handlers.splice(index, 1)
            }
            if (result instanceof Promise) {
              result.finally(function() {
                raiseHandler(index - 1, args).finally(function() {
                  resolve()
                })
              })
            }
            else {
              raiseHandler(index - 1, args);
              resolve()
            }
          }
          else {
            resolve()
          }
        })
    }
    return {
        constructor: Ifm.Event, addHandler: function(func, owner = null, options = {once: false}) {
            if (!Ifm.Type.isFunction(func))
              return;
            if (!options || typeof options !== typeof{}) {
              const once = typeof options === typeof true ? options : false;
              options = {once}
            }
            _handlers.push({
              func, owner, options
            })
          }, hasHandlers: function() {
            return _handlers.length > 0
          }, removeAllHandlers: function() {
            _handlers.length = 0
          }, removeHandler: function(func) {
            var len = _handlers.length;
            while (len--) {
              if (_handlers[len].func === func) {
                _handlers.splice(len, 1)
              }
            }
          }, raise: function(args) {
            return raiseHandler(_handlers.length - 1, arguments)
          }
      }
  }
});
namespace("Ifm.Diagnostics", function() {
  this.Debug = {};
  this.Debug.onprint = new Ifm.Event;
  this.Debug.enabled = false;
  this.Debug.popupAssertions = false;
  this.Debug.assert = function __assert(condition, message) {
    if (!Ifm.Diagnostics.Debug.enabled)
      return;
    if (Ifm.Type.isString(condition)) {
      try {
        var tester = new Function("return " + condition);
        Ifm.Diagnostics.Debug.assert(tester(), condition + ' ' + message)
      }
      catch(e) {
        Ifm.Diagnostics.Debug.fail("Invalid assert condition '" + condition + "' : " + e.message)
      }
      return
    }
    if (!condition)
      Ifm.Diagnostics.Debug.fail(message)
  };
  this.Debug.fail = function __fail(message) {
    if (!Ifm.Diagnostics.Debug.enabled)
      return;
    var st = arguments[1];
    var fn = arguments[2] || __fail;
    if (!st) {
      try {
        throw new Error("Assertion failed");
      }
      catch(e) {
        st = e.stack || "[Callstack not available]"
      }
    }
    window.console && console.error && console.error(message, st);
    Ifm.Diagnostics.Debug.popupAssertions && alert(message + "\n\n----Stack----\n\n" + st)
  };
  this.Debug.clear = function() {
    if (!Ifm.Diagnostics.Debug.enabled)
      return;
    window.console && console.clear && console.clear();
    var conview = document.getElementById("consoleview");
    if (conview) {
      conview.innerHTML = ''
    }
  };
  this.Debug.print = function(str) {
    if (!Ifm.Diagnostics.Debug.enabled)
      return;
    var line = arguments.length > 1 ? Array.prototype.slice.call(arguments).join(' ') : str && str.toString() || null;
    if (line === null) {
      return
    }
    window.console && console.log && console.log(line);
    Ifm.Diagnostics.Debug.onprint.raise(line);
    var conview = document.getElementById("consoleview");
    if (conview) {
      conview.innerHTML += line + "<br>";
      conview.scrollTop = conview.scrollHeight
    }
  };
  this.Debug.printf = function(format, args) {
    if (!Ifm.Diagnostics.Debug.enabled)
      return;
    Ifm.Diagnostics.Debug.print(String.format.apply(null, arguments))
  };
  this.Errors = (function() {
    var instance = {};
    instance.arg = function(name) {
      return _error("Invalid function argument", name)
    };
    instance.argsno = function(num) {
      return _error("Invalid number of function arguments", num)
    };
    instance.browser = function() {
      return _error("Browser not supported")
    };
    instance.ctor = function(name) {
      return _error("Invalid constructor call", name)
    };
    instance.func = function(name) {
      return _error("Function argument expected", name)
    };
    instance.miss = function(name) {
      return _error("Missing type or module", name)
    };
    instance.notimpl = function(name) {
      return _error("Feature not implemented", name)
    };
    instance.notsup = function(name) {
      return _error("Feature not supported", name)
    };
    instance.op = function(state) {
      return _error("Invalid operation", state)
    };
    function _error(error, name) {
      return new Error(error + (name ? ": '" + name + "'" : ""))
    }
    return instance
  })()
});
;
namespace("Ifm.Net").WebSocket = (function() {
  var factory = {};
  factory.ErrorReasons = {
    Failed: "Connection failed", Lost: "Connection lost", Refused: "Connection refused"
  };
  factory.MessageType = {
    BINARY: "Binary", OBJECT: "Object", TEXT: "Text"
  };
  factory.isSupported = function() {
    return (global && global.Ifm && global.WebSocket) ? true : false
  };
  factory.create = function(url, protocol) {
    if (!factory.isSupported()) {
      throw Ifm.Diagnostics.Errors.notsup("WebSocket");
    }
    if (!Ifm.Type.isString(url)) {
      throw Ifm.Diagnostics.Errors.arg("url");
    }
    var instance = {};
    instance.events = defineEvents("connecting", "open", "closing", "closed", "error", "receive");
    instance.id = (function() {
      return id += 1
    })();
    instance.connect = function() {
      if (ws && ws.readyState < WebSocket.CLOSING) {
        return
      }
      instance.events.connecting.raise(instance, {});
      try {
        if (protocol) {
          ws = new WebSocket(url, protocol)
        }
        else {
          ws = new WebSocket(url)
        }
      }
      catch(err) {
        instance.events.error.raise(instance, {error: err});
        instance.events.closed.raise(instance, {
          clean: false, reason: Ifm.Net.WebSocket.ErrorReasons.Failed
        });
        return
      }
      function open() {
        if (!wasOpen) {
          console.debug("[Ifm.Net.WebSocket] %d [%s|%s] %s", id, url, protocol, "onopen");
          wasOpen = true;
          instance.events.open.raise(instance, {})
        }
      }
      ;
      ws.onmessage = function(e) {
        if (Ifm.Type.isString(e.data)) {
          var s = e.data;
          if (s.startsWith("#close")) {
            var parts = s.split("|"),
              code = parts.length > 1 ? parts[1] : "0",
              reason = code + getCloseReason(code);
            console.debug("[Ifm.Net.WebSocket] %d [%s|%s] %s (%s)", id, url, protocol, "close notification", reason);
            return
          }
          open();
          if (s.startsWith("{") && s.endsWith("}")) {
            var o = null;
            try {
              o = JSON.parse(s)
            }
            catch(err) {}
            ;
            if (o !== null) {
              instance.events.receive.raise(instance, {
                type: factory.MessageType.OBJECT, message: o
              });
              return
            }
          }
          instance.events.receive.raise(instance, {
            type: factory.MessageType.TEXT, message: s
          })
        }
        else {
          open();
          instance.events.receive.raise(instance, {
            type: factory.MessageType.BINARY, message: e.data
          })
        }
      };
      ws.onclose = function(e) {
        console.debug("[Ifm.Net.WebSocket] %d [%s|%s] %s (code: %d)", id, url, protocol, "onclose", e.code);
        instance.events.closed.raise(instance, {
          clean: e.wasClean, reason: (e.wasClean ? "" : (wasOpen ? Ifm.Net.WebSocket.ErrorReasons.Lost : Ifm.Net.WebSocket.ErrorReasons.Refused))
        });
        wasOpen = false;
        ws = null
      };
      ws.onerror = function(e) {
        instance.events.error.raise(instance, e)
      }
    };
    instance.close = function() {
      console.debug("[Ifm.Net.WebSocket] %d [%s|%s] %s", id, url, protocol, "close");
      if (!ws || ws.readyState === WebSocket.CLOSED) {
        return
      }
      instance.events.closing.raise(instance, {});
      ws.close()
    };
    instance.send = function(message) {
      if (!ws || ws.readyState !== WebSocket.OPEN) {
        throw Ifm.Diagnostics.Errors.op("WebSocket not open");
      }
      ws.send(message)
    };
    Object.defineProperties(instance, {
      isOpen: {get: function() {
          return instance.state === WebSocket.OPEN
        }}, state: {get: function() {
            return ws ? ws.readyState : WebSocket.CLOSED
          }}
    });
    var ws = null;
    var wasOpen = false;
    return instance
  };
  function getCloseReason(code) {
    switch (code) {
      case"403":
        return ": no destination for protocol";
      case"500":
        return ": client-gateway protocol error";
      case"502":
        return ": gateway-server protocol error";
      case"503":
        return ": no destination reachable";
      default:
        return ""
    }
  }
  var id = 0;
  return factory
})();
;
namespace("Ifm.Messaging");
(function(ns) {
  ns.FStringMessage = {
    MessageHeaderV1: "*begin*", MessageTypeDelV1: "%%%", MessageFieldDelV1: "###", MessageFooterV1: "\xA7end\xA7", MessageHeaderV2: "\x7Cbegin\x7C", MessageTypeDelV2: "\x7C%\x7C", MessageFieldDelV2: "\x7C#\x7C", MessageFooterV2: "\x7Cend\x7C", MinValidLength: 16, ProtocolVersion: "V1"
  };
  ns.FStringMessageReader = function(messageBuffer) {
    if (!(this instanceof Ifm.Messaging.FStringMessageReader)) {
      throw Ifm.Diagnostics.Errors.ctor("Ifm.Messaging.FStringMessageReader");
    }
    if (!messageBuffer) {
      throw Ifm.Diagnostics.Errors.arg("messageBuffer");
    }
    this._message = '';
    this._readingpos = 0;
    if (Ifm.Type.isString(messageBuffer)) {
      this._message = messageBuffer
    }
    else {
      throw new Error("FStringMessageReader() -> Unsupported message data format: " + typeof messageBuffer);
    }
    if (this._message.length < ns.FStringMessage.MinValidLength) {
      throw new Error("FStringMessageReader() -> Invalid message length: " + this._message.length);
    }
    if (this._message.startsWith(ns.FStringMessage.MessageHeaderV1)) {
      var matches = this._message.match(/^\*begin\*([A-z0-9]*)%{3}/);
      if (matches && matches.length == 2) {
        this.type = matches[1]
      }
      else {
        throw new Error("FStringMessageReader() -> Invalid FStringMessage type format");
      }
      matches = this._message.match(/%{3}(.*)[\xA7|$]end[\xA7|$]/);
      if (matches && matches.length == 2) {
        this.data = matches[1].split(ns.FStringMessage.MessageFieldDelV1)
      }
      else {
        throw new Error("FStringMessageReader() -> Invalid FStringMessage data format");
      }
    }
    else if (this._message.startsWith(ns.FStringMessage.MessageHeaderV2)) {
      var matches = this._message.match(/^\x7Cbegin\x7C([A-z0-9]*)\x7C%\x7C/);
      if (matches && matches.length == 2) {
        this.type = matches[1]
      }
      else {
        throw new Error("FStringMessageReader() -> Invalid FStringMessage type format");
      }
      matches = this._message.match(/\x7C%\x7C(.*)[\x7C]end[\x7C]/);
      if (matches && matches.length == 2) {
        this.data = matches[1].split(ns.FStringMessage.MessageFieldDelV2)
      }
      else {
        throw new Error("FStringMessageReader() -> Invalid FStringMessage data format");
      }
    }
    else {
      throw new Error("FStringMessageReader() -> Invalid FStringMessage signature");
    }
  };
  ns.FStringMessageWriter = function FStringMessageWriter(type, protocolVersion) {
    if (!(this instanceof Ifm.Messaging.FStringMessageWriter)) {
      throw Ifm.Diagnostics.Errors.ctor("Ifm.Messaging.FStringMessageWriter");
    }
    if (!Ifm.Type.isString(type)) {
      throw Ifm.Diagnostics.Errors.arg("type");
    }
    this._dataAdded = false;
    this.type = type;
    if (protocolVersion === "V2") {
      ns.FStringMessage.protocolVersion = protocolVersion;
      this._message = ns.FStringMessage.MessageHeaderV2 + type + ns.FStringMessage.MessageTypeDelV2
    }
    else {
      ns.FStringMessage.protocolVersion = "V1";
      this._message = ns.FStringMessage.MessageHeaderV1 + type + ns.FStringMessage.MessageTypeDelV1
    }
  };
  ns.FStringMessageWriter.prototype.add = function(str) {
    if (str === undefined || str === null) {
      throw Ifm.Diagnostics.Errors.arg("str");
    }
    if (ns.FStringMessage.protocolVersion === 'V1') {
      if (this._dataAdded) {
        this._message += ns.FStringMessage.MessageFieldDelV1
      }
      this._message += str;
      this._dataAdded = true
    }
    else {
      if (this._dataAdded) {
        this._message += ns.FStringMessage.MessageFieldDelV2
      }
      this._message += str;
      this._dataAdded = true
    }
    return this
  };
  ns.FStringMessageWriter.prototype.end = function() {
    if (ns.FStringMessage.protocolVersion === 'V1') {
      this._message += ns.FStringMessage.MessageFooterV1
    }
    else {
      this._message += ns.FStringMessage.MessageFooterV2
    }
    return this
  };
  ns.FStringMessageWriter.prototype.toString = function() {
    return this._message
  }
})(Ifm.Messaging);
namespace("Ifm.Messaging").FPropertyList = function(pliststr) {
  if (!(this instanceof Ifm.Messaging.FPropertyList)) {
    throw Ifm.Diagnostics.Errors.ctor();
  }
  if (!pliststr || !Ifm.Type.isString(pliststr)) {
    throw Ifm.Diagnostics.Errors.arg("pliststr");
  }
  pliststr = pliststr.trim();
  var list = {},
    sort = [],
    match;
  var re = /{\s*([^\s{]*)\s*=\s*([^}]*)}/g;
  while (match = re.exec(pliststr)) {
    list[match[1]] = match[2];
    sort.push(match[1])
  }
  this.events = defineEvents("changed");
  this.originalString = pliststr;
  this.get = function(key) {
    if (!key || !Ifm.Type.isString(key)) {
      throw Ifm.Diagnostics.Errors.arg("key");
    }
    return list[key]
  };
  this.keys = function() {
    var properties = [];
    for (var p in list) {
      properties.push(p)
    }
    return properties
  };
  this.remove = function(key) {
    if (!key || !Ifm.Type.isString(key)) {
      throw Ifm.Diagnostics.Errors.arg("key");
    }
    if (list.hasOwnProperty(key)) {
      delete list[key];
      var len = sort.length;
      while (len--) {
        if (sort[len] === key) {
          sort.splice(len, 1);
          this.events.changed.raise(this, {
            key: key, value: undefined
          })
        }
      }
    }
  };
  this.set = function(key, value) {
    if (!key || !Ifm.Type.isString(key)) {
      throw Ifm.Diagnostics.Errors.arg("key");
    }
    if (value !== undefined) {
      if (!list.hasOwnProperty(key)) {
        sort.push(key)
      }
      if (list[key] !== value) {
        list[key] = value;
        this.events.changed.raise(this, {
          key: key, value: value
        })
      }
    }
  };
  this.toString = function() {
    var pliststr = "{";
    for (var i = 0; i < sort.length; i++) {
      pliststr += "{" + sort[i] + " = " + list[sort[i]] + "}"
    }
    return pliststr + "}"
  }
};
;
(function() {
  var ns = namespace("Ifm.ScriptControl");
  ns.DeviceLineStates = {
    Idle: 0, Incoming: 1, Calling: 2, Talking: 3
  };
  ns.AgentStates = {
    NotAvailable: 0x001, Ready: 0x002, Assigned: 0x004, Booked: 0x008, Talking: 0x010, Paused: 0x020, PostCallWork: 0x040, OtherCall: 0x080, Alerting: 0x100, WaitingOutbound: 0x200, WaitingForTransfer: 0x400, Undefined: 0xFFFF
  };
  ns.CallStates = {
    Undefined: 0, Alerting: 1, Assigned: 2, Failed: 3, Established: 4, Terminated: 5, Transferred: 6, PostCall: 7
  };
  ns.PauseReplies = {
    Refused: 0, Accepted: 1, Booked: 2, PauseReasonsList: 3
  };
  ns.CampaignStates = {
    Inactive: 0x1, Active: 0x2, Suspended: 0x4, Undefined: 0xFFFF
  };
  ns.CallTransferModes = {
    Blind: 0, Default: 1, Consultative: 2
  };
  ns.DeviceLines = {
    Primary: 1, Secondary: 2
  };
  ns.CampaignInfoMask = {
    Inactive: 0x1, Active: 0x2, Suspended: 0x4, StatusMask: 0x7, Inbound: 0x8, Outbound: 0x10, BoundnessMask: 0x18, NotAssigned: 0x20, Assigned: 0x40, AssignmentMask: 0x60, PostCallWork: 0x80, HideTransferNotAllowed: 0x100, ExcludeSyntheticCampaigns: 0x200, ExcludeHumanCampaigns: 0x400, CompressedFormat: 0x80000000
  };
  ns.AgentInfoMask = {
    NotAvailable: 0x1, Available: 0x2, Assigned: 0x4, Booked: 0x8, Talking: 0x10, Paused: 0x20, PostCallWork: 0x40, OtherCall: 0x80, AnyAvailable: 0xFE, AnyCampaign: 0x0, SpecificCampaign: 0x100, OmitSynthetics: 0x200, OmitHumans: 0x400
  };
  ns.AudioRecordingStateMask = {
    Inactive: 0x0, Active: 0x1, TxChannelMuted: 0x2, RxChannelMuted: 0x4
  };
  ns.AssignmentTypes = {
    Mandatory: 2, Optional: 0
  };
  ns.CallFailureReasonCodes = {
    NoDialTone: 1, NoRingBack: 2, LineBusy: 3, NoAnswer: 4, FaxTone: 5, RemoteHangUp: 6, AgentNoDialTone: 7, AgentNoRingBack: 8, AgentBusy: 9, AgentNoAnswer: 10, Unknown: 255
  };
  ns.PhonebarButtons = {
    Login: 1, Pause: 2, Logout: 3, Call: 4, Transfer: 5, Assignments: 6, FlashDial: 7, Hookstate: 8, Flash: 9, Retake: 10, Mute: 11, Line1: 12, Line2: 13, Conference: 14, StartRecording: 15, StopRecording: 16, MuteRecording: 17, DialPad: 18, QueueInfo: 19, Panic: 20, ShowRecordingPanel: 21, AppendCueSheet: 22, ExpandView: 23
  };
  ns.MediaTypes = {
    Unknown: 0, Audio: 1, AtPhones: 2, Video: 4, AudioVideo: 5, NearRealTime: 8, StoreAndForward: 16
  };
  ns.LoginReplyFailureCauses = {
    Unspecified: 0, AccountLockout: 1, ExpiredPassword: 2, WrongUsernameOrPassword: 3, InvalidNewPassword: 4, PasswordChangeNotAllowed: 5, WrongState: 6, InvalidExtension: 7, ExtensionAlreadyInUse: 8, TokenBasedLoginNotAvailable: 9, InvalidToken: 10, ProvisioningError: 11, ExtensionTranslationError: 0x80
  };
  ns.instance = (function() {
    var instance = {};
    const Initialization = "[Initialization]";
    const Connecting = "[Connecting]";
    const NotLoggedIn = "[Not Logged In]";
    const Available = "[Logged In]";
    const InPause = "[Paused]";
    const Ready = "[Ready]";
    const Talking = "[Talking]";
    const InPostCallWork = "[Post Call]";
    const InOtherCall = "[Other Call]";
    const InAssignment = "[Assigned]";
    const WaitingOutbound = "[Waiting Outbound]";
    const Alerting = "[Alerting]";
    const WaitingTransfer = "[Waiting Transfer]";
    const Idle = "[Idle]";
    const Incoming = "[Incoming]";
    const Calling = "[Calling]";
    const TalkingLine = "[Talking]";
    var protocolVersion = "V1";
    var phonebarType = 0;
    var scriptControlVersion = "2.1.2.0";
    var phonebarVersion = "";
    var campaignlessEvents = true;
    var registeredCampaigns = [];
    var connecting = true;
    var status = {language: "it"};
    var agent = {
        state: Ifm.ScriptControl.AgentStates.NotAvailable, pauseReasonId: 0, pauseReasonDescription: "", id: "", firstName: "", lastName: "", extension: "", username: "", waitingOutbound: false, waitingForCallId: 0, waitingForCampaign: ""
      };
    var phoneDevice = {
        connected: false, registered: false, inConference: false, supportConference: false, numberOfLines: 0, selectedLine: 1, lineStates: []
      };
    var xmppDevice = {
        connected: false, initialized: false
      };
    var activeCalls = [];
    var converStringAgentState = function(stateStr) {
        switch (stateStr) {
          case Initialization:
          case Connecting:
          case NotLoggedIn:
            return Ifm.ScriptControl.AgentStates.NotAvailable;
          case Alerting:
            return Ifm.ScriptControl.AgentStates.Alerting;
          case Available:
            return Ifm.ScriptControl.AgentStates.Ready;
          case InAssignment:
            return Ifm.ScriptControl.AgentStates.Assigned;
          case InOtherCall:
            return Ifm.ScriptControl.AgentStates.OtherCall;
          case InPause:
            return Ifm.ScriptControl.AgentStates.Paused;
          case InPostCallWork:
            return Ifm.ScriptControl.AgentStates.PostCallWork;
          case Ready:
            return Ifm.ScriptControl.AgentStates.Ready;
          case Talking:
            return Ifm.ScriptControl.AgentStates.Talking;
          case WaitingOutbound:
            return Ifm.ScriptControl.AgentStates.WaitingOutbound;
          case WaitingTransfer:
            return Ifm.ScriptControl.AgentStates.WaitingForTransfer;
          default:
            return Ifm.ScriptControl.AgentStates.Undefined
        }
      };
    var convertStringLineState = function(stateStr) {
        switch (stateStr) {
          case Idle:
            return Ifm.ScriptControl.DeviceLineStates.Idle;
          case Incoming:
            return Ifm.ScriptControl.DeviceLineStates.Incoming;
          case Calling:
            return Ifm.ScriptControl.DeviceLineStates.Calling;
          case TalkingLine:
            return Ifm.ScriptControl.DeviceLineStates.Talking
        }
        return Ifm.ScriptControl.DeviceLineStates.Idle
      };
    var getAudioCall = function() {
        return Object.values(activeCalls).find(function(c) {
            if (c.mediatype === Ifm.ScriptControl.MediaTypes.Audio) {
              return c
            }
          }) || null
      };
    var isRegisterdForCampaignLessEvents = function() {
        return campaignlessEvents
      };
    var isRegisterdCampaignEvents = function(campaign) {
        return registeredCampaigns.includes(campaign)
      };
    var resetAgentInfo = function() {
        agent = {
          state: Ifm.ScriptControl.AgentStates.NotAvailable, pauseReasonId: 0, pauseReasonDescription: "", id: "", firstName: "", lastName: "", extension: "", username: "", waitingOutbound: false, waitingForCallId: 0, waitingForCampaign: ""
        }
      };
    instance.events = defineEvents("onconnected", "ondisconnected", "onabortcallreply", "onalertingevent", "onansweredevent", "onassignmentrequest", "onrecordingcompletedevent", "onrecordingmutedevent", "onrecordingstartedevent", "onbookedevent", "oncallfailureevent", "oncalltransferinitiatedevent", "onconnectionremovedevent", "ondeviceinfochangedevent", "ondisplaynamechangedevent", "onphonebarclosedevent", "onloginreply", "onlogoutreply", "onnewcallreply", "onothercallevent", "onpauseevent", "onpausereply", "onphonebarconnectionlostevent", "onpostcallworkevent", "onreadyevent", "onreadyfordetachevent", "onreadyfordetachexevent", "onreadyreply", "onreadyfortransferevent", "onretrievecallreply", "onrejectableassignmentrequest", "onterminatedevent", "ontransferreply", "onmaskeddigitreceivedevent", "onmaskedpayloadreceivedevent", "oninitialized", "onpausebookedevent", "onstatechangedevent", "onsupervisormessageevent", "onphonedeviceconnectedevent", "onphonedevicedisconnectedevent", "onphonedeviceregisteredstateevent", "onphonedevicelinestatechangedevent", "onphonedeviceconferencestateevent", "onphonedeviceselectedlinechangedevent", "onphonedevicecallingevent", "onphonedevicecallconnectedevent", "onphonedevicecalldisconnectedevent", "onphonedevicedisplaynameevent", "onphonedeviceincomingcallevent", "onphonedeviceringevent", "onphonedevicemuteevent", "onxmppdeviceinitializedevent", "onxmppdeviceregisteredstateevent", "onxmppdevicenewcallevent", "onxmppdevicecallclosedevent", "onxmppdevicefiletransferevent", "onxmppdevicemessagereceivedevent", "onqueueinforeply", "onagentslistreply", "oncampaignslistreply", "onpausereasonslistreply", "onagentdetailsreply", "oncalldetailsreply", "ongetbuttonenabledreply", "oncommandexecutedevent");
    Object.defineProperties(instance, {
      domain: {get: function() {
          return domain
        }}, isConnected: {get: function() {
            return ws && ws.isOpen
          }}, version: {get: function() {
            return scriptControlVersion
          }}, phonebarVersion: {get: function() {
            return phonebarVersion
          }}
    });
    instance.connect = function(config) {
      var service = defaultServiceUrl;
      if (config && config.service) {
        service = config.service
      }
      if (config && config.phonebarType === 1) {
        phonebarType = config.phonebarType
      }
      console.debug("[ScriptControl.js] Connecting to PhoneBar WebSocket - Service:", service, "phoneBarType:", phonebarType);
      ws && ws.close();
      ws = Ifm.Net.WebSocket.create(service);
      connecting = true;
      ws.events.closed = function(s, e) {
        console.debug("[ScriptControl.js] Connection to PhoneBar WebSocket lost");
        instance.events.ondisconnected.raise(e);
        ws = null
      };
      ws.events.open = function(s, e) {
        if (phonebarType === 0) {
          console.debug("[ScriptControl.js] Connected to PhoneBar WebSocket.");
          instance.events.onconnected.raise({});
          connecting = false
        }
        else {
          console.debug("[ScriptControl.js] Connected to PhoneBar WebSocket. Waiting for status snapshot...")
        }
      };
      ws.events.receive = function(s, e) {
        if (phonebarType === 0) {
          if (e.type === Ifm.Net.WebSocket.MessageType.TEXT) {
            receiveMessage(e.message)
          }
        }
        else {
          if (e.type === "Object") {
            receiveMessage(e.message)
          }
        }
      };
      protocolVersion = "V1";
      ws.connect()
    };
    instance.disconnect = function() {
      console.debug("[ScriptControl.js] Disconnecting from PhoneBar WebSocket");
      ws && ws.close()
    };
    instance.addconnection = function(name, mask) {
      if (!name) {
        throw Ifm.Diagnostics.Errors.func("name");
      }
      console.debug("[ScriptControl.js] AddConnection; Name:", name, "Mask:", mask);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("10001", protocolVersion);
        tm.add(name).add(mask || "").add("2").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        if (!registeredCampaigns.includes(name)) {
          registeredCampaigns.push(name)
        }
      }
    };
    instance.addcampaignlessconnection = function(mask) {
      console.debug("[ScriptControl.js] AddCampaignLessConnection; Mask:", mask);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("10002", protocolVersion);
        tm.add(mask || "").add("2").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        campaignlessEvents = true
      }
    };
    instance.removeconnection = function(name) {
      if (!name) {
        throw Ifm.Diagnostics.Errors.func("name");
      }
      console.debug("[ScriptControl.js] RemoveConnection; Name:", name);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("10003", protocolVersion);
        tm.add(name).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        registeredCampaigns = registeredCampaigns.filter(function(e) {
          return e !== name
        })
      }
    };
    instance.removecampaignlessconnection = function() {
      console.debug("[ScriptControl.js] RemoveCampaignLessConnection");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("10004", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        campaignlessEvents = false
      }
    };
    instance.sethookstate = function(hookstate) {
      console.debug("[ScriptControl.js] SetHookState; State:", hookstate);
      if ((hookstate !== 0 && hookstate !== 1)) {
        throw Ifm.Diagnostics.Errors.func("hookstate");
      }
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30001", protocolVersion);
        tm.add(hookstate).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {state: hookstate === 1};
        sendMessageToPhonebarRich(20020, 0, e)
      }
    };
    instance.dump = function(message, context) {
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30030", protocolVersion);
        tm.add(message || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            context: context || "[ScriptControl.js]", message: message
          };
        sendMessageToPhonebarRich(20030, 0, e)
      }
    };
    instance.login = function(firstname, lastname, password, extension) {
      if (!firstname) {
        throw Ifm.Diagnostics.Errors.func("firstname");
      }
      if (!lastname) {
        throw Ifm.Diagnostics.Errors.func("lastname");
      }
      console.debug("[ScriptControl.js] Login; FirstName:", firstname, "LastName:", lastname, "Extension:", extension);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30002", protocolVersion);
        tm.add(firstname).add(lastname).add(password || "").add(extension || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            firstName: firstname, lastName: lastname, password: password, extension: extension
          };
        sendMessageToPhonebarRich(20010, 0, e)
      }
    };
    instance.loginwithtoken = function(token, extension) {
      if (!token) {
        throw Ifm.Diagnostics.Errors.func("token");
      }
      console.debug("[ScriptControl.js] LoginWithToken; Extension:", extension);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30034", protocolVersion);
        tm.add(token).add(extension || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            firstName: "\t", lastName: "\t", password: token, extension: extension
          };
        sendMessageToPhonebarRich(20010, 0, e)
      }
    };
    instance.logout = function() {
      console.debug("[ScriptControl.js] Logout");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30003", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20011, 0, {})
      }
    };
    instance.makemanualcall = function(line, number, video) {
      if (!line || (line !== 1 && line !== 2)) {
        throw Ifm.Diagnostics.Errors.func("line");
      }
      if (!number) {
        throw Ifm.Diagnostics.Errors.func("number");
      }
      if ((video !== 0 && video !== 1)) {
        throw Ifm.Diagnostics.Errors.func("video");
      }
      console.debug("[ScriptControl.js] MakeManualCall; Line:", line, "Number:", number, "video:", video);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30004", protocolVersion);
        tm.add(line).add(number).add(video).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            line: line, phoneNumber: number
          };
        sendMessageToPhonebarRich(20012, 0, e)
      }
    };
    instance.makecall = function(number, campaign, callingnumber, scripttype) {
      if (!number) {
        throw Ifm.Diagnostics.Errors.func("number");
      }
      if (!campaign) {
        throw Ifm.Diagnostics.Errors.func("campaign");
      }
      console.debug("[ScriptControl.js] MakeCall; Number:", number, "Campaign:", campaign, "CallingNumber:", callingnumber, "ScriptType:", scripttype);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30005", protocolVersion);
        tm.add(number).add(campaign).add(callingnumber || "").add(scripttype || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            phoneNumber: number, campaignName: campaign, callingNumber: callingnumber, scriptType: scripttype
          };
        sendMessageToPhonebarRich(20013, 0, e)
      }
    };
    instance.makedialercall = function(campaign, hint) {
      if (!campaign) {
        throw Ifm.Diagnostics.Errors.func("campaign");
      }
      if ((hint !== 1 && hint !== 0)) {
        throw Ifm.Diagnostics.Errors.func("accepted");
      }
      console.debug("[ScriptControl.js] MakeDialerCall; Campaign:", campaign, "Hint:", hint);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30006", protocolVersion);
        tm.add(campaign).add(hint).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] makedialercall is not supported")
      }
    };
    instance.pause = function(reasonid) {
      console.debug("[ScriptControl.js] Pause; ReasonId:", reasonid);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30007", protocolVersion);
        tm.add(reasonid || "0").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {reasonId: reasonid};
        sendMessageToPhonebarRich(20015, 0, e)
      }
    };
    instance.getqueueinfo = function(campaign) {
      console.debug("[ScriptControl.js] GetQueueInfo; Campaign:", campaign);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30008", protocolVersion);
        tm.add(campaign || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {campaignName: campaign};
        sendMessageToPhonebarRich(20009, 30005, e)
      }
    };
    instance.playlocalfile = function(filefullpath) {
      if (!filefullpath) {
        throw Ifm.Diagnostics.Errors.func("filefullpath");
      }
      console.debug("[ScriptControl.js] PlayLocalFile; FileFullPath:", filefullpath);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30009", protocolVersion);
        tm.add(filefullpath).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] playlocalfile is not supported")
      }
    };
    instance.stopplaylocalfile = function() {
      console.debug("[ScriptControl.js] StopPlayLocalFile");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30010", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] stopplaylocalfile is not supported")
      }
    };
    instance.getagentslist = function(mask, campaign) {
      if (!mask) {
        throw Ifm.Diagnostics.Errors.func("mask");
      }
      console.debug("[ScriptControl.js] GetAgentList; Mask:", mask, "Campaign:", campaign);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30011", protocolVersion);
        tm.add(mask).add(campaign || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            mask: mask, campaignName: campaign
          };
        sendMessageToPhonebarRich(20006, 30002, e)
      }
    };
    instance.getcampaignslist = function(mask, callid, mediatype) {
      if (!mask) {
        throw Ifm.Diagnostics.Errors.func("mask");
      }
      console.debug("[ScriptControl.js] GetCampaignsList; Mask:", mask, "CallId:", callid, "Mediatype:", mediatype);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30012", protocolVersion);
        tm.add(mask).add(callid || "0").add(mediatype || "0").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            mask: mask, callId: callid, mediatype: mediatype
          };
        sendMessageToPhonebarRich(20007, 30003, e)
      }
    };
    instance.getpausereasonslist = function() {
      console.debug("[ScriptControl.js] GetPauseReasonsList");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30013", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20008, 30004, {})
      }
    };
    instance.addcalldata = function(name, value) {
      if (!name) {
        throw Ifm.Diagnostics.Errors.func("name");
      }
      if (!value) {
        throw Ifm.Diagnostics.Errors.func("name");
      }
      console.debug("[ScriptControl.js] AddCallData; Name:", name);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30014", protocolVersion);
        tm.add(name).add(value).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            name: name, value: value
          };
        sendMessageToPhonebarRich(20027, 0, e)
      }
    };
    instance.abortcall = function() {
      console.debug("[ScriptControl.js] AbortCall");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30015", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20001, 0, {})
      }
    };
    instance.acceptrejectassignment = function(accepted) {
      if ((accepted !== 1 && accepted !== 0)) {
        throw Ifm.Diagnostics.Errors.func("accepted");
      }
      console.debug("[ScriptControl.js] AcceptRejectAssignment; Accepted:", accepted);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30016", protocolVersion);
        tm.add(accepted).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] acceptrejectassignment is not supported")
      }
    };
    instance.retrievecall = function() {
      console.debug("[ScriptControl.js] RetrieveCall");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30017", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20017, 0, {})
      }
    };
    instance.swapcall = function() {
      console.debug("[ScriptControl.js] SwapCall");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30018", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] swapcall is not supported")
      }
    };
    instance.transfercall = function(campaign, firstname, lastname, mandatory, mode) {
      if (!campaign) {
        throw Ifm.Diagnostics.Errors.func("campaign");
      }
      console.debug("[ScriptControl.js] TransferCall; Campaign:", campaign, "FirstName:", firstname, "LastName:", lastname, "Mandatory:", mandatory, "Mode:", mode);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30019", protocolVersion);
        tm.add(campaign).add(firstname || "").add(lastname || "");
        if (mandatory === 1 || mandatory === 0) {
          tm.add(mandatory)
        }
        else {
          tm.add("")
        }
        if (mode === 0 || mode === 1 || mode === 2) {
          tm.add(mode)
        }
        else {
          tm.add("")
        }
        tm.end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            campaignName: campaign, firstName: firstname, lastName: lastname, mandatory: mandatory, mode: mode
          };
        sendMessageToPhonebarRich(20026, 0, e)
      }
    };
    instance.startaudiorecording = function(filename, settings) {
      if (!filename) {
        throw Ifm.Diagnostics.Errors.func("filename");
      }
      console.debug("[ScriptControl.js] StartAudioRecording; FileName:", filename, "Settings:", settings);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30020", protocolVersion);
        tm.add(filename).add(settings || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            fileName: filename, settings: settings
          };
        sendMessageToPhonebarRich(20004, 0, e)
      }
    };
    instance.stopaudiorecording = function() {
      console.debug("[ScriptControl.js] StopAudioRecording");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30021", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20005, 0, {})
      }
    };
    instance.muteaudiorecording = function(mutetx, muterx, appendcuesheet, cuesheet) {
      if ((mutetx !== 1 && mutetx !== 0)) {
        throw Ifm.Diagnostics.Errors.func("mutetx");
      }
      if ((muterx !== 1 && muterx !== 0)) {
        throw Ifm.Diagnostics.Errors.func("muterx");
      }
      console.debug("[ScriptControl.js] MuteAudioRecording; MuteTx:", mutetx, "MuteRx:", muterx, "AppendCueSheet:", appendcuesheet, "CueSheet:", cuesheet);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30022", protocolVersion);
        tm.add(mutetx).add(muterx).add(appendcuesheet || "").add(cuesheet || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            muteTxChannel: mutetx, muteRxChannel: muterx, appendCueSheet: appendcuesheet, cueSheet: cuesheet
          };
        sendMessageToPhonebarRich(20003, 0, e)
      }
    };
    instance.appendcuesheet = function(cuesheet) {
      if (!cuesheet) {
        throw Ifm.Diagnostics.Errors.func("cuesheet");
      }
      console.debug("[ScriptControl.js] AppendCueSheet; CueSheet:", cuesheet);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30023", protocolVersion);
        tm.add(cuesheet).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {cueSheet: cuesheet};
        sendMessageToPhonebarRich(20002, 0, e)
      }
    };
    instance.getcurrentagetdetails = function() {
      console.debug("[ScriptControl.js] GetCurrentAgentDetails");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30024", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
    };
    instance.getcurrentagentdetails = function() {
      console.debug("[ScriptControl.js] GetCurrentAgentDetails");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30024", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        if (isRegisterdForCampaignLessEvents()) {
          if (agent.state === Ifm.ScriptControl.AgentStates.Undefined || agent.state === Ifm.ScriptControl.AgentStates.NotAvailable) {
            instance.events.onagentdetailsreply.raise({
              firstname: "", lastname: "", username: "", extension: "", state: agent.state, id: ""
            })
          }
          else {
            instance.events.onagentdetailsreply.raise({
              firstname: agent.firstName, lastname: agent.lastName, username: agent.username, extension: agent.extension, state: agent.state, id: agent.id
            })
          }
        }
      }
    };
    instance.getcurrentcalldetails = function() {
      console.debug("[ScriptControl.js] GetCurrentCallDetails");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30037", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        if (isRegisterdForCampaignLessEvents()) {
          var call = getAudioCall();
          if (call) {
            var recState = call.isRecording ? 1 : 0;
            recState += call.recordingData.txChannelMuted ? 2 : 0;
            recState += call.recordingData.rxChannelMuted ? 4 : 0;
            var state = call.state;
            if (state === undefined) {
              if (call.postcall === true) {
                state = Ifm.ScriptControl.CallStates.PostCall
              }
              else {
                state = Ifm.ScriptControl.CallStates.Established
              }
              call.callData = call.callData.originalString
            }
            instance.events.oncalldetailsreply.raise({
              callid: call.callId, state: state, campaignname: call.campaignName, calldata: call.callData, isoutbound: call.callId > 0x7FFF, audiorecordingstate: recState, audiorecordingfilename: call.recordingData.fileName
            })
          }
          else {
            instance.events.oncalldetailsreply.raise({
              callid: 0, state: 0, campaignname: "", calldata: "{}", isoutbound: false, audiorecordingstate: 0, audiorecordingfilename: ""
            })
          }
        }
      }
    };
    instance.ready = function() {
      console.debug("[ScriptControl.js] Ready");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30025", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20016, 0, {})
      }
    };
    instance.conferencecall = function(enabled) {
      if ((enabled !== 1 && enabled !== 0)) {
        throw Ifm.Diagnostics.Errors.func("enabled");
      }
      console.debug("[ScriptControl.js] ConferenceCall; Enabled:", enabled);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30026", protocolVersion);
        tm.add(enabled).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        if (enabled === 1) {
          sendMessageToPhonebarRich(21002, 0, {})
        }
        else {
          sendMessageToPhonebarRich(21001, 0, {})
        }
      }
    };
    instance.switchactiveline = function() {
      console.debug("[ScriptControl.js] SwitchActiveLine");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30027", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(21004, 0, {})
      }
    };
    instance.showcalltransferform = function() {
      console.debug("[ScriptControl.js] ShowCallTransferForm");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30028", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] showcalltransferform is not supported")
      }
    };
    instance.setphonebarbuttonenabled = function(buttonindex, enabled) {
      console.debug("[ScriptControl.js] SetPhoneBarButtonEnabled; ButtonIndex:", buttonindex, "Enabled:", enabled);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30029", protocolVersion);
        tm.add(buttonindex).add(enabled).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            buttonId: buttonindex, enabled: enabled === 1
          };
        sendMessageToPhonebarRich(20019, 0, e)
      }
    };
    instance.getphonebarbuttonenabled = function(buttonindex) {
      console.debug("[ScriptControl.js] SetPhoneBarButtonEnabled; ButtonIndex:", buttonindex);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30029", protocolVersion);
        tm.add(buttonindex).add(enabled).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {buttonId: buttonindex};
        sendMessageToPhonebarRich(20028, 30013, e)
      }
    };
    instance.showinformationpopup = function(messagetext, timespan) {
      if (!messagetext) {
        throw Ifm.Diagnostics.Errors.func("messagetext");
      }
      console.debug("[ScriptControl.js] ShowInformationPopup; MessageText:", messagetext, "TimeSpan:", timespan);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30031", protocolVersion);
        tm.add(messagetext).add(timespan || 5).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        console.warn("[ScriptControl.js] showinformationpopup is not supported")
      }
    };
    instance.savecalldata = function(calldata) {
      if (phonebarType === 0) {
        if (!calldata) {
          throw Ifm.Diagnostics.Errors.func("calldata");
        }
        console.debug("[ScriptControl.js] SaveCallDate; CallData:", calldata);
        var tm = new Ifm.Messaging.FStringMessageWriter("30032", protocolVersion);
        tm.add(calldata || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20018, 0, {})
      }
    };
    instance.setmutestate = function(muted) {
      if ((muted !== 1 && muted !== 0)) {
        throw Ifm.Diagnostics.Errors.func("muted");
      }
      console.debug("[ScriptControl.js] SetMuteState; Muted:", muted);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30033", protocolVersion);
        tm.add(muted).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {muted: muted};
        sendMessageToPhonebarRich(20014, 0, e)
      }
    };
    instance.agentloginwithtoken = function(token, extension) {
      if (!token) {
        throw Ifm.Diagnostics.Errors.func("token");
      }
      console.debug("[ScriptControl.js] AgentLoginWithToken; Extension:", extension);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30034", protocolVersion);
        tm.add(token).add(extension || "").end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            firstName: "\t", lastName: "\t", password: token, extension: extension
          };
        sendMessageToPhonebarRich(20010, 0, e)
      }
    };
    instance.startdtmfmasking = function(numberofdigits, terminationdigit) {
      if (!numberofdigits) {
        throw Ifm.Diagnostics.Errors.func("numberofdigits");
      }
      if (!terminationdigit) {
        throw Ifm.Diagnostics.Errors.func("terminationdigit");
      }
      console.debug("[ScriptControl.js] StartDtmfMasking; NumberOfDigits:", numberofdigits, "TerminationDigit:", terminationdigit);
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30035", protocolVersion);
        tm.add(numberofdigits).add(terminationdigit).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        var e = {
            numberOfDigits: numberofdigits, terminationDigit: terminationdigit
          };
        sendMessageToPhonebarRich(20023, 0, e)
      }
    };
    instance.stopdtmfmasking = function() {
      console.debug("[ScriptControl.js] StopDtmfMasking");
      if (phonebarType === 0) {
        var tm = new Ifm.Messaging.FStringMessageWriter("30036", protocolVersion).end();
        sendMessageToPhonebarClassic(tm.toString())
      }
      else {
        sendMessageToPhonebarRich(20024, 0, {})
      }
    };
    function receiveMessage(message) {
      try {
        if (phonebarType === 0) {
          onPhonebarClassicMessage(message)
        }
        else {
          onPhonebarRichMessage(message)
        }
      }
      catch(err) {
        console.error("[ScriptControl.js] Error processing message:", message, err)
      }
    }
    function onPhonebarClassicMessage(message) {
      var msg;
      var msgCode;
      msg = new Ifm.Messaging.FStringMessageReader(message);
      msgCode = msg.type;
      console.debug("[ScriptControl.js] onPhonebarClassicMessage; Message Code:", msgCode);
      switch (msgCode) {
        case"20001":
          instance.events.onabortcallreply.raise({
            campaign: msg.data[0], callid: msg.data[1], accepted: msg.data[2]
          });
          break;
        case"20002":
          instance.events.onalertingevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          break;
        case"20003":
          instance.events.onansweredevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          break;
        case"20004":
          instance.events.onassignmentrequest.raise({
            campaign: msg.data[0], callid: msg.data[1], calldata: msg.data[2], recordingstate: msg.data[3], recordingfilename: msg.data[4]
          });
          break;
        case"20005":
          instance.events.onrecordingcompletedevent.raise({
            callid: msg.data[0], result: msg.data[1]
          });
          break;
        case"20006":
          instance.events.onrecordingmutedevent.raise({
            callid: msg.data[0], txchannelmuted: msg.data[1], rxchannelmuted: msg.data[2]
          });
          break;
        case"20007":
          instance.events.onrecordingstartedevent.raise({
            callid: msg.data[0], recfilename: msg.data[1]
          });
          break;
        case"20008":
          instance.events.onbookedevent.raise({campaign: msg.data[0]});
          break;
        case"20009":
          instance.events.oncallfailureevent.raise({
            campaign: msg.data[0], callid: msg.data[1], reasoncode: msg.data[2], protocolterminationcause: msg.data[3], protocolterminationdescription: msg.data[4], detectedcontentcode: msg.data[5], detectedcontentdescription: msg.data[5]
          });
          break;
        case"20010":
          instance.events.oncalltransferinitiatedevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          var tm = new Ifm.Messaging.FStringMessageWriter("10005", protocolVersion).end();
          sendMessageToPhonebarClassic(tm.toString());
          break;
        case"20011":
          instance.events.onconnectionremovedevent.raise({campaign: msg.data[0]});
          break;
        case"20012":
          instance.events.ondeviceinfochangedevent.raise({
            lineid: msg.data[0], deviceinfo: msg.data[1]
          });
          break;
        case"20013":
          instance.events.ondisplaynamechangedevent.raise({displayname: msg.data[0]});
          break;
        case"20014":
          instance.events.onphonebarclosedevent.raise({});
          break;
        case"20015":
          instance.events.onloginreply.raise({
            accepted: msg.data[0], failureCause: msg.data[1]
          });
          break;
        case"20016":
          instance.events.onlogoutreply.raise({accepted: msg.data[0]});
          break;
        case"20017":
          instance.events.onnewcallreply.raise({
            campaign: msg.data[0], accepted: msg.data[1], callid: msg.data[2]
          });
          break;
        case"20018":
          instance.events.onothercallevent.raise({});
          break;
        case"20019":
          instance.events.onpauseevent.raise({
            reasonid: msg.data[0], reasondescription: msg.data[1]
          });
          break;
        case"20020":
          instance.events.onpausereply.raise({
            accepted: msg.data[0], reasonid: msg.data[1], reasondescription: msg.data[2]
          });
          break;
        case"20021":
          instance.events.onphonebarconnectionlostevent.raise({});
          break;
        case"20022":
          instance.events.onpostcallworkevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          break;
        case"20023":
          instance.events.onreadyevent.raise({});
          break;
        case"20024":
          instance.events.onreadyfordetachevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          break;
        case"20025":
          instance.events.onreadyreply.raise({accepted: msg.data[0]});
          break;
        case"20026":
          instance.events.onreadyfortransferevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          break;
        case"20027":
          instance.events.onretrievecallreply.raise({accepted: msg.data[0]});
          break;
        case"20028":
          instance.events.onrejectableassignmentrequest.raise({
            campaign: msg.data[0], callid: msg.data[1], calldata: msg.data[2], recordingstate: msg.data[3], recordingfilename: msg.data[4]
          });
          break;
        case"20029":
          if (msg.data.length > 2) {
            instance.events.onterminatedevent.raise({
              campaign: msg.data[0], callid: msg.data[1], haspostcall: msg.data[2]
            })
          }
          else {
            instance.events.onterminatedevent.raise({
              campaign: msg.data[0], callid: msg.data[1]
            })
          }
          break;
        case"20030":
          instance.events.ontransferreply.raise({
            campaign: msg.data[0], callid: msg.data[1], accepted: msg.data[2]
          });
          break;
        case"20031":
          instance.events.onmaskeddigitreceivedevent.raise({callid: msg.data[0]});
          break;
        case"20032":
          instance.events.onmaskedpayloadreceivedevent.raise({
            callid: msg.data[0], payload: msg.data[1], result: msg.data[2]
          });
          break;
        case"20033":
          instance.events.onreadyfordetachevent.raise({
            campaign: msg.data[0], callid: msg.data[1]
          });
          instance.events.onreadyfordetachexevent.raise({
            campaign: msg.data[0], callid: msg.data[1], callterminated: msg.data[2], protocolterminationcause: msg.data[3], protocolterminationdescription: msg.data[4], detectedcontentcode: msg.data[5], detectedcontentdescription: msg.data[6]
          });
          break;
        case"40008":
          instance.events.onqueueinforeply.raise({
            campaign: msg.data[0], callsnum: msg.data[1], maxtime: msg.data[2], avgtime: msg.data[3]
          });
          break;
        case"40011":
          var agnum = msg.data[0];
          var aglist = [];
          for (var a = 0; a < agnum; a++) {
            aglist.push({
              firstname: msg.data[1 + (a * 5)], lastname: msg.data[2 + (a * 5)], state: msg.data[3 + (a * 5)], time: msg.data[4 + (a * 5)], campaign: msg.data[5 + (a * 5)]
            })
          }
          instance.events.onagentslistreply.raise({
            agentsnum: msg.data[0], agentslist: aglist
          });
          break;
        case"40012":
          console.debug("[ScriptControl.js] GetCampaignsList Reply received");
          var cpnum = msg.data[0];
          var cplist = [];
          console.debug("[ScriptControl.js] GetCampaignsList Reply: count = " + cpnum);
          for (var c = 0; c < cpnum; c++) {
            cplist.push({
              name: msg.data[1 + (c * 5)], state: msg.data[2 + (c * 5)], boundness: msg.data[3 + (c * 5)], assigned: msg.data[4 + (c * 5)], transfernotallowed: msg.data[5 + (c * 5)]
            })
          }
          instance.events.oncampaignslistreply.raise({
            campaignsnum: msg.data[0], campaignslist: cplist
          });
          break;
        case"40013":
          var pnum = msg.data[0];
          var plist = [];
          for (var p = 0; p < pnum; p++) {
            plist.push({
              code: msg.data[1 + (p * 2)], description: msg.data[2 + (p * 2)]
            })
          }
          instance.events.onpausereasonslistreply.raise({
            pausereasonsnum: msg.data[0], pausereasonslist: plist
          });
          break;
        case"40014":
          console.debug("[ScriptControl.js] GetCampaignsListEx Reply received");
          var cpnum = msg.data[0];
          var cplist = [];
          console.debug("[ScriptControl.js] GetCampaignsListEx Reply: count = " + cpnum);
          for (var c = 0; c < cpnum; c++) {
            cplist.push({
              name: msg.data[1 + (c * 6)], state: msg.data[2 + (c * 6)], boundness: msg.data[3 + (c * 6)], assigned: msg.data[4 + (c * 6)], transfernotallowed: msg.data[5 + (c * 6)], flags: msg.data[6 + (c * 6)]
            })
          }
          instance.events.oncampaignslistreply.raise({
            campaignsnum: msg.data[0], campaignslist: cplist
          });
          break;
        case"40024":
          if (msg.data.length > 4) {
            instance.events.onagentdetailsreply.raise({
              firstname: msg.data[0], lastname: msg.data[1], extension: msg.data[2], state: msg.data[3], id: msg.data[4]
            })
          }
          else {
            instance.events.onagentdetailsreply.raise({
              firstname: msg.data[0], lastname: msg.data[1], extension: msg.data[2], state: msg.data[3]
            })
          }
          break;
        case"40025":
          instance.events.oncalldetailsreply.raise({
            callid: msg.data[0], state: msg.data[1], campaignname: msg.data[2], calldata: msg.data[3], isoutbound: msg.data[4], audiorecordingstate: msg.data[5], audiorecordingfilename: msg.data[6], result: msg.data[7]
          });
          break;
        case"99998":
          var protocolVersion = msg.data[0];
          if (protocolVersion === "V3") {
            var tm = new Ifm.Messaging.FStringMessageWriter("99998", protocolVersion);
            tm.add("V2").end();
            sendMessageToPhonebarClassic(tm.toString());
            protocolVersion = "V2"
          }
          else if (protocolVersion === "V2") {
            var tm = new Ifm.Messaging.FStringMessageWriter("99998", protocolVersion);
            tm.add("V2").end();
            sendMessageToPhonebarClassic(tm.toString());
            protocolVersion = "V2"
          }
          else {
            var tm = new Ifm.Messaging.FStringMessageWriter("99998", protocolVersion);
            tm.add("V1").end();
            sendMessageToPhonebarClassic(tm.toString());
            protocolVersion = "V1"
          }
          console.debug("[ScriptControl.js] OnScriptConnected - Protocol Version = ", protocolVersion);
          break;
        case"99999":
          instance.events.oncommandexecutedevent.raise({
            commandcode: msg.data[0], result: msg.data[1]
          });
          break
      }
    }
    function onPhonebarRichMessage(message) {
      var msg;
      var msgCode;
      var campaignName = "";
      msgCode = message.Code;
      msg = message.Data;
      if (message.Code !== 11015) {
        console.debug("[ScriptControl.js] onPhonebarRichMessage", "MessageCode:", msgCode)
      }
      switch (msgCode) {
        case 10000:
          phonebarVersion = msg.version;
          agent.state = converStringAgentState(msg.currentState);
          agent.pauseReasonId = msg.currentStateReasonId;
          agent.pauseReasonDescription = msg.currentStateReason;
          agent.firstName = msg.agent.firstName;
          agent.lastName = msg.agent.lastName;
          agent.extension = msg.agent.extension;
          agent.username = msg.agent.username;
          agent.id = msg.agent.id;
          activeCalls = msg.calls;
          phoneDevice.connected = msg.phone.isConnected;
          phoneDevice.registered = msg.phone.isRegistered;
          phoneDevice.inConference = msg.phone.isInConference;
          phoneDevice.supportConference = msg.phone.supportsConference;
          phoneDevice.selectedLine = msg.phone.selectedLineId;
          phoneDevice.numberOfLines = msg.phone.numberOfLines;
          for (var i = 0; i < phoneDevice.numberOfLines; i++) {
            phoneDevice.lineStates.push(convertStringLineState(msg.phone.lineState[i]))
          }
          xmppDevice.connected = msg.xmpp.isConnected;
          xmppDevice.initialized = true;
          if (connecting) {
            instance.events.onconnected.raise({});
            instance.events.oninitialized.raise({})
          }
          connecting = false;
          break;
        case 10001:
          break;
        case 10002:
          status.language = msg.language;
          break;
        case 10003:
          agent.state = Ifm.ScriptControl.AgentStates.Paused;
          agent.pauseReasonId = msg.reasonId;
          agent.pauseReasonDescription = msg.reasonText;
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onpauseevent.raise({
              reasonid: msg.reasonId, reasondescription: msg.reasonText
            })
          }
          break;
        case 10004:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onpausebookedevent.raise({})
          }
          break;
        case 10005:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onreadyevent.raise({callid: msg.callId})
          }
          Object.values(activeCalls).forEach(function(c) {
            if (c.transferred) {
              delete activeCalls[c.callId]
            }
          });
          break;
        case 10006:
          if (msg.previousState != msg.currentState) {
            agent.state = converStringAgentState(msg.currentState);
            if (msg.currentState === Available) {
              sendMessageToPhonebarRich(20000, 0, {})
            }
            else if (msg.currentState === NotLoggedIn) {
              resetAgentInfo()
            }
            if (isRegisterdForCampaignLessEvents()) {
              instance.events.onstatechangedevent.raise({
                previousstate: converStringAgentState(msg.previousState), currentstate: converStringAgentState(msg.currentState), previousstatestr: msg.previousState, currentstatestr: msg.currentState
              })
            }
          }
          break;
        case 10007:
          break;
        case 10008:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onsupervisormessageevent.raise({
              severity: msg.severity, message: msg.message
            })
          }
          break;
        case 10009:
          var recordingState = 0;
          if (msg.isRecording) {
            recordingState += 1;
            if (msg.recordingData.txChannelMuted) {
              recordingState += 2
            }
            if (msg.recordingData.rxChannelMuted) {
              recordingState += 4
            }
          }
          if (agent.waitingOutbound && agent.waitingForCallId === msg.callId) {
            agent.waitingOutbound = false;
            agent.waitingForCallId = 0;
            agent.waitingForCampaign = ""
          }
          activeCalls[msg.callId] = {
            state: Ifm.ScriptControl.CallStates.Assigned, callId: msg.callId, mediatype: msg.mediatype, campaignName: msg.campaignName, callData: msg.callData.originalString, otherData: {
                serviceId: msg.otherData.serviceId, campaignId: msg.otherData.campaignId, scriptName: msg.otherData.scriptName, scriptParameters: msg.otherData.scriptParameters
              }, isRecording: msg.isRecording, recordingData: {
                fileName: msg.recordingData.fileName, settings: msg.recordingData.settings, rxChannelMuted: msg.recordingData.rxChannelMuted, txChannelMuted: msg.recordingData.txChannelMuted
              }
          };
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(msg.campaignName)) {
            instance.events.onassignmentrequest.raise({
              campaign: msg.campaignName, callid: msg.callId, calldata: msg.callData.originalString, recordingstate: recordingState, mediatype: msg.mediatype, isrecording: msg.isRecording, filename: msg.recordingData.fileName, settings: msg.recordingData.settings, rxchannelmuted: msg.recordingData.rxChannelMuted, txchannelmuted: msg.recordingData.txChannelMuted, serviceid: msg.otherData.serviceId, campaignid: msg.otherData.campaignId, scriptname: msg.otherData.scriptName, scriptparameters: msg.otherData.scriptParameters
            })
          }
          break;
        case 10010:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onbookedevent.raise({
              campaign: msg.campaignName, mediatype: msg.mediatype
            })
          }
          break;
        case 10011:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Alerting
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onalertingevent.raise({
              campaign: campaignName, callid: msg.callId
            })
          }
          break;
        case 10012:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Established
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onansweredevent.raise({
              campaign: campaignName, callid: msg.callId
            })
          }
          break;
        case 10013:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Failed
          }
          if (agent.waitingOutbound && agent.waitingForCallId === msg.callId) {
            campaignName = agent.waitingForCampaign;
            agent.waitingOutbound = false;
            agent.waitingForCallId = 0;
            agent.waitingForCampaign = ""
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.oncallfailureevent.raise({
              campaign: campaignName, callid: msg.callId, reasoncode: msg.cause, protocolterminationcause: msg.protocolTerminationCause, protocolterminationdescription: msg.protocolTerminationDescription, detectedcontentcode: msg.detectedContentCode, detectedcontentdescription: msg.detectedContentDescription
            })
          }
          delete activeCalls[msg.callId];
          break;
        case 10014:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onothercallevent.raise({})
          }
          break;
        case 10015:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            if (msg.callTerminated === 1 || msg.callTerminated === true) {
              activeCalls[msg.callId].terminated = true;
              activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Terminated
            }
            else {
              activeCalls[msg.callId].terminated = false;
              activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Transferred;
              if (activeCalls[msg.callId].mediatype > 5) {
                delete activeCalls[msg.callId]
              }
            }
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onreadyfordetachevent.raise({
              campaign: campaignName, callid: msg.callId
            });
            instance.events.onreadyfordetachexevent.raise({
              campaign: campaignName, callid: msg.callId, callterminated: msg.callTerminated, protocolterminationcause: msg.protocolTerminationCause, protocolterminationdescription: msg.protocolTerminationDescription, detectedcontentcode: msg.detectedContentCode, detectedcontentdescription: msg.detectedContentDescription
            })
          }
          break;
        case 10016:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.oncalltransferinitiatedevent.raise({
              campaign: campaignName, callid: msg.callId
            })
          }
          break;
        case 10017:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            if (msg.postCallWork === 1 || msg.postCallWork === true) {
              activeCalls[msg.callId].postCallWork = true;
              activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.PostCall
            }
            else {
              activeCalls[msg.callId].postCallWork = false;
              activeCalls[msg.callId].state = Ifm.ScriptControl.CallStates.Terminated
            }
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onterminatedevent.raise({
              campaign: campaignName, callid: msg.callId, haspostcall: msg.postCallWork
            });
            if (activeCalls[msg.callId] && activeCalls[msg.callId].postCallWork) {
              instance.events.onpostcallworkevent.raise({
                campaign: campaignName, callid: msg.callId
              })
            }
          }
          if (activeCalls[msg.callId] && !activeCalls[msg.callId].postCallWork) {
            delete activeCalls[msg.callId]
          }
          break;
        case 10018:
          if (msg.callId && activeCalls[msg.callId]) {
            activeCalls[msg.callId].recording = true;
            activeCalls[msg.callId].recordingFileName = msg.fileName
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onrecordingstartedevent.raise({
              callid: msg.callId, recfilename: msg.fileName
            })
          }
          break;
        case 10019:
          if (msg.callId && activeCalls[msg.callId]) {
            activeCalls[msg.callId].recording = false
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onrecordingcompletedevent.raise({
              callid: msg.callId, result: msg.result
            })
          }
          break;
        case 10020:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onrecordingmutedevent.raise({
              callid: msg.callId, txchannelmuted: msg.txChannelMuted, rxchannelmuted: msg.rxChannelMuted
            })
          }
          break;
        case 10021:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onmaskeddigitreceivedevent.raise({callid: msg.callId})
          }
          break;
        case 10022:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onmaskedpayloadreceivedevent.raise({
              callid: msg.callId, payload: msg.payload, result: msg.result
            })
          }
          break;
        case 10023:
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            if (msg.accepted === 1 || msg.accepted === true) {
              agent.waitingOutbound = true;
              agent.waitingForCallId = msg.callId;
              agent.waitingForCampaign = msg.campaignName
            }
            if (isRegisterdForCampaignLessEvents()) {
              instance.events.onnewcallreply.raise({
                campaign: msg.campaignName, accepted: msg.accepted, callid: msg.callId
              })
            }
          }
          break;
        case 10024:
          if (msg.callId === agent.waitingForCallId) {
            campaignName = agent.waitingForCampaign
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onabortcallreply.raise({
              campaign: campaignName, callid: msg.callId, accepted: msg.accepted
            })
          }
          break;
        case 11001:
          break;
        case 11002:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceconnectedevent.raise({})
          }
          break;
        case 11003:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicedisconnectedevent.raise({})
          }
          break;
        case 11004:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceregisteredstateevent.raise({registered: msg.isRegistered})
          }
          break;
        case 11005:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicelinestatechangedevent.raise({
              lineid: msg.lineId + 1, state: msg.state
            })
          }
          break;
        case 11006:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceconferencestateevent.raise({inconference: msg.inConference})
          }
          break;
        case 11007:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceselectedlinechangedevent.raise({lineid: msg.lineId + 1})
          }
          break;
        case 11008:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicecallingevent.raise({lineid: msg.lineId + 1})
          }
          break;
        case 11009:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicecallconnectedevent.raise({lineid: msg.lineId + 1})
          }
          break;
        case 11010:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicecalldisconnectedevent.raise({lineid: msg.lineId + 1})
          }
          break;
        case 11011:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicedisplaynameevent.raise({
              lineid: msg.lineId + 1, displayname: msg.displayName
            })
          }
          break;
        case 11012:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceincomingcallevent.raise({lineid: msg.lineId + 1})
          }
          break;
        case 11013:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedeviceringevent.raise({
              lineid: msg.lineId + 1, ringscount: msg.rings
            })
          }
          break;
        case 11014:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onphonedevicemuteevent.raise({mute: msg.isMuted})
          }
          break;
        case 11015:
          break;
        case 12001:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onxmppdeviceinitializedevent.raise({})
          }
          break;
        case 12002:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onxmppdeviceregisteredstateevent.raise({registered: true})
          }
          break;
        case 12003:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onxmppdeviceregisteredstateevent.raise({registered: false})
          }
          break;
        case 12004:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onxmppdevicenewcallevent.raise({
              campaign: campaignName, callid: msg.callId
            })
          }
          break;
        case 12005:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onxmppdevicemessagereceivedevent.raise({
              campaign: campaignName, callid: msg.callId, displayname: msg.displayName, sender: msg.sender, senderisbot: msg.senderIsBot, sentfromhere: msg.sentFromHere, rawmessage: msg.rawMessage, message: msg.message, time: msg.time, timestamp: msg.timestamp, history: msg.history, attributes: msg.attributes
            })
          }
          break;
        case 12006:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onxmppdevicecallclosedevent.raise({
              campaign: campaignName, callid: msg.callId
            })
          }
          break;
        case 12007:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onxmppdevicefiletransferevent.raise({
              campaign: campaignName, callid: msg.callId, file: msg.file
            })
          }
          break;
        case 30001:
          break;
        case 30002:
          if (isRegisterdForCampaignLessEvents()) {
            var agnum = msg.agents.length;
            var aglist = [];
            for (var a = 0; a < agnum; a++) {
              aglist.push({
                firstname: msg.agents[a].firstName, lastname: msg.agents[a].lastName, state: msg.agents[a].state, time: msg.agents[a].time, campaign: msg.agents[a].campaignName
              })
            }
            instance.events.onagentslistreply.raise({
              agentsnum: agnum, agentslist: aglist
            })
          }
          break;
        case 30003:
          if (isRegisterdForCampaignLessEvents()) {
            var cpnum = msg.campaigns.length;
            var cplist = [];
            for (var c = 0; c < cpnum; c++) {
              var flags = msg.campaigns[c].flags;
              cplist.push({
                name: msg.campaigns[c].name, state: msg.campaigns[c].status, boundness: msg.campaigns[c].boundness, assigned: flags & 0x40 === 0x40, transfernotallowed: msg.campaigns[c].transfer, flags: flags, isactive: msg.campaigns[c].active, servicename: msg.campaigns[c].serviceName, campaignname: msg.campaigns[c].campaignName
              })
            }
            instance.events.oncampaignslistreply.raise({
              campaignsnum: cpnum, campaignslist: cplist
            })
          }
          break;
        case 30004:
          if (isRegisterdForCampaignLessEvents()) {
            var pnum = msg.reasons.length;
            var plist = [];
            for (var p = 0; p < pnum; p++) {
              plist.push({
                code: msg.reasons[p].id, description: msg.reasons[p].text
              })
            }
            instance.events.onpausereasonslistreply.raise({
              pausereasonsnum: pnum, pausereasonslist: plist
            })
          }
          break;
        case 30005:
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onqueueinforeply.raise({
              callsnum: msg.calls, maxtime: msg.maxTimestamp, avgtime: msg.avgTimestamp
            })
          }
          break;
        case 30006:
          if (msg.accepted === 1 || msg.accepted === true) {
            agent.state = Ifm.ScriptControl.AgentStates.Ready;
            agent.id = msg.agentId;
            agent.extension = msg.extension;
            agent.firstName = msg.firstName;
            agent.lastName = msg.lastName;
            agent.username = msg.username
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onloginreply.raise({
              accepted: msg.accepted, failureCause: msg.failureCause, cause: msg.failureCause
            })
          }
          break;
        case 30007:
          if (msg.accepted === 1 || msg.accepted === true) {
            resetAgentInfo()
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onlogoutreply.raise({accepted: msg.accepted})
          }
          break;
        case 30008:
          break;
        case 30009:
          if (msg.accepted === 1 || msg.accepted === true) {
            agent.state = Ifm.ScriptControl.AgentStates.Paused;
            agent.pauseReasonId = msg.reasonId;
            agent.pauseReasonDescription = msg.reasonText
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onpausereply.raise({
              accepted: msg.accepted, reasonid: msg.reasonId, reasondescription: msg.reasonText
            })
          }
          break;
        case 30010:
          if (msg.accepted === 1 || msg.accepted === true) {
            agent.state = Ifm.ScriptControl.AgentStates.Ready;
            agent.pauseReasonId = 0;
            agent.pauseReasonDescription = ""
          }
          if (isRegisterdForCampaignLessEvents()) {
            instance.events.onreadyreply.raise({accepted: msg.accepted})
          }
          break;
        case 30011:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.onretrievecallreply.raise({
              campaign: campaignName, accepted: msg.accepted
            })
          }
          break;
        case 30012:
          if (msg.callId && activeCalls[msg.callId]) {
            campaignName = activeCalls[msg.callId].campaignName;
            activeCalls[msg.callId].transferred = true
          }
          if (isRegisterdForCampaignLessEvents() || isRegisterdCampaignEvents(campaignName)) {
            instance.events.ontransferreply.raise({
              campaign: campaignName, callid: msg.callId, accepted: msg.accepted
            })
          }
          break;
        case 30013:
          instance.events.ongetbuttonenabledreply.raise({
            buttonid: msg.buttonId, enabled: msg.enabled ? "1" : "0"
          });
          break
      }
    }
    function sendMessageToPhonebarClassic(message) {
      if (!ws || !ws.isOpen) {
        console.warn("[ScriptControl.js] Invalid WebSocket state (undefined or closed)");
        return
      }
      if (!message || !message.length) {
        console.warn("[ScriptControl.js] Invalid message (undefined or empty)");
        return
      }
      ws.send(message)
    }
    function sendMessageToPhonebarRich(code, responseCode, data) {
      if (!ws || !ws.isOpen) {
        console.warn("[ScriptControl.js] Invalid WebSocket state (undefined or closed)");
        return
      }
      var randomGuid = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".replace(/x/g, function(c) {
          var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : (r & 0x3 | 0x8);
          return v.toString(16)
        });
      var request = {
          Type: "phonebar-interop", Code: code, Id: randomGuid, Data: data, ResponseCode: responseCode, Version: 1
        };
      ws.send(JSON.stringify(request))
    }
    var defaultServiceUrl = "ws://localhost:22066/";
    var ws;
    var domain = null;
    console.debug("[ScriptControl.js] **************************************************************************");
    console.debug("[ScriptControl.js] * New ScriptControl instance created - Version:", scriptControlVersion);
    console.debug("[ScriptControl.js] **************************************************************************");
    return instance
  })()
})()
