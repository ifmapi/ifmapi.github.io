
//============================================================================

// Copyright (c) Base Digitale Platform. All rights reserved.

//============================================================================

"use strict";
function __errhandler(a, b, c, d, e) {
  if (!arguments || !arguments.length) {
    return
  }
  var message = e && e.message ? e.message : (a || "Script error");
  var source = b || (e ? e.filename : '') || '';
  var line = c || (e ? e.lineno : '') || '';
  var column = d || (e ? e.colno : '') || '';
  var stack = e && e.stack ? e.stack : (source ? [source, line, column].join(' ') : "window.onerror");
  Ifm.Application.onerror(message, stack)
}
namespace("Ifm");
(function() {
  Ifm.version += "; Ifm.Dom.js/1.1.1-5095";
  this.Application = {frameworkPath: ''};
  var scripts = document.getElementsByTagName("script");
  for (var i = 0; i < scripts.length; i++) {
    var matches = scripts[i].src.match(/(.*)Ifm\.Dom\.js/);
    if (matches && matches.length === 2) {
      Ifm.Application.frameworkPath = matches[1];
      break
    }
  }
  var readyNotified = false;
  var readyDelegates = [];
  var readyCompleted = function() {
      if (readyNotified)
        return;
      if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
        Ifm.Dom.Strings.replaceAll('%');
        readyNotified = true;
        var len = readyDelegates.length;
        while (len--) {
          readyDelegates[len]()
        }
        readyDelegates = []
      }
    };
  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", readyCompleted, false);
    window.addEventListener("load", readyCompleted, false)
  }
  else {
    document.attachEvent("onreadystatechange", readyCompleted);
    window.attachEvent("onload", readyCompleted)
  }
  this.Application.abort = function(error, stack) {
    var ehome = encodeURIComponent(window.location.href);
    var eerror = encodeURIComponent(error || '');
    var estack = encodeURIComponent(stack || '');
    var s = sessionStorage;
    var p = '';
    if (s) {
      s.setItem("home", ehome);
      s.setItem("error", eerror);
      s.setItem("stack", estack);
      s.setItem("info", Ifm.version)
    }
    else {
      p = "?home=" + ehome + "&error=" + eerror + "&stack=" + estack + "&info=" + Ifm.version
    }
    window.onerror = null;
    window.onbeforeunload = null;
    window.location.assign(this.frameworkPath + "blue.htm" + p)
  };
  this.Application.parameters = function() {
    var p = {};
    p.count = 0;
    (window.location.search + window.location.hash).replace(/([^?&=]+)=([^&]*)?/g, function(match, key, val) {
      if (key) {
        p[key] = val || '';
        p.count++
      }
    });
    return p
  };
  this.Application.showBand = function(message, additional) {
    var html = "<div style='margin:16px;'>" + "<pre style='font-size:xx-large;'>" + (message || '') + "</pre>" + "<pre style='font-size:medium;'>" + (additional || '') + "</pre>" + "</div>";
    Ifm.Dom.Band.show(html)
  };
  this.Application.ready = function(onready) {
    if (!Ifm.Type.isFunction(onready)) {
      throw new Error("Application.ready() -> Invalid ready handler function");
    }
    if (readyNotified) {
      setTimeout(onready);
      return
    }
    readyDelegates.push(onready)
  };
  this.Application.quit = function(onquit, oncancel) {
    if (onquit && !Ifm.Type.isFunction(onquit)) {
      throw new Error("Application.quit() -> Invalid quit handler function");
    }
    if (oncancel && !Ifm.Type.isFunction(oncancel)) {
      throw new Error("Application.quit() -> Invalid cancel handler function");
    }
    window.onbeforeunload = function() {
      var userchoice = false;
      setTimeout(function() {
        setTimeout(function() {
          if (userchoice && oncancel)
            oncancel()
        }, 100)
      });
      return userchoice = onquit()
    }
  };
  this.Application.onerror = function __onerror(error, stack) {
    if (Ifm.Diagnostics.Debug.enabled) {
      Ifm.Diagnostics.Debug.fail(error, stack)
    }
    else {
      debugger;
      Ifm.Application.abort(error, stack)
    }
  }
}).call(Ifm);
namespace("Ifm.Dom");
(function() {
  this.isReady = function(document) {
    if (Ifm.Dom.isWindow(document)) {
      document = document.document
    }
    return isDocumentReady(document)
  };
  this.isWindow = function(obj) {
    return obj.constructor.name === 'Window'
  };
  this.whenReady = function(document, callback) {
    if (Ifm.Dom.isWindow(document)) {
      document = document.document
    }
    if (isDocumentReady(document)) {
      callback(document)
    }
    else {
      var onReadyStateChange = function() {
          if (isDocumentReady(document)) {
            document.removeEventListener('readystatechange', onReadyStateChange);
            callback(document)
          }
        };
      document.addEventListener('readystatechange', onReadyStateChange)
    }
  };
  this.whenWindowNavigates = function(window, url, callback) {
    var attempt = 0;
    var navigationtimer = setInterval(function() {
        if (window.location.href.toLowerCase().indexOf(url.toLowerCase()) < 0 || !isDocumentReady(window.document)) {
          return
        }
        if (++attempt < 5)
          return;
        clearInterval(navigationtimer);
        Ifm.Dom.whenReady(window, callback)
      }, 100)
  };
  function isDocumentReady(document) {
    if (!document || !document.URL || document.URL === 'about:blank' || document.URL === 'edge://newtab/' || document.URL === 'chrome://newtab/') {
      return false
    }
    var state = document.readyState;
    return state === 'interactive' || state === 'complete'
  }
  this.Events = {
    addHandler: (window.addEventListener ? function(element, type, handler) {
      element.addEventListener(type, handler, false)
    } : function(element, type, handler) {
      element.attachEvent("on" + type, handler)
    }), getEvent: function(e) {
        return e || window.event
      }, getTarget: function(e) {
        var event = e || window.event;
        return event.target || event.srcElement
      }, preventDefault: function(e) {
        var event = e || window.event;
        if (event.preventDefault) {
          event.preventDefault()
        }
        else {
          event.returnValue = false
        }
      }, removeHandler: (window.removeEventListener ? function(element, type, handler) {
        element.removeEventListener(type, handler, false)
      } : function(element, type, handler) {
        element.detachEvent("on" + type, handler)
      }), stopPropagation: function(e) {
        var event = e || window.event;
        if (event.stopPropagation) {
          event.stopPropagation()
        }
        else {
          event.cancelBubble = true
        }
      }, stop: function(e) {
        var event = e || window.event;
        if (event.preventDefault) {
          event.preventDefault()
        }
        if (event.stopImmediatePropagation) {
          event.stopImmediatePropagation()
        }
        if (event.stopPropagation) {
          event.stopPropagation()
        }
        if (event.stop) {
          event.stop()
        }
        event.cancelBubble = true;
        event.returnValue = false
      }
  };
  this.Dialogs = {_dialogs: []};
  this.Dialogs.create = function(id, buttons, opts) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.create() -> Invalid dialog object id: " + id);
    }
    if (Ifm.Dom.Dialogs._dialogs[id]) {
      throw new Error("Dialogs.create() -> Dialog already created:" + id);
    }
    var dialog = document.getElementById(id);
    if (!dialog) {
      throw new Error("Dialogs.create() -> Dialog definition object not found in DOM: " + id);
    }
    dialog.parentNode.removeChild(dialog);
    if (buttons && !Ifm.Type.isArray(buttons)) {
      throw new Error("Dialogs.create() -> Invalid buttons array:" + buttons);
    }
    Ifm.Dom.Dialogs._dialogs[id] = {
      instance: dialog, buttons: buttons || null, options: {
          modal: (opts || {}).hasOwnProperty("modal") ? opts.modal : true, title: (opts || {}).hasOwnProperty("title") ? opts.title : ""
        }, arguments: null, result: undefined
    }
  };
  this.Dialogs.show = function(id, title, beforeShow, onHide) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.show() -> Invalid dialog object id: " + id);
    }
    var ref = Ifm.Dom.Dialogs._dialogs[id];
    if (!ref) {
      throw new Error("Dialogs.show() -> Dialog not created: " + id);
    }
    if (beforeShow && (!Ifm.Type.isFunction(beforeShow))) {
      throw new Error("Dialogs.show() -> Invalid handler: beforeShow");
    }
    if (onHide && (!Ifm.Type.isFunction(onHide))) {
      throw new Error("Dialogs.show() -> Invalid handler: onHide");
    }
    if (!ref.shown) {
      ref.shown = true;
      ref.onhide = onHide || null;
      var dialog = ref.instance.cloneNode(true);
      var buttons = ref.buttons;
      if (ref.options.modal) {
        Ifm.Dom.Fader.show()
      }
      var dialogContainer = document.createElement("div");
      dialogContainer.className = "dialog";
      dialogContainer.style.zIndex = "1100";
      dialogContainer.innerHTML = '' + '<div class="dialog-title">' + (title || ref.options.title || '') + '</div>' + '<div class="dialog-body"></div>' + '<div class="dialog-buttons"></div>';
      if (!buttons || buttons.length === 0) {
        dialogContainer.innerHTML += '<div class="dialog-close"><button class="dialog-close-button" onclick="Ifm.Dom.Dialogs.hide(&apos;' + id + '&apos;, 0);">r</button></div>'
      }
      document.body.appendChild(dialogContainer);
      ref.container = dialogContainer;
      dialogContainer.children[1].appendChild(dialog);
      if (buttons) {
        for (var i = 0; i < buttons.length; i++) {
          var button = document.createElement("button");
          var code = "Ifm.Dom.Dialogs._dialogs['" + id + "'].result = (function() { " + buttons[i].click + " })(); Ifm.Dom.Dialogs.hide('" + id + "', " + (i + 1) + ");";
          button.onclick = new Function(code);
          button.innerHTML = buttons[i].text;
          button.style.cssText = buttons[i].cssText;
          dialogContainer.children[2].appendChild(button)
        }
      }
      if (beforeShow) {
        beforeShow()
      }
      Ifm.Dom.Strings.replaceAll('%%')
    }
  };
  this.Dialogs.hide = function(id, buttonindex) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.hide() -> Invalid dialog object id: " + id);
    }
    var ref = Ifm.Dom.Dialogs._dialogs[id];
    if (!ref) {
      throw new Error("Dialogs.hide() -> Dialog not created: " + id);
    }
    if (ref.shown) {
      if (ref.onhide) {
        ref.onhide(buttonindex)
      }
      ref.shown = false;
      var dialogContainer = ref.container;
      dialogContainer.style.opacity = "0";
      setTimeout(function() {
        document.body.removeChild(dialogContainer)
      }, 200);
      if (ref.options.modal) {
        Ifm.Dom.Fader.hide()
      }
    }
  };
  this.Cards = (function() {
    var cards = {};
    return {
        show: function(html, id, dialog, fade, level, title, options = {}, onload) {
          if (!id)
            id = "card" + (+new Date).toString(16);
          var card;
          if (cards[id]) {
            card = cards[id].element
          }
          else {
            card = document.createElement("div");
            cards[id] = {
              element: card, fade: !!fade
            };
            card.close = Ifm.Dom.Cards.close.bind(null, id);
            card.shake = Ifm.Dom.Cards.shake.bind(null, id);
            card.onclosed = null;
            if (fade)
              Ifm.Dom.Fader.show();
            card.style.zIndex = "1100";
            document.body.appendChild(card);
            card.className = "dialog level-" + (level && /^[12345]$/.test(level) ? level : "1");
            if (!dialog)
              setTimeout(() =>  {
                  var fader = document.getElementById("ifmjs_sys_fader") || document;
                  var oldfunc = fader.onclick;
                  fader.onclick = function(e) {
                    fader.onclick = oldfunc;
                    Ifm.Dom.Events.stop(e);
                    Ifm.Dom.Cards.close(id)
                  };
                  card.onclick = fader.onclick
                }, 20)
          }
          if (html)
            card.innerHTML = html;
          if (options.width) {
            card.style.width = options.width + 'px'
          }
          if (options.height) {
            card.style.height = options.height + 'px'
          }
          if (Ifm.Type.isFunction(onload)) {
            onload(card, card)
          }
          return card
        }, showDialog: function(html, id, title, buttons, options = {}, onload) {
            var htmlDialog = Ifm.Dom.Cards._createDialogBody(html, title);
            var dialog = Ifm.Dom.Cards.show(htmlDialog, id, true, true);
            Ifm.Dom.Cards._createDialogButtons(dialog, dialog, buttons);
            if (Ifm.Type.isFunction(onload)) {
              onload(dialog, dialog)
            }
          }, shake: function(id) {
            if (!cards[id])
              return;
            var card = cards[id].element,
              styleLeft = card.style.left,
              styleRight = card.style.right,
              curLeft = card.offsetLeft;
            var f = function(i) {
                var shakeX = 10 * ((i % 3) - 1);
                card.style.left = curLeft + shakeX + "px";
                card.style.right = curLeft - shakeX + "px";
                if (--i > 0) {
                  setTimeout(f, 20, i)
                }
                else {
                  card.style.left = styleLeft;
                  card.style.right = styleRight
                }
              };
            f(16)
          }, close: function(id) {
            if (!cards[id])
              return;
            var card = cards[id].element;
            document.body.removeChild(card);
            if (cards[id].fade)
              Ifm.Dom.Fader.hide();
            if (Ifm.Type.isFunction(card.onclosed))
              card.onclosed(card);
            delete cards[id];
            return card
          }, get: function(id) {
            return cards[id] || null
          }, getBody: function(id) {
            return cards[id] || null
          }, isShown: function(id) {
            return cards[id] ? true : false
          }, _createDialogBody: function(html, title) {
            var htmlDialog = `
                    <div class="dialog-title">${title}</div>
                    <div class="dialog-body">${html}</div>
                    <div class="dialog-buttons"></div>
                `;
            return htmlDialog
          }, _createDialogButtons: function(dialog, dialogBody, buttons) {
            if (dialogBody && buttons && buttons.length) {
              const buttonContainer = dialogBody.lastElementChild;
              for (var i = 0; i < buttons.length; i++) {
                var btn = document.createElement("button");
                btn.innerHTML = buttons[i].text || "[Button" + (i + 1) + "]";
                btn.style.cssText = buttons[i].cssText;
                btn.onclick = (function(fn) {
                  if (Ifm.Type.isFunction(fn)) {
                    return function() {
                        buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = true);
                        var result = false;
                        try {
                          result = fn(dialog, dialogBody);
                          if (result instanceof Promise) {
                            result.then(function(resolved) {
                              if (resolved !== false) {
                                dialog.close()
                              }
                            });
                            result.catch(function(err) {
                              console.warn('[Ifm.Dom.Cards] Error executing button action', err);
                              dialog.shake()
                            });
                            result.finally(function() {
                              buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = false)
                            });
                            return false
                          }
                        }
                        catch(err) {
                          console.warn('[Ifm.Dom.Cards] Error executing button action', err);
                          dialog.shake()
                        }
                        buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = false);
                        if (result !== false) {
                          dialog.close()
                        }
                      }
                  }
                  else {
                    return function() {
                        dialog.close()
                      }
                  }
                })(buttons[i].click);
                buttonContainer.appendChild(btn)
              }
            }
          }
      }
  })();
  this.Band = {_bands: []};
  this.Band.show = function(html) {
    Ifm.Dom.Fader.show();
    var band = document.createElement("div");
    band.className = "band";
    band.style.position = "absolute";
    band.style.top = "50%";
    band.style.marginTop = "-80px";
    band.style.minHeight = "160px";
    band.style.left = "0px";
    band.style.width = "100%";
    band.style.backgroundColor = "#0066CC";
    band.style.color = "white";
    band.style.overflow = "hidden";
    band.style.zIndex = "1200";
    var fader = document.getElementById("ifmjs_sys_fader") || document;
    var oldfunc = fader.onclick;
    fader.onclick = function(e) {
      fader.onclick = oldfunc;
      Ifm.Dom.Events.stop(e);
      Ifm.Dom.Band.hide()
    };
    band.onclick = fader.onclick;
    band.innerHTML = html;
    document.body.appendChild(band);
    Ifm.Dom.Band._bands.push(band);
    if (Ifm.Dom.Band._bands.length > 1) {
      Ifm.Dom.Band._bands[Ifm.Dom.Band._bands.length - 2].style.display = "none"
    }
    return band
  };
  this.Band.hide = function() {
    if (Ifm.Dom.Band._bands.length > 0) {
      var band = Ifm.Dom.Band._bands.pop(band);
      document.body.removeChild(band);
      Ifm.Dom.Fader.hide()
    }
    if (Ifm.Dom.Band._bands.length > 0) {
      Ifm.Dom.Band._bands[Ifm.Dom.Band._bands.length - 1].style.display = ''
    }
    return band
  };
  this.Fader = {_faders: 0};
  this.Fader.show = function() {
    Ifm.Dom.Fader._faders++;
    if (Ifm.Dom.Fader._faders === 1) {
      var fader = document.getElementById("ifmjs_sys_fader");
      if (!fader) {
        fader = document.createElement("div");
        fader.id = "ifmjs_sys_fader";
        fader.style.backgroundColor = "#003366";
        fader.style.opacity = "0.50";
        fader.style.position = "absolute";
        fader.style.left = "0";
        fader.style.top = "0";
        fader.style.width = "100%";
        fader.style.height = "100%";
        fader.style.zIndex = "1000";
        var pageLayout = document.getElementById("page-layout");
        if (pageLayout) {
          pageLayout.className += " fade-effect"
        }
      }
      document.body.appendChild(fader)
    }
    return Ifm.Dom.Fader._faders > 0
  };
  this.Fader.hide = function() {
    Ifm.Dom.Fader._faders--;
    if (Ifm.Dom.Fader._faders === 0) {
      var fader = document.getElementById("ifmjs_sys_fader");
      if (fader) {
        document.body.removeChild(fader);
        var pageLayout = document.getElementById("page-layout");
        if (pageLayout) {
          pageLayout.className = pageLayout.className.replace(" fade-effect", "")
        }
      }
    }
    return Ifm.Dom.Fader._faders <= 0
  };
  this.Menu = function() {
    if (!(this instanceof Ifm.Dom.Menu))
      throw Ifm.Diagnostics.Errors.ctor();
    var menuClassId = "ifmjs_menu";
    return {
        constructor: Ifm.Dom.Menu, choose: function(items, callback) {
            if (!Ifm.Type.isArray(items))
              throw Ifm.Diagnostics.Errors.arg("items");
            if (!Ifm.Type.isFunction(callback))
              throw Ifm.Diagnostics.Errors.arg("callback");
            var options = '';
            for (var i = 0, item; i < items.length, item = items[i]; i++) {
              if (item.visible !== false) {
                if (item.label !== '-') {
                  options += '<option value="{0}" {2}>{1}</option>'.format(item.value, item.label, item.disabled ? "disabled" : "")
                }
                else {
                  options += '<option value="" disabled></option>'
                }
              }
            }
            var select = '<div class="menu"><select style="width:100%;" size="{0}">{1}</select></div>'.format(items.length === 1 ? 2 : items.length, options);
            var card = Ifm.Dom.Cards.show(select, menuClassId),
              sele = card.children[0].children[0];
            sele.onclick = function() {
              callback(this.value)
            };
            sele.onkeydown = function(e) {
              e = Ifm.Dom.Events.getEvent(e);
              if (e.which === 13) {
                Ifm.Dom.Cards.close(menuClassId);
                callback(this.value)
              }
              if (e.which === 27) {
                Ifm.Dom.Cards.close(menuClassId)
              }
            };
            sele.focus()
          }
      }
  };
  this.Strings = (function() {
    function parse(subchar, ref) {
      if (Ifm.Type.isString(ref.nodeValue) && ref.nodeValue.startsWith(subchar + '(') && ref.nodeValue.endsWith(')')) {
        try {
          ref.nodeValue = (Function('return ' + ref.nodeValue.slice(subchar.length + 1, -1)))()
        }
        catch(err) {}
      }
    }
    return {replaceAll: function(subchar) {
          if (!subchar)
            subchar = '%';
          Ifm.Dom.Walker.walk(document.body, function(node) {
            if ((node.nodeType === 1)) {
              for (var i = 0; i < node.attributes.length; i++) {
                parse(subchar, node.attributes[i])
              }
            }
            else if (node.nodeType === 3) {
              parse(subchar, node)
            }
          })
        }}
  })();
  this.Walker = {};
  this.Walker.walk = function walk(node, func) {
    func(node);
    node = node.firstChild;
    while (node) {
      walk(node, func);
      node = node.nextSibling
    }
  }
}).call(Ifm.Dom)
