
//============================================================================

// Copyright (c) Base Digitale Platform. All rights reserved.

//============================================================================

"use strict";
function __errhandler(a, b, c, d, e) {
  if (!arguments || !arguments.length) {
    return
  }
  var message = e && e.message ? e.message : (a || "Script error");
  var source = b || (e ? e.filename : '') || '';
  var line = c || (e ? e.lineno : '') || '';
  var column = d || (e ? e.colno : '') || '';
  var stack = e && e.stack ? e.stack : (source ? [source, line, column].join(' ') : "window.onerror");
  Ifm.Application.onerror(message, stack)
}
namespace("Ifm");
(function() {
  Ifm.version += "; Ifm.Dom.js/1.1.0-4649";
  this.Application = {frameworkPath: ''};
  var scripts = document.getElementsByTagName("script");
  for (var i = 0; i < scripts.length; i++) {
    var matches = scripts[i].src.match(/(.*)Ifm\.Dom\.js/);
    if (matches && matches.length === 2) {
      Ifm.Application.frameworkPath = matches[1];
      break
    }
  }
  var readyNotified = false;
  var readyDelegates = [];
  var readyCompleted = function() {
      if (readyNotified)
        return;
      if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
        Ifm.Dom.Strings.replaceAll('%');
        readyNotified = true;
        var len = readyDelegates.length;
        while (len--) {
          readyDelegates[len]()
        }
        readyDelegates = []
      }
    };
  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", readyCompleted, false);
    window.addEventListener("load", readyCompleted, false)
  }
  else {
    document.attachEvent("onreadystatechange", readyCompleted);
    window.attachEvent("onload", readyCompleted)
  }
  this.Application.abort = function(error, stack) {
    var ehome = encodeURIComponent(window.location.href);
    var eerror = encodeURIComponent(error || '');
    var estack = encodeURIComponent(stack || '');
    var s = sessionStorage;
    var p = '';
    if (s) {
      s.setItem("home", ehome);
      s.setItem("error", eerror);
      s.setItem("stack", estack);
      s.setItem("info", Ifm.version)
    }
    else {
      p = "?home=" + ehome + "&error=" + eerror + "&stack=" + estack + "&info=" + Ifm.version
    }
    window.onerror = null;
    window.onbeforeunload = null;
    window.location.assign(this.frameworkPath + "blue.htm" + p)
  };
  this.Application.parameters = function() {
    var p = {};
    p.count = 0;
    (window.location.search + window.location.hash).replace(/([^?&=]+)=([^&]*)?/g, function(match, key, val) {
      if (key) {
        p[key] = val || '';
        p.count++
      }
    });
    return p
  };
  this.Application.showBand = function(message, additional) {
    var html = "<div style='margin:16px;'>" + "<pre style='font-size:xx-large;'>" + (message || '') + "</pre>" + "<pre style='font-size:medium;'>" + (additional || '') + "</pre>" + "</div>";
    Ifm.Dom.Band.show(html)
  };
  this.Application.ready = function(onready) {
    if (!Ifm.Type.isFunction(onready)) {
      throw new Error("Application.ready() -> Invalid ready handler function");
    }
    if (readyNotified) {
      setTimeout(onready);
      return
    }
    readyDelegates.push(onready)
  };
  this.Application.quit = function(onquit, oncancel) {
    if (onquit && !Ifm.Type.isFunction(onquit)) {
      throw new Error("Application.quit() -> Invalid quit handler function");
    }
    if (oncancel && !Ifm.Type.isFunction(oncancel)) {
      throw new Error("Application.quit() -> Invalid cancel handler function");
    }
    window.onbeforeunload = function() {
      var userchoice = false;
      setTimeout(function() {
        setTimeout(function() {
          if (userchoice && oncancel)
            oncancel()
        }, 100)
      });
      return userchoice = onquit()
    }
  };
  this.Application.onerror = function __onerror(error, stack) {
    if (Ifm.Diagnostics.Debug.enabled) {
      Ifm.Diagnostics.Debug.fail(error, stack)
    }
    else {
      debugger;
      Ifm.Application.abort(error, stack)
    }
  }
}).call(Ifm);
namespace("Ifm.Dom");
(function() {
  this.isReady = function(document) {
    if (Ifm.Dom.isWindow(document)) {
      document = document.document
    }
    return isDocumentReady(document)
  };
  this.isWindow = function(obj) {
    return obj.constructor.name === 'Window'
  };
  this.whenReady = function(document, callback) {
    if (Ifm.Dom.isWindow(document)) {
      document = document.document
    }
    if (isDocumentReady(document)) {
      callback(document)
    }
    else {
      var onReadyStateChange = function() {
          if (isDocumentReady(document)) {
            document.removeEventListener('readystatechange', onReadyStateChange);
            callback(document)
          }
        };
      document.addEventListener('readystatechange', onReadyStateChange)
    }
  };
  this.whenWindowNavigates = function(window, url, callback) {
    var attempt = 0;
    var navigationtimer = setInterval(function() {
        if (window.location.href.toLowerCase().indexOf(url.toLowerCase()) < 0 || !isDocumentReady(window.document)) {
          return
        }
        if (++attempt < 5)
          return;
        clearInterval(navigationtimer);
        Ifm.Dom.whenReady(window, callback)
      }, 100)
  };
  function isDocumentReady(document) {
    if (!document || !document.URL || document.URL === 'about:blank' || document.URL === 'edge://newtab/' || document.URL === 'chrome://newtab/') {
      return false
    }
    var state = document.readyState;
    return state === 'interactive' || state === 'complete'
  }
  this.Events = {
    addHandler: (window.addEventListener ? function(element, type, handler) {
      element.addEventListener(type, handler, false)
    } : function(element, type, handler) {
      element.attachEvent("on" + type, handler)
    }), getEvent: function(e) {
        return e || window.event
      }, getTarget: function(e) {
        var event = e || window.event;
        return event.target || event.srcElement
      }, preventDefault: function(e) {
        var event = e || window.event;
        if (event.preventDefault) {
          event.preventDefault()
        }
        else {
          event.returnValue = false
        }
      }, removeHandler: (window.removeEventListener ? function(element, type, handler) {
        element.removeEventListener(type, handler, false)
      } : function(element, type, handler) {
        element.detachEvent("on" + type, handler)
      }), stopPropagation: function(e) {
        var event = e || window.event;
        if (event.stopPropagation) {
          event.stopPropagation()
        }
        else {
          event.cancelBubble = true
        }
      }, stop: function(e) {
        var event = e || window.event;
        if (event.preventDefault) {
          event.preventDefault()
        }
        if (event.stopImmediatePropagation) {
          event.stopImmediatePropagation()
        }
        if (event.stopPropagation) {
          event.stopPropagation()
        }
        if (event.stop) {
          event.stop()
        }
        event.cancelBubble = true;
        event.returnValue = false
      }
  };
  this.Dialogs = {_dialogs: []};
  this.Dialogs.create = function(id, buttons, opts) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.create() -> Invalid dialog object id: " + id);
    }
    if (Ifm.Dom.Dialogs._dialogs[id]) {
      throw new Error("Dialogs.create() -> Dialog already created:" + id);
    }
    var dialog = document.getElementById(id);
    if (!dialog) {
      throw new Error("Dialogs.create() -> Dialog definition object not found in DOM: " + id);
    }
    dialog.parentNode.removeChild(dialog);
    if (buttons && !Ifm.Type.isArray(buttons)) {
      throw new Error("Dialogs.create() -> Invalid buttons array:" + buttons);
    }
    Ifm.Dom.Dialogs._dialogs[id] = {
      instance: dialog, buttons: buttons || null, options: {
          modal: (opts || {}).hasOwnProperty("modal") ? opts.modal : true, title: (opts || {}).hasOwnProperty("title") ? opts.title : ""
        }, arguments: null, result: undefined
    }
  };
  this.Dialogs.show = function(id, title, beforeShow, onHide) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.show() -> Invalid dialog object id: " + id);
    }
    var ref = Ifm.Dom.Dialogs._dialogs[id];
    if (!ref) {
      throw new Error("Dialogs.show() -> Dialog not created: " + id);
    }
    if (beforeShow && (!Ifm.Type.isFunction(beforeShow))) {
      throw new Error("Dialogs.show() -> Invalid handler: beforeShow");
    }
    if (onHide && (!Ifm.Type.isFunction(onHide))) {
      throw new Error("Dialogs.show() -> Invalid handler: onHide");
    }
    if (!ref.shown) {
      ref.shown = true;
      ref.onhide = onHide || null;
      var dialog = ref.instance.cloneNode(true);
      var buttons = ref.buttons;
      if (ref.options.modal) {
        Ifm.Dom.Fader.show()
      }
      var dialogContainer = document.createElement("div");
      dialogContainer.className = "dialog";
      dialogContainer.style.zIndex = "1100";
      dialogContainer.innerHTML = '' + '<div class="dialog-title">' + (title || ref.options.title || '') + '</div>' + '<div class="dialog-body"></div>' + '<div class="dialog-buttons"></div>';
      if (!buttons || buttons.length === 0) {
        dialogContainer.innerHTML += '<div class="dialog-close"><button class="dialog-close-button" onclick="Ifm.Dom.Dialogs.hide(&apos;' + id + '&apos;, 0);">r</button></div>'
      }
      document.body.appendChild(dialogContainer);
      ref.container = dialogContainer;
      dialogContainer.children[1].appendChild(dialog);
      if (buttons) {
        for (var i = 0; i < buttons.length; i++) {
          var button = document.createElement("button");
          var code = "Ifm.Dom.Dialogs._dialogs['" + id + "'].result = (function() { " + buttons[i].click + " })(); Ifm.Dom.Dialogs.hide('" + id + "', " + (i + 1) + ");";
          button.onclick = new Function(code);
          button.innerHTML = buttons[i].text;
          button.style.cssText = buttons[i].cssText;
          dialogContainer.children[2].appendChild(button)
        }
      }
      if (beforeShow) {
        beforeShow()
      }
      Ifm.Dom.Strings.replaceAll('%%')
    }
  };
  this.Dialogs.hide = function(id, buttonindex) {
    if (!id || !Ifm.Type.isString(id)) {
      throw new Error("Dialogs.hide() -> Invalid dialog object id: " + id);
    }
    var ref = Ifm.Dom.Dialogs._dialogs[id];
    if (!ref) {
      throw new Error("Dialogs.hide() -> Dialog not created: " + id);
    }
    if (ref.shown) {
      if (ref.onhide) {
        ref.onhide(buttonindex)
      }
      ref.shown = false;
      var dialogContainer = ref.container;
      dialogContainer.style.opacity = "0";
      setTimeout(function() {
        document.body.removeChild(dialogContainer)
      }, 200);
      if (ref.options.modal) {
        Ifm.Dom.Fader.hide()
      }
    }
  };
  this.Cards = (function() {
    var cards = {};
    return {
        show: function(html, id, dialog, fade, level, title, options = {}) {
          if (!id)
            id = "card" + (+new Date).toString(16);
          var card;
          if (cards[id]) {
            card = cards[id].element
          }
          else {
            card = document.createElement("div");
            cards[id] = {
              element: card, fade: !!fade
            };
            card.close = Ifm.Dom.Cards.close.bind(null, id);
            card.shake = Ifm.Dom.Cards.shake.bind(null, id);
            card.onclosed = null;
            if (fade)
              Ifm.Dom.Fader.show();
            card.style.zIndex = "1100";
            document.body.appendChild(card);
            card.className = "dialog level-" + (level && /^[12345]$/.test(level) ? level : "1");
            if (!dialog)
              setTimeout(() =>  {
                  var fader = document.getElementById("ifmjs_sys_fader") || document;
                  var oldfunc = fader.onclick;
                  fader.onclick = function(e) {
                    fader.onclick = oldfunc;
                    Ifm.Dom.Events.stop(e);
                    Ifm.Dom.Cards.close(id)
                  };
                  card.onclick = fader.onclick
                }, 20)
          }
          if (html)
            card.innerHTML = html;
          return card
        }, showDialog: function(html, id, title, buttons, options = {}, onload) {
            var htmlDialog = Ifm.Dom.Cards._createDialogBody(html, title);
            var dialog = Ifm.Dom.Cards.show(htmlDialog, id, true, true);
            Ifm.Dom.Cards._createDialogButtons(dialog, dialog, buttons);
            if (Ifm.Type.isFunction(onload)) {
              onload(dialog, dialog)
            }
          }, shake: function(id) {
            if (!cards[id])
              return;
            var card = cards[id].element,
              styleLeft = card.style.left,
              styleRight = card.style.right,
              curLeft = card.offsetLeft;
            var f = function(i) {
                var shakeX = 10 * ((i % 3) - 1);
                card.style.left = curLeft + shakeX + "px";
                card.style.right = curLeft - shakeX + "px";
                if (--i > 0) {
                  setTimeout(f, 20, i)
                }
                else {
                  card.style.left = styleLeft;
                  card.style.right = styleRight
                }
              };
            f(16)
          }, close: function(id) {
            if (!cards[id])
              return;
            var card = cards[id].element;
            document.body.removeChild(card);
            if (cards[id].fade)
              Ifm.Dom.Fader.hide();
            if (Ifm.Type.isFunction(card.onclosed))
              card.onclosed(card);
            delete cards[id];
            return card
          }, get: function(id) {
            return cards[id] || null
          }, getBody: function(id) {
            return cards[id] || null
          }, isShown: function(id) {
            return cards[id] ? true : false
          }, _createDialogBody: function(html, title) {
            var htmlDialog = `
                    <div class="dialog-title">${title}</div>
                    <div class="dialog-body">${html}</div>
                    <div class="dialog-buttons"></div>
                `;
            return htmlDialog
          }, _createDialogButtons: function(dialog, dialogBody, buttons) {
            if (dialogBody && buttons && buttons.length) {
              const buttonContainer = dialogBody.lastElementChild;
              for (var i = 0; i < buttons.length; i++) {
                var btn = document.createElement("button");
                btn.innerHTML = buttons[i].text || "[Button" + (i + 1) + "]";
                btn.style.cssText = buttons[i].cssText;
                btn.onclick = (function(fn) {
                  if (Ifm.Type.isFunction(fn)) {
                    return function() {
                        buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = true);
                        var result = false;
                        try {
                          result = fn(dialog, dialogBody);
                          if (result instanceof Promise) {
                            result.then(function(resolved) {
                              if (resolved !== false) {
                                dialog.close()
                              }
                            });
                            result.catch(function(err) {
                              console.warn('[Ifm.Dom.Cards] Error executing button action', err);
                              dialog.shake()
                            });
                            result.finally(function() {
                              buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = false)
                            });
                            return false
                          }
                        }
                        catch(err) {
                          console.warn('[Ifm.Dom.Cards] Error executing button action', err);
                          dialog.shake()
                        }
                        buttonContainer.querySelectorAll('button').forEach(btn => btn.disabled = false);
                        if (result !== false) {
                          dialog.close()
                        }
                      }
                  }
                  else {
                    return function() {
                        dialog.close()
                      }
                  }
                })(buttons[i].click);
                buttonContainer.appendChild(btn)
              }
            }
          }
      }
  })();
  this.Band = {_bands: []};
  this.Band.show = function(html) {
    Ifm.Dom.Fader.show();
    var band = document.createElement("div");
    band.className = "band";
    band.style.position = "absolute";
    band.style.top = "50%";
    band.style.marginTop = "-80px";
    band.style.minHeight = "160px";
    band.style.left = "0px";
    band.style.width = "100%";
    band.style.backgroundColor = "#0066CC";
    band.style.color = "white";
    band.style.overflow = "hidden";
    band.style.zIndex = "1200";
    var fader = document.getElementById("ifmjs_sys_fader") || document;
    var oldfunc = fader.onclick;
    fader.onclick = function(e) {
      fader.onclick = oldfunc;
      Ifm.Dom.Events.stop(e);
      Ifm.Dom.Band.hide()
    };
    band.onclick = fader.onclick;
    band.innerHTML = html;
    document.body.appendChild(band);
    Ifm.Dom.Band._bands.push(band);
    if (Ifm.Dom.Band._bands.length > 1) {
      Ifm.Dom.Band._bands[Ifm.Dom.Band._bands.length - 2].style.display = "none"
    }
    return band
  };
  this.Band.hide = function() {
    if (Ifm.Dom.Band._bands.length > 0) {
      var band = Ifm.Dom.Band._bands.pop(band);
      document.body.removeChild(band);
      Ifm.Dom.Fader.hide()
    }
    if (Ifm.Dom.Band._bands.length > 0) {
      Ifm.Dom.Band._bands[Ifm.Dom.Band._bands.length - 1].style.display = ''
    }
    return band
  };
  this.Fader = {_faders: 0};
  this.Fader.show = function() {
    Ifm.Dom.Fader._faders++;
    if (Ifm.Dom.Fader._faders === 1) {
      var fader = document.getElementById("ifmjs_sys_fader");
      if (!fader) {
        fader = document.createElement("div");
        fader.id = "ifmjs_sys_fader";
        fader.style.backgroundColor = "#003366";
        fader.style.opacity = "0.50";
        fader.style.position = "absolute";
        fader.style.left = "0";
        fader.style.top = "0";
        fader.style.width = "100%";
        fader.style.height = "100%";
        fader.style.zIndex = "1000";
        var pageLayout = document.getElementById("page-layout");
        if (pageLayout) {
          pageLayout.className += " fade-effect"
        }
      }
      document.body.appendChild(fader)
    }
    return Ifm.Dom.Fader._faders > 0
  };
  this.Fader.hide = function() {
    Ifm.Dom.Fader._faders--;
    if (Ifm.Dom.Fader._faders === 0) {
      var fader = document.getElementById("ifmjs_sys_fader");
      if (fader) {
        document.body.removeChild(fader);
        var pageLayout = document.getElementById("page-layout");
        if (pageLayout) {
          pageLayout.className = pageLayout.className.replace(" fade-effect", "")
        }
      }
    }
    return Ifm.Dom.Fader._faders <= 0
  };
  this.Menu = function() {
    if (!(this instanceof Ifm.Dom.Menu))
      throw Ifm.Diagnostics.Errors.ctor();
    var menuClassId = "ifmjs_menu";
    return {
        constructor: Ifm.Dom.Menu, choose: function(items, callback) {
            if (!Ifm.Type.isArray(items))
              throw Ifm.Diagnostics.Errors.arg("items");
            if (!Ifm.Type.isFunction(callback))
              throw Ifm.Diagnostics.Errors.arg("callback");
            var options = '';
            for (var i = 0, item; i < items.length, item = items[i]; i++) {
              if (item.visible !== false) {
                if (item.label !== '-') {
                  options += '<option value="{0}" {2}>{1}</option>'.format(item.value, item.label, item.disabled ? "disabled" : "")
                }
                else {
                  options += '<option value="" disabled></option>'
                }
              }
            }
            var select = '<div class="menu"><select style="width:100%;" size="{0}">{1}</select></div>'.format(items.length === 1 ? 2 : items.length, options);
            var card = Ifm.Dom.Cards.show(select, menuClassId),
              sele = card.children[0].children[0];
            sele.onclick = function() {
              callback(this.value)
            };
            sele.onkeydown = function(e) {
              e = Ifm.Dom.Events.getEvent(e);
              if (e.which === 13) {
                Ifm.Dom.Cards.close(menuClassId);
                callback(this.value)
              }
              if (e.which === 27) {
                Ifm.Dom.Cards.close(menuClassId)
              }
            };
            sele.focus()
          }
      }
  };
  this.Strings = (function() {
    function parse(subchar, ref) {
      if (Ifm.Type.isString(ref.nodeValue) && ref.nodeValue.startsWith(subchar + '(') && ref.nodeValue.endsWith(')')) {
        try {
          ref.nodeValue = (Function('return ' + ref.nodeValue.slice(subchar.length + 1, -1)))()
        }
        catch(err) {}
      }
    }
    return {replaceAll: function(subchar) {
          if (!subchar)
            subchar = '%';
          Ifm.Dom.Walker.walk(document.body, function(node) {
            if ((node.nodeType === 1)) {
              for (var i = 0; i < node.attributes.length; i++) {
                parse(subchar, node.attributes[i])
              }
            }
            else if (node.nodeType === 3) {
              parse(subchar, node)
            }
          })
        }}
  })();
  this.Walker = {};
  this.Walker.walk = function walk(node, func) {
    func(node);
    node = node.firstChild;
    while (node) {
      walk(node, func);
      node = node.nextSibling
    }
  }
}).call(Ifm.Dom);
;
namespace("Ifm.PhoneBar.UI").Templates = {
  CampaignListCard: '<div class="default-background scrollable">' + '<div class="phonebar-campaignlist-card-content">' + '<table class="phonebar-campaignlist-card-table"><tbody>{body}</tbody></table>' + '</div>' + '</div>', CampaignListRow: '<tr><td>{name}</td><td>{boundness}</td><td>{state}</td></tr>', IncomingCallCard: '<div class="phonebar-incoming-call-card-content">' + '<div class="phonebar-incoming-call-text">{incomingCallText}</div>' + '<div class="phonebar-incoming-call-number">{incomingCallNumber}</div>' + '<div class="phonebar-incoming-call-campaign">{campaignName}</div>' + '</div>', LoginDialog: '<fieldset class="phonebar-form">' + '<div>' + '<label class="phonebar-form-label" for="firstnametxt">{firstNameLabel}</label>' + '<input class="phonebar-form-input" type="text" id="firstnametxt" value="{firstName}">' + '</div><div>' + '<label class="phonebar-form-label" for="lastnametxt">{lastNameLabel}</label>' + '<input class="phonebar-form-input" type="text" id="lastnametxt" value="{lastName}">' + '</div><div>' + '<label class="phonebar-form-label" for="passwordtxt">{passwordLabel}</label>' + '<input class="phonebar-form-input" type="password" id="passwordtxt" value="{password}">' + '</div><div>' + '<label class="phonebar-form-label" for="extensiontxt">{extensionLabel}</label>' + '<input class="phonebar-form-input small right-aligned" type="text" id="extensiontxt" value="{extension}">' + '</div>' + '</fieldset>', Login2Dialog: '<fieldset class="phonebar-form">' + '<div>' + '<label class="phonebar-form-label" for="firstnametxt">{firstNameLabel}</label>' + '<input class="phonebar-form-input" type="text" id="firstnametxt" value="{firstName}">' + '</div><div>' + '<label class="phonebar-form-label" for="lastnametxt">{lastNameLabel}</label>' + '<input class="phonebar-form-input" type="text" id="lastnametxt" value="{lastName}">' + '</div><div>' + '<label class="phonebar-form-label" for="oldPasswordtxt">{oldPasswordLabel}</label>' + '<input class="phonebar-form-input" type="password" id="oldPasswordtxt" value="{oldPassword}">' + '</div><div>' + '<label class="phonebar-form-label" for="newPasswordtxt">{newPasswordLabel}</label>' + '<input class="phonebar-form-input" type="password" id="newPasswordtxt" value="{newPassword}">' + '</div><div>' + '<label class="phonebar-form-label" for="confirmPasswordtxt">{confirmPasswordLabel}</label>' + '<input class="phonebar-form-input" type="password" id="confirmPasswordtxt" value="{confirmPassword}">' + '</div><div>' + '<label class="phonebar-form-label" for="extensiontxt">{extensionLabel}</label>' + '<input class="phonebar-form-input small right-aligned" type="text" id="extensiontxt" value="{extension}">' + '</div>' + '</fieldset>', LoginOAuth2Dialog: '<fieldset class="phonebar-form">' + '<div>' + '<label class="phonebar-form-label" for="usernametxt">{usernameLabel}</label>' + '<input class="phonebar-form-input large" type="text" id="usernametxt" value="{username}">' + '</div><div>' + '<label class="phonebar-form-label" for="extensiontxt">{extensionLabel}</label>' + '<input class="phonebar-form-input small right-aligned" type="text" id="extensiontxt" value="{extension}">' + '</div>' + '</fieldset>', MessageCard: '<div class="phonebar-message-{severity}"><i class="material-icons">{icon}</i>' + ' <span class="phonebar-message-title">{title}</span></div>' + '<div class="phonebar-message-text">{message}</div>', QueueInfoCard: '<div class="phonebar-queueinfo-card-content">' + '<div><b>{number}</b> {queuedNumberText}</div>' + '<div><b>{maxTime}</b> {queuedMaxTimeText}</div>' + '<div><b>{avgTime}</b> {queuedAvgTimeText}</div>' + '</div>', SupervisorMessageCard: '<div class="phonebar-supervisor-message-{severity}"><i class="material-icons">{icon}</i>' + ' <span class="phonebar-supervisor-message-title">{title}</span></div>' + '<div class="phonebar-supervisor-message-text">{message}</div>', TransferCallCard: '<div class="phonebar-transfercall-card-content">' + '<select class="phonebar-transfer-campaign-list"></select>' + '<div class="phonebar-transfer-agent-list-search-box">' + '<input class="phonebar-form-input phonebar-transfer-agent-list-search-input" type="text" placeholder="{searchHelp}" value="">' + '</div>' + '<select class="phonebar-transfer-agent-list" size="10"></select>' + '<label><input type="checkbox" class="phonebar-transfer-mandatory-check" checked>{mandatoryLabel}</label>' + '</div>', TransferCallAgentListItem: '<option firstName="{0}" lastName="{1}" agentState="{2}">{0} {1} {2}</option>', TransferCallCampaignListItem: '<option campaignName="{0}">{1}</option>'
};
Ifm.PhoneBar.UI.Commands = (function() {
  const phonebar = Ifm.PhoneBar.instance;
  const commands = {};
  commands.login = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    if (phonebar.currentState() !== Ifm.PhoneBar.States.NotLoggedIn) {
      return
    }
    if (phonebar.getPhoneBarConfiguration().useProvisioning) {
      commands.provisioningAndLogin();
      return
    }
    if (phonebar.isOAuth2Enabled()) {
      var html = t.LoginOAuth2Dialog.replace("{usernameLabel}", strings.LoginUsername).replace("{username}", phonebar.agent.username).replace("{extensionLabel}", strings.LoginExtension).replace("{extension}", phonebar.agent.extension);
      Ifm.Dom.Photon.Cards.showDialog(html, "login-dialog", strings.LoginOAuth2Title, [{
          text: strings.ButtonOK, click: doOAuth2Login
        }, {text: strings.ButtonCancel}], {
        width: 600, height: 248
      })
    }
    else {
      var html = t.LoginDialog.replace("{firstNameLabel}", strings.LoginFirstName).replace("{lastNameLabel}", strings.LoginLastName).replace("{passwordLabel}", strings.LoginPassword).replace("{extensionLabel}", strings.LoginExtension).replace("{firstName}", phonebar.agent.firstName).replace("{lastName}", phonebar.agent.lastName).replace("{password}", phonebar.agent.password).replace("{extension}", phonebar.agent.extension);
      Ifm.Dom.Photon.Cards.showDialog(html, "login-dialog", strings.LoginTitle, [{
          text: strings.ButtonChangePassword, cssText: "margin-right:50px;", click: function() {
              commands.loginChangePassword()
            }
        }, {
          text: strings.ButtonOK, click: doPhonesLogin
        }, {text: strings.ButtonCancel}], {
        width: 600, height: 324
      })
    }
  };
  commands.loginChangePassword = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var html = t.Login2Dialog.replace("{firstNameLabel}", strings.LoginFirstName).replace("{lastNameLabel}", strings.LoginLastName).replace("{oldPasswordLabel}", strings.LoginOldPassword).replace("{newPasswordLabel}", strings.LoginNewPassword).replace("{confirmPasswordLabel}", strings.LoginConfirmPassword).replace("{extensionLabel}", strings.LoginExtension).replace("{firstName}", phonebar.agent.firstName).replace("{lastName}", phonebar.agent.lastName).replace("{oldPassword}", "").replace("{newPassword}", "").replace("{confirmPassword}", "").replace("{extension}", phonebar.agent.extension);
    Ifm.Dom.Photon.Cards.showDialog(html, "login2-dialog", strings.LoginTitle, [{
        text: strings.ButtonOK, click: function(dialog, dialogBody) {
            if (phonebar.currentState() !== Ifm.PhoneBar.States.NotLoggedIn) {
              return
            }
            const firstnametxt = dialogBody.querySelector('#firstnametxt');
            const lastnametxt = dialogBody.querySelector('#lastnametxt');
            const oldPasswordtxt = dialogBody.querySelector('#oldPasswordtxt');
            const newPasswordtxt = dialogBody.querySelector('#newPasswordtxt');
            const confirmPasswordtxt = dialogBody.querySelector('#confirmPasswordtxt');
            const extensiontxt = dialogBody.querySelector('#extensiontxt');
            if (newPasswordtxt.value !== confirmPasswordtxt.value) {
              confirmPasswordtxt.focus();
              commands.showMessage(strings.PasswordsDontMatch);
              return false
            }
            phonebar.loginEx(firstnametxt.value, lastnametxt.value, oldPasswordtxt.value, newPasswordtxt.value, extensiontxt.value, function(e) {
              if (e.accepted) {
                dialog.close()
              }
              else {
                if (e.failureCause === 1) {
                  dialog.close();
                  commands.showMessage(strings.AccountLockedOut, 'error')
                }
                else if (e.failureCause === 4) {
                  newPasswordtxt.value = confirmPasswordtxt.value = "";
                  commands.showMessage(strings.InvalidNewPassword, 'warning')
                }
                else if (e.failureCause === 5) {
                  dialog.close();
                  commands.login();
                  commands.showMessage(strings.CantChangePassword, 'information')
                }
                else {
                  dialog.shake();
                  var cause = e.failureCause === 3 ? strings.WrongCredentials : strings.UserOrExtensionTaken;
                  commands.showMessage(cause, 'warning')
                }
              }
            });
            return false
          }
      }, {text: strings.ButtonCancel}], {
      width: 600, height: 440
    })
  };
  commands.loginOrReady = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    if (!phonebar.isLoggedIn()) {
      commands.login()
    }
    else {
      commands.ready()
    }
  };
  commands.logout = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    phonebar.logout()
  };
  commands.pause = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    phonebar.getPauseReasons(function(e) {
      if (e.reasons.length === 0) {
        phonebar.pause()
      }
      else {
        e.reasons.unshift({
          text: strings.PauseGenericReason, value: 0
        });
        var choices = [];
        for (var i = 0; i < e.reasons.length; i++) {
          choices.push({
            label: e.reasons[i].text, value: e.reasons[i].id
          })
        }
        Ifm.Dom.Photon.Menu.choose(choices, function(id) {
          phonebar.pause(id)
        })
      }
    })
  };
  commands.ready = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var activeCall = getAudioCall();
    if (activeCall && activeCall.postcall) {
      phonebar.ready(activeCall.callId)
    }
    else {
      phonebar.ready()
    }
  };
  commands.panic = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    phonebar.panic();
    var toolbars = el.MainToolbar + ", " + el.PhoneToolbar;
    jQuery(toolbars).addClass("phonebar-panic-effect");
    setTimeout(function() {
      jQuery(toolbars).removeClass("phonebar-panic-effect")
    }, 2000)
  };
  commands.showAssignedCampaignList = function(update) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    if (update && !Ifm.Dom.Photon.Cards.isShown('campaignlist-card'))
      return;
    phonebar.getAssignedCampaignList(function(e) {
      var rows = "";
      for (var i = 0; i < e.campaigns.length; i++) {
        rows += t.CampaignListRow.replace("{name}", e.campaigns[i].name).replace("{boundness}", e.campaigns[i].boundness).replace("{state}", e.campaigns[i].active ? "" : "Stop")
      }
      var html = t.CampaignListCard.replace("{body}", rows);
      var card = Ifm.Dom.Photon.Cards.show(html, 'campaignlist-card', true, false, 0, strings.AssignmentsTitle);
      setTimeout(commands.showAssignedCampaignList, 5000, true);
      if (!Ifm.Photon.app.isHosted) {
        card.onclick = function() {
          card.close()
        }
      }
    })
  };
  commands.hideDialpad = function() {
    jQuery(el.PhoneDialPad + ", " + el.HideDialPadButton).disable().hide();
    jQuery(el.ShowDialPadButton).enable().show()
  };
  commands.showDialpad = function() {
    jQuery(el.PhoneDialPad + ", " + el.HideDialPadButton).enable().show();
    jQuery(el.ShowDialPadButton).disable().hide()
  };
  commands.toggleDialpad = function() {
    console.debug('Not implemented: commands.toggleDialpad()')
  };
  commands.showQueueInfo = function(update) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    if (update && !Ifm.Dom.Photon.Cards.isShown('queueinfo-card'))
      return;
    phonebar.getQueueInfo("", function(e) {
      var html = t.QueueInfoCard.replace("{number}", e.calls).replace("{queuedNumberText}", strings.queuedNumberText).replace("{maxTime}", e.maxTime || "--").replace("{queuedMaxTimeText}", strings.queuedMaxTimeText).replace("{avgTime}", e.avgTime || "--").replace("{queuedAvgTimeText}", strings.queuedAvgTimeText);
      var card = Ifm.Dom.Photon.Cards.show(html, 'queueinfo-card', true, false, 0, strings.QueueInfoTitle, {
          left: screen.availWidth - 180, top: 100, width: 130, height: 100, toolWindow: true
        });
      card.className += " phonebar-queueinfo-card";
      setTimeout(commands.showQueueInfo, 5000, true);
      if (!Ifm.Photon.app.isHosted) {
        card.onclick = function() {
          card.close()
        }
      }
    })
  };
  commands.abortCall = function() {
    if (phonebar.currentState() === Ifm.PhoneBar.States.WaitingOutbound) {
      phonebar.abortCall()
    }
  };
  commands.getInputNumber = function() {
    const q = jQuery(el.NumberInput);
    if (q.data("s")) {
      return q.data("n") === "0" ? q.val() : q.attr("title")
    }
    return q.val()
  };
  commands.showMakeCallPopup = function() {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    if (!commands.getInputNumber())
      return;
    if (phonebar.media.phone && phonebar.media.phone.selectedLineId > 0) {
      phonebar.media.phone.dial(commands.getInputNumber());
      return
    }
    phonebar.getOutboundCampaignList(function(e) {
      if (phonebar.media.phone) {
        e.campaigns.push({name: strings.OutboundManualCall})
      }
      if (e.campaigns.length > 0) {
        var choices = [];
        for (var i = 0; i < e.campaigns.length; i++) {
          choices.push({
            label: e.campaigns[i].serviceName || e.campaigns[i].name, value: e.campaigns[i].name
          })
        }
        Ifm.Dom.Photon.Menu.choose(choices, function(campaign) {
          if (campaign === null) {
            return
          }
          else if (campaign === strings.OutboundManualCall) {
            phonebar.media.phone.dial(commands.getInputNumber())
          }
          else {
            phonebar.makeCall(commands.getInputNumber(), campaign, phonebar.options.callingNumber() || phonebar.agent.extension)
          }
        })
      }
    })
  };
  commands.showTransferForm = function(callId) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var call,
      campaignName = '';
    if (!callId) {
      call = getAudioCall();
      callId = call.callId
    }
    else {
      call = phonebar.calls(callId)
    }
    if (call) {
      campaignName = call.campaignName
    }
    else {
      callId = 0
    }
    var html = t.TransferCallCard.replace("{mandatoryLabel}", strings.TransferMandatory).replace("{searchHelp}", strings.TransferSearchHelp);
    Ifm.Dom.Photon.Cards.showDialog(html, "transfercall-card", strings.TransferTitle, [{
        text: strings.ButtonRefresh, click: function(dialog, dialogBody) {
            getTransferAgents(dialogBody);
            return false
          }
      }, {
        text: strings.ButtonTransfer, click: function(dialog, dialogBody) {
            transferCall(callId, dialogBody, function(e) {
              if (e.accepted)
                dialog.close()
            });
            return false
          }
      }, {text: strings.ButtonCancel}], {
      width: 750, height: 474
    }, function(dialog, dialogBody) {
      dialogBody.querySelector('.phonebar-transfer-campaign-list').addEventListener('input', function() {
        getTransferAgents(dialogBody)
      });
      dialogBody.querySelector('.phonebar-transfer-agent-list-search-input').addEventListener('input', function() {
        filterTransferAgents(dialogBody)
      });
      phonebar.getTransferCampaignList(callId, function(e) {
        var list = dialogBody.querySelector(el.TransferCampaignList);
        var lastValue = list.value;
        var opts1 = "",
          opts2 = "",
          servs = [];
        for (var i = 0, c = null; i < e.campaigns.length, c = e.campaigns[i]; i++) {
          if (campaignName.startsWith(c.serviceName + '/')) {
            opts1 += t.TransferCallCampaignListItem.format(c.name, c.campaignName)
          }
          else {
            if (!servs[c.serviceName]) {
              opts2 += t.TransferCallCampaignListItem.format(c.name, c.serviceName);
              servs[c.serviceName] = true
            }
          }
        }
        if (opts1)
          opts1 = '<optgroup label="' + strings.TransferCampaign + '">' + opts1 + '</optgroup>';
        if (opts2)
          opts2 = '<optgroup label="' + strings.TransferService + '">' + opts2 + '</optgroup>';
        list.innerHTML = opts1 + opts2;
        if (lastValue)
          list.value = lastValue;
        getTransferAgents(dialogBody)
      })
    })
  };
  commands.startRecording = function() {
    const activeCall = getAudioCall();
    if (activeCall && !activeCall.isRecording) {
      phonebar.startRecording(activeCall.callId)
    }
  };
  commands.stopRecording = function() {
    const activeCall = getAudioCall();
    if (activeCall && activeCall.isRecording) {
      phonebar.stopRecording(activeCall.callId)
    }
  };
  commands.muteRecording = function() {
    const activeCall = getAudioCall();
    if (activeCall && activeCall.isRecording) {
      phonebar.muteRecording(activeCall.callId, true, true)
    }
  };
  commands.unmuteRecording = function() {
    const activeCall = getAudioCall();
    if (activeCall && activeCall.isRecording) {
      phonebar.muteRecording(activeCall.callId, false, false)
    }
  };
  commands.showMessage = function(content, severity, heading, hideAfter = false) {
    const style = getNotificationStyle(severity);
    if (Ifm.Photon.app.isHosted) {
      Ifm.Photon.app.host.showNotification({
        content, heading, style, hideAfter, position: "TopCenter"
      })
    }
    else if (jQuery.toast) {
      jQuery.toast({
        text: content, icon: severity, heading: heading, allowToastClose: true, hideAfter, position: 'top-center', loader: false
      })
    }
    else {
      var band = Ifm.Dom.Band.show();
      var html = '<div class="phonebar-message" ' + 'style="line-height:' + band.clientHeight + 'px;"' + '>' + content + '</div>';
      band.innerHTML = html
    }
  };
  commands.answer = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.answer()
  };
  commands.dial = function(opt_number) {
    var phone = Ifm.PhoneBar.instance.media.phone;
    var number = opt_number !== undefined && opt_number !== null ? opt_number : commands.getInputNumber();
    phone.dial(number)
  };
  commands.dtmf = function(tones) {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.dtmf(tones)
  };
  commands.enterConference = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.enterConference()
  };
  commands.leaveConference = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.leaveConference()
  };
  commands.drop = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.drop()
  };
  commands.mute = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.mute()
  };
  commands.selectLine = function(lineId) {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.selectLine(lineId)
  };
  commands.unmute = function() {
    var phone = Ifm.PhoneBar.instance.media.phone;
    phone.unmute()
  };
  Ifm.PhoneBar.events.initialized = function(phonebar, e) {
    if (!_uiInitialized) {
      bindElements();
      bindEvents();
      _uiInitialized = true
    }
    if (!e.options) {
      return
    }
    if (phonebar.options.loginOnStart()) {
      setTimeout(function() {
        if (phonebar.isRedirectedAfterOAuth2Signin()) {
          return
        }
        else if (phonebar.isRedirectedAfterOAuth2Signout()) {
          commands.login()
        }
        else if (phonebar.options.loginOnStart() === 2) {
          var a = phonebar.agent;
          if (phonebar.isOAuth2Enabled() && a.extension) {
            phonebar.getToken(function(token) {
              phonebar.loginWithToken(token, a.extension, a.username, function(e) {
                if (!e.accepted)
                  commands.login()
              })
            })
          }
          else if (phonebar.options.rememberCredentials() === 2 && a.firstName && a.lastName && a.extension) {
            phonebar.login(a.firstName, a.lastName, a.password, a.extension, function(e) {
              if (!e.accepted)
                commands.login()
            })
          }
          else {
            commands.login()
          }
        }
        else {
          commands.login()
        }
      })
    }
  };
  function bindElements() {
    jQuery(el.LoginButton).click(function() {
      commands.login()
    });
    jQuery(el.LoginOrReadyButton).click(function() {
      commands.loginOrReady()
    });
    jQuery(el.ReadyButton).click(function() {
      commands.ready()
    });
    jQuery(el.PauseButton).click(function() {
      commands.pause()
    });
    jQuery(el.LogoutButton).click(function() {
      commands.logout()
    });
    jQuery(el.AbortCallButton).click(function() {
      commands.abortCall()
    });
    jQuery(el.CallButton).click(function() {
      commands.showMakeCallPopup()
    });
    jQuery(el.TransferButton).click(function() {
      commands.showTransferForm()
    });
    jQuery(el.CampaignListButton).click(function() {
      if (Ifm.Dom.Photon.Cards.isShown("campaignlist-card"))
        Ifm.Dom.Photon.Cards.close("campaignlist-card");
      else
        commands.showAssignedCampaignList()
    });
    jQuery(el.QueueInfoButton).click(function() {
      if (Ifm.Dom.Photon.Cards.isShown("queueinfo-card"))
        Ifm.Dom.Photon.Cards.close("queueinfo-card");
      else
        commands.showQueueInfo()
    });
    jQuery(el.PanicButton).click(function() {
      commands.panic()
    });
    jQuery(el.MainMenuButton).click(function() {
      commands.showMenu()
    });
    jQuery(el.NumberInput).on("input", function() {
      const q = jQuery(el.NumberInput);
      if (q.data("s")) {
        if (q.data("n") === "1") {
          q.val(q.attr("title"));
          q.attr("title", "")
        }
        ;
        q.removeData(["n", "s"])
      }
    }).on("keydown", function(e) {
      if (e.which === 13) {
        if (jQuery(el.CallButton).enabled())
          jQuery(el.CallButton).click();
        return false
      }
      if ((e.ctrlKey && e.keyCode === 8) || e.which === 27) {
        const phone = Ifm.PhoneBar.instance.media.phone;
        const Phone = Ifm.PhoneBar.Media.Phone;
        phone && Phone && Phone.events.lineselected.raise(this, {lineId: phone.selectedLineId});
        return false
      }
    }).click(function() {
      const q = jQuery(el.NumberInput);
      if (q.data("s")) {
        const t = q.attr("title");
        q.attr("title", q.val());
        q.val(t);
        q.data("n", q.data("n") === "0" ? "1" : "0")
      }
    });
    jQuery(el.StartRecordingButton).click(function() {
      commands.startRecording()
    });
    jQuery(el.StopRecordingButton).click(function() {
      commands.stopRecording()
    });
    jQuery(el.MuteRecordingButton).click(function() {
      commands.muteRecording()
    });
    jQuery(el.UnmuteRecordingButton).click(function() {
      commands.unmuteRecording()
    });
    jQuery(el.PhoneDialPad).disable().hide();
    jQuery(el.HideDialPadButton).disable().hide().click(function() {
      commands.hideDialpad()
    });
    jQuery(el.ShowDialPadButton).click(function() {
      commands.showDialpad()
    });
    jQuery(el.ToggleDialPadButton).click(function() {
      commands.toggleDialpad()
    });
    jQuery(el.PickupButton).click(function() {
      commands.answer()
    });
    jQuery(el.HangupButton).click(function() {
      commands.drop()
    });
    jQuery(el.ManualTransferButton).click(function() {
      commands.dial("!," + commands.getInputNumber())
    });
    jQuery(el.FlashButton).click(function() {
      commands.dial("!")
    });
    jQuery(el.Line1Button).click(function() {
      commands.selectLine(0)
    });
    jQuery(el.Line2Button).click(function() {
      commands.selectLine(1)
    });
    jQuery(el.EnterConferenceButton).click(function() {
      commands.enterConference()
    });
    jQuery(el.LeaveConferenceButton).click(function() {
      commands.leaveConference()
    });
    jQuery(el.MicrophoneOffButton).click(function() {
      commands.mute()
    });
    jQuery(el.MicrophoneOnButton).click(function() {
      commands.unmute()
    });
    jQuery(el.DialPadDigit0Button).click(function() {
      commands.dtmf("0")
    });
    jQuery(el.DialPadDigit1Button).click(function() {
      commands.dtmf("1")
    });
    jQuery(el.DialPadDigit2Button).click(function() {
      commands.dtmf("2")
    });
    jQuery(el.DialPadDigit3Button).click(function() {
      commands.dtmf("3")
    });
    jQuery(el.DialPadDigit4Button).click(function() {
      commands.dtmf("4")
    });
    jQuery(el.DialPadDigit5Button).click(function() {
      commands.dtmf("5")
    });
    jQuery(el.DialPadDigit6Button).click(function() {
      commands.dtmf("6")
    });
    jQuery(el.DialPadDigit7Button).click(function() {
      commands.dtmf("7")
    });
    jQuery(el.DialPadDigit8Button).click(function() {
      commands.dtmf("8")
    });
    jQuery(el.DialPadDigit9Button).click(function() {
      commands.dtmf("9")
    });
    jQuery(el.DialPadHashButton).click(function() {
      commands.dtmf("#")
    });
    jQuery(el.DialPadStarButton).click(function() {
      commands.dtmf("*")
    })
  }
  function bindEvents() {
    Ifm.PhoneBar.events.alerting = function(phonebar, e) {
      var call = phonebar.calls(e.callId),
        mediatype = call.mediatype;
      if (phonebar.options.popupIncomingCalls() & mediatype === mediatype) {
        const display = mediatype === Ifm.PhoneBar.Mediatypes.Voice ? call.displayName || call.displayNumber : ' ';
        showIncomingCallPopup(display, call.campaignName)
      }
    };
    Ifm.PhoneBar.events.callfailure = function(phonebar, e) {
      var strings = Ifm.PhoneBar.Strings[phonebar.language()];
      Ifm.Dom.Photon.Cards.close("incoming-call-card");
      if (e.cause < 255) {
        commands.showMessage(e.description, "warning", strings.CallFailure)
      }
    };
    Ifm.PhoneBar.events.pausebooked = function(phonebar, e) {
      jQuery(el.PauseButton).addClass("blink")
    };
    Ifm.PhoneBar.events.pause = function(phonebar, e) {
      jQuery(el.PauseButton).removeClass("blink")
    };
    Ifm.PhoneBar.events.statechanged = function(phonebar, e) {
      var s = Ifm.PhoneBar.States;
      if (e.previousState === s.Alerting || e.previousState === s.OtherCall) {
        setTimeout(function() {
          Ifm.Dom.Photon.Cards.close("incoming-call-card")
        }, 3000)
      }
      if (e.previousState === s.Talking || e.currentState !== s.Talking) {
        Ifm.Dom.Photon.Cards.close("transfercall-card")
      }
      if (e.currentState === s.NotLoggedIn) {
        jQuery(el.PauseButton).removeClass("blink");
        jQuery(el.Line1Button + ', ' + el.Line2Button).removeClass("selected highlight blink")
      }
    };
    Ifm.PhoneBar.events.supervisormessage = function(phonebar, e) {
      var strings = Ifm.PhoneBar.Strings[phonebar.language()],
        severities = ["information", "warning", "critical"],
        icons = ["info", "warning", "error"];
      var html = t.SupervisorMessageCard.replace("{severity}", severities[e.severity]).replace("{icon}", icons[e.severity]).replace("{message}", e.message).replace("{title}", strings.SupervisorTitle);
      Ifm.Dom.Photon.Cards.show(html, undefined, false, false, 0, strings.SupervisorTitle, {
        width: 500, height: 250, showInTaskbar: true
      })
    };
    Ifm.PhoneBar.Media.Xmpp.events.newmessage = function(phonebar, e) {
      var call = phonebar.calls(e.callId);
      if (call && call.mediatype === Ifm.PhoneBar.Mediatypes.StoreAndForward) {
        if (!call.handled) {
          phonebar.media.xmpp.handled(e.callId)
        }
      }
    }
  }
  function doOAuth2Login(dialog, dialogBody) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    return new Promise(function(resolve, reject) {
        try {
          if (phonebar.currentState() !== Ifm.PhoneBar.States.NotLoggedIn) {
            resolve();
            return
          }
          const usernametxt = dialogBody.querySelector('#usernametxt');
          const extensiontxt = dialogBody.querySelector('#extensiontxt');
          phonebar.agent.username = usernametxt.value;
          phonebar.agent.extension = extensiontxt.value;
          phonebar.agent.save();
          dialog.close();
          phonebar.getToken(function(token) {
            phonebar.loginWithToken(token, extensiontxt.value, phonebar.agent.username, function(e) {
              if (e.failed) {
                dialog.close();
                commands.showMessage(strings.ConnectionFailed, 'error');
                resolve()
              }
              else if (e.accepted) {
                resolve()
              }
              else {
                var cause;
                switch (e.failureCause) {
                  case 3:
                    cause = strings.WrongCredentials;
                    break;
                  case 7:
                    cause = strings.InvalidExtension;
                    break;
                  case 8:
                    cause = strings.ExtensionInUse;
                    break;
                  case 9:
                  case 10:
                    cause = strings.TokenBasedLoginError;
                    break;
                  default:
                    cause = "Login error " + e.failureCause;
                    break
                }
                commands.showMessage(cause, 'warning');
                resolve(false)
              }
            })
          })
        }
        catch(err) {
          reject(err)
        }
      })
  }
  function doPhonesLogin(dialog, dialogBody) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    return new Promise(function(resolve, reject) {
        try {
          if (phonebar.currentState() !== Ifm.PhoneBar.States.NotLoggedIn) {
            resolve();
            return
          }
          const firstnametxt = dialogBody.querySelector('#firstnametxt');
          const lastnametxt = dialogBody.querySelector('#lastnametxt');
          const passwordtxt = dialogBody.querySelector('#passwordtxt');
          const extensiontxt = dialogBody.querySelector('#extensiontxt');
          phonebar.login(firstnametxt.value, lastnametxt.value, passwordtxt.value, extensiontxt.value, function(e) {
            if (e.failed) {
              dialog.close();
              commands.showMessage(strings.ConnectionFailed, 'error');
              resolve()
            }
            else if (e.accepted) {
              resolve()
            }
            else if (e.failureCause === 1) {
              commands.showMessage(strings.AccountLockedOut, 'error');
              resolve(false)
            }
            else if (e.failureCause === 2) {
              dialog.close();
              commands.showMessage(strings.PasswordExpired, 'warning');
              resolve();
              commands.loginChangePassword()
            }
            else {
              dialog.shake();
              var cause;
              switch (e.failureCause) {
                case 0:
                  cause = strings.UserOrExtensionTaken;
                  break;
                case 3:
                  cause = strings.WrongCredentials;
                  break;
                case 7:
                  cause = strings.InvalidExtension;
                  break;
                case 8:
                  cause = strings.ExtensionInUse;
                  break;
                default:
                  cause = "Login error " + e.failureCause;
                  break
              }
              commands.showMessage(cause, 'warning');
              resolve(false)
            }
          })
        }
        catch(err) {
          reject(err)
        }
      })
  }
  function getAudioCall() {
    return phonebar.calls(function(call) {
        return call.mediatype === Ifm.PhoneBar.Mediatypes.Voice
      })[0] || null
  }
  function getNotificationStyle(severity) {
    switch (severity) {
      case'information':
      case'warning':
      case'error':
        return severity[0].toUpperCase() + severity.substring(1);
      default:
        return 'Notification'
    }
  }
  function filterTransferAgents(dialogBody) {
    const searchInput = dialogBody.querySelector('.phonebar-transfer-agent-list-search-input');
    const agentList = dialogBody.querySelector(el.TransferAgentList);
    const items = agentList.querySelectorAll('option');
    const filter = (searchInput.value || '').toUpperCase();
    for (const item of items) {
      let itemValue = (item.textContent || '').toUpperCase();
      const eol = itemValue.indexOf('(');
      if (eol > -1) {
        itemValue = itemValue.substring(0, eol).trim()
      }
      if (!filter || itemValue.indexOf(filter) > -1) {
        item.style.display = ""
      }
      else {
        item.style.display = "none"
      }
    }
  }
  function getTransferAgents(dialogBody) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var campaignList = dialogBody.querySelector(el.TransferCampaignList);
    if (campaignList && campaignList.selectedIndex >= 0) {
      var campaignName = campaignList[campaignList.selectedIndex].getAttribute("campaignName");
      phonebar.getTransferAgentList(campaignName, function(e) {
        var opts = t.TransferCallAgentListItem.format(strings.TransferAnybody);
        for (var i = 0, a; i < e.agents.length, a = e.agents[i]; i++) {
          opts += t.TransferCallAgentListItem.format(a.firstName, a.lastName, a.state !== 2 ? "(" + strings.GenericBusyState + ")" : "")
        }
        dialogBody.querySelector(el.TransferAgentList).innerHTML = opts
      })
    }
  }
  function showIncomingCallPopup(callingNumber, campaignName) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var html = t.IncomingCallCard.replace("{incomingCallText}", strings.IncomingCallText).replace("{incomingCallNumber}", callingNumber || strings.UnknownCallingNumber).replace("{campaignName}", campaignName || "");
    Ifm.Dom.Photon.Cards.show(html, "incoming-call-card", false, false, 0, strings.IncomingCallText, {
      width: 600, height: 207
    })
  }
  function transferCall(callId, dialogBody, callback) {
    const strings = Ifm.PhoneBar.Strings[phonebar.language()];
    var call = callId ? phonebar.calls(callId) : getAudioCall();
    if (!call || !call.callId)
      return;
    var campaignList = dialogBody.querySelector(el.TransferCampaignList);
    var campaignName = "";
    if (campaignList && campaignList.selectedIndex >= 0) {
      campaignName = campaignList[campaignList.selectedIndex].getAttribute("campaignName")
    }
    var agentList = dialogBody.querySelector(el.TransferAgentList);
    var firstName = "",
      lastName = "",
      mandatory = false;
    if (agentList && agentList.selectedIndex > 0) {
      firstName = agentList[agentList.selectedIndex].getAttribute("firstName");
      lastName = agentList[agentList.selectedIndex].getAttribute("lastName");
      mandatory = dialogBody.querySelector(el.TransferMandatoryCheck).checked
    }
    phonebar.transferCall(call.callId, campaignName, firstName, lastName, mandatory, undefined, callback)
  }
  var el = Ifm.PhoneBar.UI.Elements,
    t = Ifm.PhoneBar.UI.Templates;
  var _uiInitialized = false;
  return commands
})()
