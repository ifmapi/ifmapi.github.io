
//============================================================================

// Copyright (c) IFM Infomaster. All rights reserved.

//============================================================================

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.adapter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

'use strict';

var _adapter_factory = require('./adapter_factory.js');

var adapter = (0, _adapter_factory.adapterFactory)({ window: window });
module.exports = adapter; // this is the difference from adapter_core.

},{"./adapter_factory.js":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adapterFactory = adapterFactory;

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _chrome_shim = require('./chrome/chrome_shim');

var chromeShim = _interopRequireWildcard(_chrome_shim);

var _edge_shim = require('./edge/edge_shim');

var edgeShim = _interopRequireWildcard(_edge_shim);

var _firefox_shim = require('./firefox/firefox_shim');

var firefoxShim = _interopRequireWildcard(_firefox_shim);

var _safari_shim = require('./safari/safari_shim');

var safariShim = _interopRequireWildcard(_safari_shim);

var _common_shim = require('./common_shim');

var commonShim = _interopRequireWildcard(_common_shim);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Shimming starts here.
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
function adapterFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      window = _ref.window;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    shimChrome: true,
    shimFirefox: true,
    shimEdge: true,
    shimSafari: true
  };

  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);

  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;

      chromeShim.shimGetUserMedia(window);
      chromeShim.shimMediaStream(window);
      chromeShim.shimPeerConnection(window);
      chromeShim.shimOnTrack(window);
      chromeShim.shimAddTrackRemoveTrack(window);
      chromeShim.shimGetSendersWithDtmf(window);
      chromeShim.shimGetStats(window);
      chromeShim.shimSenderReceiverGetStats(window);
      chromeShim.fixNegotiationNeeded(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimConnectionState(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      commonShim.removeAllowExtmapMixed(window);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;

      firefoxShim.shimGetUserMedia(window);
      firefoxShim.shimPeerConnection(window);
      firefoxShim.shimOnTrack(window);
      firefoxShim.shimRemoveStream(window);
      firefoxShim.shimSenderGetStats(window);
      firefoxShim.shimReceiverGetStats(window);
      firefoxShim.shimRTCDataChannel(window);
      firefoxShim.shimAddTransceiver(window);
      firefoxShim.shimCreateOffer(window);
      firefoxShim.shimCreateAnswer(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimConnectionState(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = edgeShim;

      edgeShim.shimGetUserMedia(window);
      edgeShim.shimGetDisplayMedia(window);
      edgeShim.shimPeerConnection(window);
      edgeShim.shimReplaceTrack(window);

      // the edge shim implements the full RTCIceCandidate object.

      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;

      safariShim.shimRTCIceServerUrls(window);
      safariShim.shimCreateOfferLegacy(window);
      safariShim.shimCallbacksAPI(window);
      safariShim.shimLocalStreamsAPI(window);
      safariShim.shimRemoteStreamsAPI(window);
      safariShim.shimTrackEventTransceiver(window);
      safariShim.shimGetUserMedia(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      commonShim.removeAllowExtmapMixed(window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}

// Browser shims.

},{"./chrome/chrome_shim":3,"./common_shim":6,"./edge/edge_shim":7,"./firefox/firefox_shim":11,"./safari/safari_shim":14,"./utils":15}],3:[function(require,module,exports){

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _getusermedia = require('./getusermedia');

Object.defineProperty(exports, 'shimGetUserMedia', {
  enumerable: true,
  get: function get() {
    return _getusermedia.shimGetUserMedia;
  }
});

var _getdisplaymedia = require('./getdisplaymedia');

Object.defineProperty(exports, 'shimGetDisplayMedia', {
  enumerable: true,
  get: function get() {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimMediaStream = shimMediaStream;
exports.shimOnTrack = shimOnTrack;
exports.shimGetSendersWithDtmf = shimGetSendersWithDtmf;
exports.shimGetStats = shimGetStats;
exports.shimSenderReceiverGetStats = shimSenderReceiverGetStats;
exports.shimAddTrackRemoveTrackWithNative = shimAddTrackRemoveTrackWithNative;
exports.shimAddTrackRemoveTrack = shimAddTrackRemoveTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.fixNegotiationNeeded = fixNegotiationNeeded;

var _utils = require('../utils.js');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get: function get() {
        return this._ontrack;
      },
      set: function set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },

      enumerable: true,
      configurable: true
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var _this = this;

      if (!this._ontrackpoly) {
        this._ontrackpoly = function (e) {
          // onaddstream does not fire when a track is added to an existing
          // stream. But stream.onaddtrack is implemented so we use that.
          e.stream.addEventListener('addtrack', function (te) {
            var receiver = void 0;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === te.track.id;
              });
            } else {
              receiver = { track: te.track };
            }

            var event = new Event('track');
            event.track = te.track;
            event.receiver = receiver;
            event.transceiver = { receiver: receiver };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
          e.stream.getTracks().forEach(function (track) {
            var receiver = void 0;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === track.id;
              });
            } else {
              receiver = { track: track };
            }
            var event = new Event('track');
            event.track = track;
            event.receiver = receiver;
            event.transceiver = { receiver: receiver };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
        };
        this.addEventListener('addstream', this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver', { value: { receiver: e.receiver } });
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
    var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
      return {
        track: track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        var sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };

      var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        var idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this2 = this;

      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(function (track) {
        _this2._senders.push(shimSenderWithDtmf(_this2, track));
      });
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this3 = this;

      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);

      stream.getTracks().forEach(function (track) {
        var sender = _this3._senders.find(function (s) {
          return s.track === track;
        });
        if (sender) {
          // remove sender
          _this3._senders.splice(_this3._senders.indexOf(sender), 1);
        }
      });
    };
  } else if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this4 = this;

      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this4;
      });
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get: function get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var _this5 = this;

    var _arguments = Array.prototype.slice.call(arguments),
        selector = _arguments[0],
        onSucc = _arguments[1],
        onErr = _arguments[2];

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.


    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    var fixChromeStats_ = function fixChromeStats_(response) {
      var standardReport = {};
      var reports = response.result();
      reports.forEach(function (report) {
        var standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(function (name) {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    var makeMapStats = function makeMapStats(stats) {
      return new Map(Object.keys(stats).map(function (key) {
        return [key, stats[key]];
      }));
    };

    if (arguments.length >= 2) {
      var successCallbackWrapper_ = function successCallbackWrapper_(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_, selector]);
    }

    // promise-support
    return new Promise(function (resolve, reject) {
      origGetStats.apply(_this5, [function (response) {
        resolve(makeMapStats(fixChromeStats_(response)));
      }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var _this6 = this;

        var senders = origGetSenders.apply(this, []);
        senders.forEach(function (sender) {
          return sender._pc = _this6;
        });
        return senders;
      };
    }

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      var sender = this;
      return this._pc.getStats().then(function (result) {
        return (
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          utils.filterStats(result, sender.track, true)
        );
      });
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var _this7 = this;

        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(function (receiver) {
          return receiver._pc = _this7;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      var receiver = this;
      return this._pc.getStats().then(function (result) {
        return utils.filterStats(result, receiver.track, false);
      });
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
      var track = arguments[0];
      var sender = void 0;
      var receiver = void 0;
      var err = void 0;
      this.getSenders().forEach(function (s) {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(function (r) {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this8 = this;

    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map(function (streamId) {
      return _this8._shimmedLocalStreams[streamId][0];
    });
  };

  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    var sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };

  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this9 = this;

    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this9.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    var existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    var newSenders = this.getSenders().filter(function (newSender) {
      return existingSenders.indexOf(newSender) === -1;
    });
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };

  var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this10 = this;

    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach(function (streamId) {
        var idx = _this10._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          _this10._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (_this10._shimmedLocalStreams[streamId].length === 1) {
          delete _this10._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrack(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var browserDetails = utils.detectBrowser(window);
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this11 = this;

    var nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map(function (stream) {
      return _this11._reverseStreams[stream.id];
    });
  };

  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this12 = this;

    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this12.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      var newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };

  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    var _this13 = this;

    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    var streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find(function (t) {
      return t === track;
    })) {
      // this is not fully correct but all we can manage without
      // [[associated MediaStreams]] internal slot.
      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
    }

    var alreadyExists = this.getSenders().find(function (s) {
      return s.track === track;
    });
    if (alreadyExists) {
      throw new DOMException('Track already exists.', 'InvalidAccessError');
    }

    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    var oldStream = this._streams[stream.id];
    if (oldStream) {
      // this is using odd Chrome behaviour, use with caution:
      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
      // Note: we rely on the high-level addTrack/dtmf shim to
      // create the sender with a dtmf sender.
      oldStream.addTrack(track);

      // Trigger ONN async.
      Promise.resolve().then(function () {
        _this13.dispatchEvent(new Event('negotiationneeded'));
      });
    } else {
      var newStream = new window.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find(function (s) {
      return s.track === track;
    });
  };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function (method) {
    var nativeMethod = window.RTCPeerConnection.prototype[method];
    var methodObj = _defineProperty({}, method, function () {
      var _this14 = this;

      var args = arguments;
      var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [function (description) {
          var desc = replaceInternalStreamId(_this14, description);
          args[0].apply(null, [desc]);
        }, function (err) {
          if (args[1]) {
            args[1].apply(null, err);
          }
        }, arguments[2]]);
      }
      return nativeMethod.apply(this, arguments).then(function (description) {
        return replaceInternalStreamId(_this14, description);
      });
    });
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
    get: function get() {
      var description = origLocalDescription.get.apply(this);
      if (description.type === '') {
        return description;
      }
      return replaceInternalStreamId(this, description);
    }
  });

  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this15 = this;

    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    // We can not yet check for sender instanceof RTCRtpSender
    // since we shim RTPSender. So we check if sender._pc is set.
    if (!sender._pc) {
      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
    }
    var isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
    }

    // Search for the native stream the senders track belongs to.
    this._streams = this._streams || {};
    var stream = void 0;
    Object.keys(this._streams).forEach(function (streamid) {
      var hasTrack = _this15._streams[streamid].getTracks().find(function (track) {
        return sender.track === track;
      });
      if (hasTrack) {
        stream = _this15._streams[streamid];
      }
    });

    if (stream) {
      if (stream.getTracks().length === 1) {
        // if this is the last track of the stream, remove the stream. This
        // takes care of any shimmed _senders.
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        // relying on the same odd chrome behaviour as above.
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event('negotiationneeded'));
    }
  };
}

function shimPeerConnection(window) {
  var browserDetails = utils.detectBrowser(window);

  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }

  // support for addIceCandidate(null or undefined)
  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    // Firefox 68+ emits and processes {candidate: "", ...}, ignore
    // in older versions. Native support planned for Chrome M77.
    if (browserDetails.version < 78 && arguments[0] && arguments[0].candidate === '') {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}

function fixNegotiationNeeded(window) {
  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function (e) {
    var pc = e.target;
    if (pc.signalingState !== 'stable') {
      return;
    }
    return e;
  });
}

},{"../utils.js":15,"./getdisplaymedia":4,"./getusermedia":5}],4:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then(function (sourceId) {
      var widthSpecified = constraints.video && constraints.video.width;
      var heightSpecified = constraints.video && constraints.video.height;
      var frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: 'desktop',
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}

},{}],5:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.shimGetUserMedia = shimGetUserMedia;

var _utils = require('../utils.js');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var logging = utils.log;

function shimGetUserMedia(window) {
  var navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  var browserDetails = utils.detectBrowser(window);

  var constraintsToChrome_ = function constraintsToChrome_(c) {
    if ((typeof c === 'undefined' ? 'undefined' : _typeof(c)) !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function (key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = _typeof(c[key]) === 'object' ? c[key] : { ideal: c[key] };
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function oldname_(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === 'deviceId' ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function (mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var shimConstraints_ = function shimConstraints_(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && _typeof(constraints.audio) === 'object') {
      var remap = function remap(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && _typeof(constraints.video) === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && ((typeof face === 'undefined' ? 'undefined' : _typeof(face)) === 'object' ? face : { ideal: face });
      var getSupportedFacingModeLies = browserDetails.version < 66;

      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches = void 0;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices().then(function (devices) {
            devices = devices.filter(function (d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function (d) {
              return matches.some(function (match) {
                return d.label.toLowerCase().includes(match);
              });
            });
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? { exact: dev.deviceId } : { ideal: dev.deviceId };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  var shimError_ = function shimError_(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function (c) {
      navigator.webkitGetUserMedia(c, onSuccess, function (e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (cs) {
      return shimConstraints_(cs, function (c) {
        return origGetUserMedia(c).then(function (stream) {
          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function (track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function (e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }
}

},{"../utils.js":15}],6:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.shimRTCIceCandidate = shimRTCIceCandidate;
exports.shimMaxMessageSize = shimMaxMessageSize;
exports.shimSendThrowTypeError = shimSendThrowTypeError;
exports.shimConnectionState = shimConnectionState;
exports.removeAllowExtmapMixed = removeAllowExtmapMixed;

var _sdp = require('sdp');

var _sdp2 = _interopRequireDefault(_sdp);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
    return;
  }

  var NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if ((typeof args === 'undefined' ? 'undefined' : _typeof(args)) === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      var nativeCandidate = new NativeRTCIceCandidate(args);
      var parsedCandidate = _sdp2.default.parseCandidate(args.candidate);
      var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var browserDetails = utils.detectBrowser(window);

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get: function get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  var sctpInDescription = function sctpInDescription(description) {
    if (!description || !description.sdp) {
      return false;
    }
    var sections = _sdp2.default.splitSections(description.sdp);
    sections.shift();
    return sections.some(function (mediaSection) {
      var mLine = _sdp2.default.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
    // TODO: Is there a better solution for detecting Firefox?
    var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    var version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    var canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    var maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    var match = _sdp2.default.matchPrefix(description.sdp, 'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    // Chrome decided to not expose .sctp in plan-b mode.
    // As usual, adapter.js has to do an 'ugly worakaround'
    // to cover up the mess.
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
      var _getConfiguration = this.getConfiguration(),
          sdpSemantics = _getConfiguration.sdpSemantics;

      if (sdpSemantics === 'plan-b') {
        Object.defineProperty(this, 'sctp', {
          get: function get() {
            return typeof this._sctp === 'undefined' ? null : this._sctp;
          },

          enumerable: true,
          configurable: true
        });
      }
    }

    if (sctpInDescription(arguments[0])) {
      // Check if the remote is FF.
      var isFirefox = getRemoteFirefoxVersion(arguments[0]);

      // Get the maximum message size the local peer is capable of sending
      var canSendMMS = getCanSendMaxMessageSize(isFirefox);

      // Get the maximum message size of the remote peer.
      var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

      // Determine final maximum message size
      var maxMessageSize = void 0;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }

      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
      // attribute.
      var sctp = {};
      Object.defineProperty(sctp, 'maxMessageSize', {
        get: function get() {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }

    return origSetRemoteDescription.apply(this, arguments);
  };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    var origDataChannelSend = dc.send;
    dc.send = function send() {
      var data = arguments[0];
      var length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    var dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  utils.wrapPeerConnectionEvent(window, 'datachannel', function (e) {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}

/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get: function get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },

    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get: function get() {
      return this._onconnectionstatechange || null;
    },
    set: function set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
      }
    },

    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach(function (method) {
    var origMethod = proto[method];
    proto[method] = function () {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = function (e) {
          var pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            var newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeAllowExtmapMixed(window) {
  /* remove a=extmap-allow-mixed for Chrome < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  var browserDetails = utils.detectBrowser(window);
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      desc.sdp = desc.sdp.split('\n').filter(function (line) {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
    }
    return nativeSRD.apply(this, arguments);
  };
}

},{"./utils":15,"sdp":17}],7:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

var _getusermedia = require('./getusermedia');

Object.defineProperty(exports, 'shimGetUserMedia', {
  enumerable: true,
  get: function get() {
    return _getusermedia.shimGetUserMedia;
  }
});

var _getdisplaymedia = require('./getdisplaymedia');

Object.defineProperty(exports, 'shimGetDisplayMedia', {
  enumerable: true,
  get: function get() {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimPeerConnection = shimPeerConnection;
exports.shimReplaceTrack = shimReplaceTrack;

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _filtericeservers = require('./filtericeservers');

var _rtcpeerconnectionShim = require('rtcpeerconnection-shim');

var _rtcpeerconnectionShim2 = _interopRequireDefault(_rtcpeerconnectionShim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function shimPeerConnection(window) {
  var browserDetails = utils.detectBrowser(window);

  if (window.RTCIceGatherer) {
    if (!window.RTCIceCandidate) {
      window.RTCIceCandidate = function RTCIceCandidate(args) {
        return args;
      };
    }
    if (!window.RTCSessionDescription) {
      window.RTCSessionDescription = function RTCSessionDescription(args) {
        return args;
      };
    }
    // this adds an additional event listener to MediaStrackTrack that signals
    // when a tracks enabled property was changed. Workaround for a bug in
    // addStream, see below. No longer required in 15025+
    if (browserDetails.version < 15025) {
      var origMSTEnabled = Object.getOwnPropertyDescriptor(window.MediaStreamTrack.prototype, 'enabled');
      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
        set: function set(value) {
          origMSTEnabled.set.call(this, value);
          var ev = new Event('enabled');
          ev.enabled = value;
          this.dispatchEvent(ev);
        }
      });
    }
  }

  // ORTC defines the DTMF sender a bit different.
  // https://github.com/w3c/ortc/issues/714
  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get: function get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = new window.RTCDtmfSender(this);
          } else if (this.track.kind === 'video') {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
  // Edge currently only implements the RTCDtmfSender, not the
  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
  if (window.RTCDtmfSender && !window.RTCDTMFSender) {
    window.RTCDTMFSender = window.RTCDtmfSender;
  }

  var RTCPeerConnectionShim = (0, _rtcpeerconnectionShim2.default)(window, browserDetails.version);
  window.RTCPeerConnection = function RTCPeerConnection(config) {
    if (config && config.iceServers) {
      config.iceServers = (0, _filtericeservers.filterIceServers)(config.iceServers, browserDetails.version);
      utils.log('ICE servers after filtering:', config.iceServers);
    }
    return new RTCPeerConnectionShim(config);
  };
  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
}

function shimReplaceTrack(window) {
  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
  if (window.RTCRtpSender && !('replaceTrack' in window.RTCRtpSender.prototype)) {
    window.RTCRtpSender.prototype.replaceTrack = window.RTCRtpSender.prototype.setTrack;
  }
}

},{"../utils":15,"./filtericeservers":8,"./getdisplaymedia":9,"./getusermedia":10,"rtcpeerconnection-shim":16}],8:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterIceServers = filterIceServers;

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function (server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function (url) {
        // filter STUN unconditionally.
        if (url.indexOf('stun:') === 0) {
          return false;
        }

        var validTurn = url.startsWith('turn') && !url.startsWith('turn:[') && url.includes('transport=udp');
        if (validTurn && !hasTurn) {
          hasTurn = true;
          return true;
        }
        return validTurn && !hasTurn;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

},{"../utils":15}],9:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window) {
  if (!('getDisplayMedia' in window.navigator)) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = window.navigator.getDisplayMedia.bind(window.navigator);
}

},{}],10:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetUserMedia = shimGetUserMedia;
function shimGetUserMedia(window) {
  var navigator = window && window.navigator;

  var shimError_ = function shimError_(e) {
    return {
      name: { PermissionDeniedError: 'NotAllowedError' }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString: function toString() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function (c) {
    return origGetUserMedia(c).catch(function (e) {
      return Promise.reject(shimError_(e));
    });
  };
}

},{}],11:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _getusermedia = require('./getusermedia');

Object.defineProperty(exports, 'shimGetUserMedia', {
  enumerable: true,
  get: function get() {
    return _getusermedia.shimGetUserMedia;
  }
});

var _getdisplaymedia = require('./getdisplaymedia');

Object.defineProperty(exports, 'shimGetDisplayMedia', {
  enumerable: true,
  get: function get() {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimOnTrack = shimOnTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.shimSenderGetStats = shimSenderGetStats;
exports.shimReceiverGetStats = shimReceiverGetStats;
exports.shimRemoveStream = shimRemoveStream;
exports.shimRTCDataChannel = shimRTCDataChannel;
exports.shimAddTransceiver = shimAddTransceiver;
exports.shimCreateOffer = shimCreateOffer;
exports.shimCreateAnswer = shimCreateAnswer;

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function shimOnTrack(window) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function get() {
        return { receiver: this.receiver };
      }
    });
  }
}

function shimPeerConnection(window) {
  var browserDetails = utils.detectBrowser(window);

  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }

  // support for addIceCandidate(null or undefined)
  // as well as ignoring {sdpMid, candidate: ""}
  if (browserDetails.version < 68) {
    var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      if (arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  var modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var _arguments = Array.prototype.slice.call(arguments),
        selector = _arguments[0],
        onSucc = _arguments[1],
        onErr = _arguments[2];

    return nativeGetStats.apply(this, [selector || null]).then(function (stats) {
      if (browserDetails.version < 53 && !onSucc) {
        // Shim only promise getStats with spec-hyphens in type names
        // Leave callback version alone; misc old uses of forEach before Map
        try {
          stats.forEach(function (stat) {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e) {
          if (e.name !== 'TypeError') {
            throw e;
          }
          // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
          stats.forEach(function (stat, i) {
            stats.set(i, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this = this;

      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this;
      });
      return senders;
    };
  }

  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      var sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      var _this2 = this;

      var receivers = origGetReceivers.apply(this, []);
      receivers.forEach(function (receiver) {
        return receiver._pc = _this2;
      });
      return receivers;
    };
  }
  utils.wrapPeerConnectionEvent(window, 'track', function (e) {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    var _this3 = this;

    utils.deprecated('removeStream', 'removeTrack');
    this.getSenders().forEach(function (sender) {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        _this3.removeTrack(sender);
      }
    });
  };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      var initParameters = arguments[1];
      var shouldPerformCheck = initParameters && 'sendEncodings' in initParameters;
      if (shouldPerformCheck) {
        // If sendEncodings params are provided, validate grammar
        initParameters.sendEncodings.forEach(function (encodingParam) {
          if ('rid' in encodingParam) {
            var ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError('Invalid RID value provided.');
            }
          }
          if ('scaleResolutionDownBy' in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
              throw new RangeError('scale_resolution_down_by must be >= 1.0');
            }
          }
          if ('maxFramerate' in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError('max_framerate must be >= 0.0');
            }
          }
        });
      }
      var transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        // Check if the init options were applied. If not we do this in an
        // asynchronous way and save the promise reference in a global object.
        // This is an ugly hack, but at the same time is way more robust than
        // checking the sender parameters before and after the createOffer
        // Also note that after the createoffer we are not 100% sure that
        // the params were asynchronously applied so we might miss the
        // opportunity to recreate offer.
        var sender = transceiver.sender;

        var params = sender.getParameters();
        if (!('encodings' in params)) {
          params.encodings = initParameters.sendEncodings;
          this.setParametersPromises.push(sender.setParameters(params).catch(function () {}));
        }
      }
      return transceiver;
    };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    var _this4 = this,
        _arguments2 = arguments;

    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateOffer.apply(_this4, _arguments2);
      }).finally(function () {
        _this4.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    var _this5 = this,
        _arguments3 = arguments;

    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateAnswer.apply(_this5, _arguments3);
      }).finally(function () {
        _this5.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}

},{"../utils":15,"./getdisplaymedia":12,"./getusermedia":13}],12:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
      err.name = 'NotFoundError';
      // from https://heycam.github.io/webidl/#idl-DOMException-error-names
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = { mediaSource: preferredMediaSource };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window.navigator.mediaDevices.getUserMedia(constraints);
  };
}

},{}],13:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.shimGetUserMedia = shimGetUserMedia;

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function shimGetUserMedia(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function (constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function remap(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (c) {
      if ((typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object' && _typeof(c.audio) === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function () {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function (c) {
        if (this.kind === 'audio' && (typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}

},{"../utils":15}],14:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.shimLocalStreamsAPI = shimLocalStreamsAPI;
exports.shimRemoteStreamsAPI = shimRemoteStreamsAPI;
exports.shimCallbacksAPI = shimCallbacksAPI;
exports.shimGetUserMedia = shimGetUserMedia;
exports.shimConstraints = shimConstraints;
exports.shimRTCIceServerUrls = shimRTCIceServerUrls;
exports.shimTrackEventTransceiver = shimTrackEventTransceiver;
exports.shimCreateOfferLegacy = shimCreateOfferLegacy;

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function shimLocalStreamsAPI(window) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    var _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this = this;

      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
      stream.getVideoTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
    };

    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
      var stream = arguments[1];
      if (stream) {
        if (!this._localStreams) {
          this._localStreams = [stream];
        } else if (!this._localStreams.includes(stream)) {
          this._localStreams.push(stream);
        }
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this2 = this;

      if (!this._localStreams) {
        this._localStreams = [];
      }
      var index = this._localStreams.indexOf(stream);
      if (index === -1) {
        return;
      }
      this._localStreams.splice(index, 1);
      var tracks = stream.getTracks();
      this.getSenders().forEach(function (sender) {
        if (tracks.includes(sender.track)) {
          _this2.removeTrack(sender);
        }
      });
    };
  }
}

function shimRemoteStreamsAPI(window) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get: function get() {
        return this._onaddstream;
      },
      set: function set(f) {
        var _this3 = this;

        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!_this3._remoteStreams) {
              _this3._remoteStreams = [];
            }
            if (_this3._remoteStreams.includes(stream)) {
              return;
            }
            _this3._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            _this3.dispatchEvent(event);
          });
        });
      }
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var pc = this;
      if (!this._onaddstreampoly) {
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }
            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}

function shimCallbacksAPI(window) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  var prototype = window.RTCPeerConnection.prototype;
  var origCreateOffer = prototype.createOffer;
  var origCreateAnswer = prototype.createAnswer;
  var setLocalDescription = prototype.setLocalDescription;
  var setRemoteDescription = prototype.setRemoteDescription;
  var addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  var withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function withCallback(candidate, successCallback, failureCallback) {
    var promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  var navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    var mediaDevices = navigator.mediaDevices;
    var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = function (constraints) {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({}, constraints, { video: utils.compactObject(constraints.video) });
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  var OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      var newIceServers = [];
      for (var i = 0; i < pcConfig.iceServers.length; i++) {
        var server = pcConfig.iceServers[i];
        if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
          utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in window.RTCPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get: function get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function get() {
        return { receiver: this.receiver };
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      var audioTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'audio';
      });
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === 'sendrecv') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('sendonly');
          } else {
            audioTransceiver.direction = 'sendonly';
          }
        } else if (audioTransceiver.direction === 'recvonly') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('inactive');
          } else {
            audioTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver('audio');
      }

      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      var videoTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'video';
      });
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === 'sendrecv') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('sendonly');
          } else {
            videoTransceiver.direction = 'sendonly';
          }
        } else if (videoTransceiver.direction === 'recvonly') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('inactive');
          } else {
            videoTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver('video');
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}

},{"../utils":15}],15:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.extractVersion = extractVersion;
exports.wrapPeerConnectionEvent = wrapPeerConnectionEvent;
exports.disableLog = disableLog;
exports.disableWarnings = disableWarnings;
exports.log = log;
exports.deprecated = deprecated;
exports.detectBrowser = detectBrowser;
exports.compactObject = compactObject;
exports.walkStats = walkStats;
exports.filterStats = filterStats;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function wrappedCallback(e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        cb(modifiedEvent);
      }
    };
    this._eventMap = this._eventMap || {};
    this._eventMap[cb] = wrappedCallback;
    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
  };

  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[cb]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[cb];
    delete this._eventMap[cb];
    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function get() {
      return this['_on' + eventNameToWrap];
    },
    set: function set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
      }
    },

    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + (typeof bool === 'undefined' ? 'undefined' : _typeof(bool)) + '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + (typeof bool === 'undefined' ? 'undefined' : _typeof(bool)) + '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  var navigator = window.navigator;

  // Returned result object.

  var result = { browser: null, version: null };

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection && !window.RTCIceGatherer) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
    // Edge.
    result.browser = 'edge';
    result.version = extractVersion(navigator.userAgent, /Edge\/(\d+).(\d+)$/, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function (accumulator, key) {
    var isObj = isObject(data[key]);
    var value = isObj ? compactObject(data[key]) : data[key];
    var isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, _defineProperty({}, key, value));
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function (name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function (id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function (value) {
    if (value.type === 'track' && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function (trackStat) {
    result.forEach(function (stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

},{}],16:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};

},{"sdp":17}],17:[function(require,module,exports){
/* eslint-env node */
'use strict';

// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};
// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.splitLines(mediaSection);
  // Search in session part, too.
  lines = lines.concat(SDPUtils.splitLines(sessionpart));
  var iceParameters = {
    usernameFragment: lines.filter(function(line) {
      return line.indexOf('a=ice-ufrag:') === 0;
    })[0].substr(12),
    password: lines.filter(function(line) {
      return line.indexOf('a=ice-pwd:') === 0;
    })[0].substr(10)
  };
  return iceParameters;
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (typeof module === 'object') {
  module.exports = SDPUtils;
}

},{}]},{},[1])(1)
});
/*
 * JsSIP v3.9.0
 * the Javascript SIP library
 * Copyright: 2012-2022 
 * Homepage: https://jssip.net
 * License: MIT
 */

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).JsSIP=e()}}(function(){return function(){return function e(t,n,r){function i(o,l){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!l&&a)return a(o,!0);if(s)return s(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[o]={exports:{}};t[o][0].call(c.exports,function(e){return i(t[o][1][e]||e)},c,c.exports,e,t,n,r)}return n[o].exports}for(var s="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}}()({1:[function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=e("./Utils"),o=e("./Constants"),l=e("./Grammar"),a=e("./URI"),u=e("./Socket"),c=e("./Exceptions");n.settings={authorization_user:null,password:null,realm:null,ha1:null,authorization_jwt:null,display_name:null,uri:null,contact_uri:null,instance_id:null,use_preloaded_route:!1,session_timers:!0,session_timers_refresh_method:o.UPDATE,session_timers_force_refresher:!1,no_answer_timeout:60,register:!0,register_expires:600,registrar_server:null,sockets:null,connection_recovery_max_interval:o.CONNECTION_RECOVERY_MAX_INTERVAL,connection_recovery_min_interval:o.CONNECTION_RECOVERY_MIN_INTERVAL,via_host:"".concat(s.createRandomToken(12),".invalid")};var h={mandatory:{sockets:function(e){var t=[];if(u.isSocket(e))t.push({socket:e});else{if(!Array.isArray(e)||!e.length)return;var n,i=r(e);try{for(i.s();!(n=i.n()).done;){var s=n.value;Object.prototype.hasOwnProperty.call(s,"socket")&&u.isSocket(s.socket)?t.push(s):u.isSocket(s)&&t.push({socket:s})}}catch(e){i.e(e)}finally{i.f()}}return t},uri:function(e){/^sip:/i.test(e)||(e="".concat(o.SIP,":").concat(e));var t=a.parse(e);return t&&t.user?t:void 0}},optional:{authorization_user:function(e){return-1===l.parse('"'.concat(e,'"'),"quoted_string")?void 0:e},authorization_jwt:function(e){if("string"==typeof e)return e},user_agent:function(e){if("string"==typeof e)return e},connection_recovery_max_interval:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},connection_recovery_min_interval:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},contact_uri:function(e){if("string"==typeof e){var t=l.parse(e,"SIP_URI");if(-1!==t)return t}},display_name:function(e){return e},instance_id:function(e){return/^uuid:/i.test(e)&&(e=e.substr(5)),-1===l.parse(e,"uuid")?void 0:e},no_answer_timeout:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},session_timers:function(e){if("boolean"==typeof e)return e},session_timers_refresh_method:function(e){if("string"==typeof e&&((e=e.toUpperCase())===o.INVITE||e===o.UPDATE))return e},session_timers_force_refresher:function(e){if("boolean"==typeof e)return e},password:function(e){return String(e)},realm:function(e){return String(e)},ha1:function(e){return String(e)},register:function(e){if("boolean"==typeof e)return e},register_expires:function(e){if(s.isDecimal(e)){var t=Number(e);if(t>0)return t}},registrar_server:function(e){/^sip:/i.test(e)||(e="".concat(o.SIP,":").concat(e));var t=a.parse(e);return t?t.user?void 0:t:void 0},use_preloaded_route:function(e){if("boolean"==typeof e)return e}}};n.load=function(e,t){for(var n in h.mandatory){if(!t.hasOwnProperty(n))throw new c.ConfigurationError(n);var r=t[n],i=h.mandatory[n](r);if(void 0===i)throw new c.ConfigurationError(n,r);e[n]=i}for(var o in h.optional)if(t.hasOwnProperty(o)){var l=t[o];if(s.isEmpty(l))continue;var a=h.optional[o](l);if(void 0===a)throw new c.ConfigurationError(o,l);e[o]=a}}},{"./Constants":2,"./Exceptions":6,"./Grammar":7,"./Socket":23,"./URI":29,"./Utils":30}],2:[function(e,t,n){"use strict";var r=e("../package.json");t.exports={USER_AGENT:"".concat(r.title," ").concat(r.version),SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",MISSING_SDP:"Missing SDP",AUTHENTICATION_ERROR:"Authentication Error",BYE:"Terminated",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",DIALOG_ERROR:"Dialog Error",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484,424],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",REFER:"REFER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",DTMF_TRANSPORT:{INFO:"INFO",RFC2833:"RFC2833"},REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",424:"Bad Location Information",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"JsSIP Internal Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},ALLOWED_METHODS:"INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY,SUBSCRIBE",ACCEPTED_BODY_TYPES:"application/sdp, application/dtmf-relay",MAX_FORWARDS:69,SESSION_EXPIRES:90,MIN_SESSION_EXPIRES:60,CONNECTION_RECOVERY_MAX_INTERVAL:30,CONNECTION_RECOVERY_MIN_INTERVAL:2}},{"../package.json":42}],3:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./Logger"),s=e("./SIPMessage"),o=e("./Constants"),l=e("./Transactions"),a=e("./Dialog/RequestSender"),u=e("./Utils"),c=new i("Dialog"),h={STATUS_EARLY:1,STATUS_CONFIRMED:2};t.exports=function(){function e(t,n,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:h.STATUS_CONFIRMED;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._owner=t,this._ua=t._ua,this._uac_pending_reply=!1,this._uas_pending_reply=!1,!n.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};n instanceof s.IncomingResponse&&(i=n.status_code<200?h.STATUS_EARLY:h.STATUS_CONFIRMED);var o=n.parseHeader("contact");"UAS"===r?(this._id={call_id:n.call_id,local_tag:n.to_tag,remote_tag:n.from_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=i,this._remote_seqnum=n.cseq,this._local_uri=n.parseHeader("to").uri,this._remote_uri=n.parseHeader("from").uri,this._remote_target=o.uri,this._route_set=n.getHeaders("record-route"),this._ack_seqnum=this._remote_seqnum):"UAC"===r&&(this._id={call_id:n.call_id,local_tag:n.from_tag,remote_tag:n.to_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this._state=i,this._local_seqnum=n.cseq,this._local_uri=n.parseHeader("from").uri,this._remote_uri=n.parseHeader("to").uri,this._remote_target=o.uri,this._route_set=n.getHeaders("record-route").reverse(),this._ack_seqnum=null),this._ua.newDialog(this),c.debug("new ".concat(r," dialog created with status ").concat(this._state===h.STATUS_EARLY?"EARLY":"CONFIRMED"))}var t,n,i;return t=e,i=[{key:"C",get:function(){return h}}],(n=[{key:"id",get:function(){return this._id}},{key:"local_seqnum",get:function(){return this._local_seqnum},set:function(e){this._local_seqnum=e}},{key:"owner",get:function(){return this._owner}},{key:"uac_pending_reply",get:function(){return this._uac_pending_reply},set:function(e){this._uac_pending_reply=e}},{key:"uas_pending_reply",get:function(){return this._uas_pending_reply}},{key:"update",value:function(e,t){this._state=h.STATUS_CONFIRMED,c.debug("dialog ".concat(this._id.toString(),"  changed to CONFIRMED state")),"UAC"===t&&(this._route_set=e.getHeaders("record-route").reverse())}},{key:"terminate",value:function(){c.debug("dialog ".concat(this._id.toString()," deleted")),this._ua.destroyDialog(this)}},{key:"sendRequest",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=u.cloneArray(n.extraHeaders),i=u.cloneObject(n.eventHandlers),s=n.body||null,o=this._createRequest(e,r,s);return i.onAuthenticated=function(){t._local_seqnum+=1},new a(this,o,i).send(),o}},{key:"receiveRequest",value:function(e){this._checkInDialogRequest(e)&&(e.method===o.ACK&&null!==this._ack_seqnum?this._ack_seqnum=null:e.method===o.INVITE&&(this._ack_seqnum=e.cseq),this._owner.receiveRequest(e))}},{key:"_createRequest",value:function(e,t,n){t=u.cloneArray(t),this._local_seqnum||(this._local_seqnum=Math.floor(1e4*Math.random()));var r=e===o.CANCEL||e===o.ACK?this._local_seqnum:this._local_seqnum+=1;return new s.OutgoingRequest(e,this._remote_target,this._ua,{cseq:r,call_id:this._id.call_id,from_uri:this._local_uri,from_tag:this._id.local_tag,to_uri:this._remote_uri,to_tag:this._id.remote_tag,route_set:this._route_set},t,n)}},{key:"_checkInDialogRequest",value:function(e){var t=this;if(this._remote_seqnum)if(e.cseq<this._remote_seqnum){if(e.method!==o.ACK)return e.reply(500),!1;if(null===this._ack_seqnum||e.cseq!==this._ack_seqnum)return!1}else e.cseq>this._remote_seqnum&&(this._remote_seqnum=e.cseq);else this._remote_seqnum=e.cseq;if(e.method===o.INVITE||e.method===o.UPDATE&&e.body){if(!0===this._uac_pending_reply)e.reply(491);else{if(!0===this._uas_pending_reply){var n=1+(10*Math.random()|0);return e.reply(500,null,["Retry-After:".concat(n)]),!1}this._uas_pending_reply=!0;e.server_transaction.on("stateChanged",function n(){e.server_transaction.state!==l.C.STATUS_ACCEPTED&&e.server_transaction.state!==l.C.STATUS_COMPLETED&&e.server_transaction.state!==l.C.STATUS_TERMINATED||(e.server_transaction.removeListener("stateChanged",n),t._uas_pending_reply=!1)})}e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===l.C.STATUS_ACCEPTED&&(t._remote_target=e.parseHeader("contact").uri)})}else e.method===o.NOTIFY&&e.hasHeader("contact")&&e.server_transaction.on("stateChanged",function(){e.server_transaction.state===l.C.STATUS_COMPLETED&&(t._remote_target=e.parseHeader("contact").uri)});return!0}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"./Constants":2,"./Dialog/RequestSender":4,"./Logger":9,"./SIPMessage":22,"./Transactions":26,"./Utils":30}],4:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("../Constants"),s=e("../Transactions"),o=e("../RTCSession"),l=e("../RequestSender"),a={onRequestTimeout:function(){},onTransportError:function(){},onSuccessResponse:function(){},onErrorResponse:function(){},onAuthenticated:function(){},onDialogError:function(){}};t.exports=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._dialog=t,this._ua=t._ua,this._request=n,this._eventHandlers=r,this._reattempt=!1,this._reattemptTimer=null,a)Object.prototype.hasOwnProperty.call(a,i)&&(this._eventHandlers[i]||(this._eventHandlers[i]=a[i]))}var t,n,u;return t=e,(n=[{key:"request",get:function(){return this._request}},{key:"send",value:function(){var e=this,t=new l(this._ua,this._request,{onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onAuthenticated:function(t){e._eventHandlers.onAuthenticated(t)},onReceiveResponse:function(t){e._receiveResponse(t)}});if(t.send(),(this._request.method===i.INVITE||this._request.method===i.UPDATE&&this._request.body)&&t.clientTransaction.state!==s.C.STATUS_TERMINATED){this._dialog.uac_pending_reply=!0;t.clientTransaction.on("stateChanged",function n(){t.clientTransaction.state!==s.C.STATUS_ACCEPTED&&t.clientTransaction.state!==s.C.STATUS_COMPLETED&&t.clientTransaction.state!==s.C.STATUS_TERMINATED||(t.clientTransaction.removeListener("stateChanged",n),e._dialog.uac_pending_reply=!1)})}}},{key:"_receiveResponse",value:function(e){var t=this;408===e.status_code||481===e.status_code?this._eventHandlers.onDialogError(e):e.method===i.INVITE&&491===e.status_code?this._reattempt?e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e):(this._request.cseq=this._dialog.local_seqnum+=1,this._reattemptTimer=setTimeout(function(){t._dialog.owner.status!==o.C.STATUS_TERMINATED&&(t._reattempt=!0,t._request_sender.send())},1e3)):e.status_code>=200&&e.status_code<300?this._eventHandlers.onSuccessResponse(e):e.status_code>=300&&this._eventHandlers.onErrorResponse(e)}}])&&r(t.prototype,n),u&&r(t,u),e}()},{"../Constants":2,"../RTCSession":15,"../RequestSender":21,"../Transactions":26}],5:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./Logger"),s=e("./Utils"),o=new i("DigestAuthentication");t.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._credentials=t,this._cnonce=null,this._nc=0,this._ncHex="00000000",this._algorithm=null,this._realm=null,this._nonce=null,this._opaque=null,this._stale=null,this._qop=null,this._method=null,this._uri=null,this._ha1=null,this._response=null}var t,n,i;return t=e,(n=[{key:"get",value:function(e){switch(e){case"realm":return this._realm;case"ha1":return this._ha1;default:return void o.warn('get() | cannot get "%s" parameter',e)}}},{key:"authenticate",value:function(e,t){var n=e.method,r=e.ruri,i=e.body,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(this._algorithm=t.algorithm,this._realm=t.realm,this._nonce=t.nonce,this._opaque=t.opaque,this._stale=t.stale,this._algorithm){if("MD5"!==this._algorithm)return o.warn('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this._algorithm="MD5";if(!this._nonce)return o.warn("authenticate() | challenge without Digest nonce, authentication aborted"),!1;if(!this._realm)return o.warn("authenticate() | challenge without Digest realm, authentication aborted"),!1;if(!this._credentials.password){if(!this._credentials.ha1)return o.warn("authenticate() | no plain SIP password nor ha1 provided, authentication aborted"),!1;if(this._credentials.realm!==this._realm)return o.warn('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]',this._credentials.realm,this._realm),!1}if(t.qop)if(t.qop.indexOf("auth-int")>-1)this._qop="auth-int";else{if(!(t.qop.indexOf("auth")>-1))return o.warn('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this._qop="auth"}else this._qop=null;this._method=n,this._uri=r,this._cnonce=l||s.createRandomToken(12),this._nc+=1;var a,u,c=Number(this._nc).toString(16);return this._ncHex="00000000".substr(0,8-c.length)+c,4294967296===this._nc&&(this._nc=1,this._ncHex="00000001"),this._credentials.password?this._ha1=s.calculateMD5("".concat(this._credentials.username,":").concat(this._realm,":").concat(this._credentials.password)):this._ha1=this._credentials.ha1,"auth"===this._qop?(a="".concat(this._method,":").concat(this._uri),u=s.calculateMD5(a),o.debug('authenticate() | using qop=auth [a2:"%s"]',a),this._response=s.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(this._ncHex,":").concat(this._cnonce,":auth:").concat(u))):"auth-int"===this._qop?(a="".concat(this._method,":").concat(this._uri,":").concat(s.calculateMD5(i||"")),u=s.calculateMD5(a),o.debug('authenticate() | using qop=auth-int [a2:"%s"]',a),this._response=s.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(this._ncHex,":").concat(this._cnonce,":auth-int:").concat(u))):null===this._qop&&(a="".concat(this._method,":").concat(this._uri),u=s.calculateMD5(a),o.debug('authenticate() | using qop=null [a2:"%s"]',a),this._response=s.calculateMD5("".concat(this._ha1,":").concat(this._nonce,":").concat(u))),o.debug("authenticate() | response generated"),!0}},{key:"toString",value:function(){var e=[];if(!this._response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push("algorithm=".concat(this._algorithm)),e.push('username="'.concat(this._credentials.username,'"')),e.push('realm="'.concat(this._realm,'"')),e.push('nonce="'.concat(this._nonce,'"')),e.push('uri="'.concat(this._uri,'"')),e.push('response="'.concat(this._response,'"')),this._opaque&&e.push('opaque="'.concat(this._opaque,'"')),this._qop&&(e.push("qop=".concat(this._qop)),e.push('cnonce="'.concat(this._cnonce,'"')),e.push("nc=".concat(this._ncHex))),"Digest ".concat(e.join(", "))}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"./Logger":9,"./Utils":30}],6:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function o(e){var t=u();return function(){var n,i=h(e);if(t){var s=h(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){var t="function"==typeof Map?new Map:void 0;return(l=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return a(e,arguments,h(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,e)})(e)}function a(e,t,n){return(a=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&c(i,n.prototype),i}).apply(null,arguments)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){s(n,l(Error));var t=o(n);function n(e,r){var s;return i(this,n),(s=t.call(this)).code=1,s.name="CONFIGURATION_ERROR",s.parameter=e,s.value=r,s.message=s.value?"Invalid value ".concat(JSON.stringify(s.value),' for parameter "').concat(s.parameter,'"'):"Missing parameter: ".concat(s.parameter),s}return n}(),f=function(e){s(n,l(Error));var t=o(n);function n(e){var r;return i(this,n),(r=t.call(this)).code=2,r.name="INVALID_STATE_ERROR",r.status=e,r.message="Invalid status: ".concat(e),r}return n}(),_=function(e){s(n,l(Error));var t=o(n);function n(e){var r;return i(this,n),(r=t.call(this)).code=3,r.name="NOT_SUPPORTED_ERROR",r.message=e,r}return n}(),p=function(e){s(n,l(Error));var t=o(n);function n(e){var r;return i(this,n),(r=t.call(this)).code=4,r.name="NOT_READY_ERROR",r.message=e,r}return n}();t.exports={ConfigurationError:d,InvalidStateError:f,NotSupportedError:_,NotReadyError:p}},{}],7:[function(e,t,n){"use strict";t.exports=function(){function t(e){return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}var n={parse:function(n,r){var i={CRLF:c,DIGIT:h,ALPHA:d,HEXDIG:f,WSP:_,OCTET:p,DQUOTE:m,SP:v,HTAB:g,alphanum:y,reserved:T,unreserved:b,mark:S,escaped:E,LWS:C,SWS:A,HCOLON:R,TEXT_UTF8_TRIM:w,TEXT_UTF8char:I,UTF8_NONASCII:O,UTF8_CONT:N,LHEX:function(){var e;null===(e=h())&&(/^[a-f]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[a-f]")));return e},token:k,token_nodot:U,separators:function(){var e;40===n.charCodeAt(s)?(e="(",s++):(e=null,0===o&&u('"("'));null===e&&(41===n.charCodeAt(s)?(e=")",s++):(e=null,0===o&&u('")"')),null===e&&(60===n.charCodeAt(s)?(e="<",s++):(e=null,0===o&&u('"<"')),null===e&&(62===n.charCodeAt(s)?(e=">",s++):(e=null,0===o&&u('">"')),null===e&&(64===n.charCodeAt(s)?(e="@",s++):(e=null,0===o&&u('"@"')),null===e&&(44===n.charCodeAt(s)?(e=",",s++):(e=null,0===o&&u('","')),null===e&&(59===n.charCodeAt(s)?(e=";",s++):(e=null,0===o&&u('";"')),null===e&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(92===n.charCodeAt(s)?(e="\\",s++):(e=null,0===o&&u('"\\\\"')),null===e&&null===(e=m())&&(47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"')),null===e&&(91===n.charCodeAt(s)?(e="[",s++):(e=null,0===o&&u('"["')),null===e&&(93===n.charCodeAt(s)?(e="]",s++):(e=null,0===o&&u('"]"')),null===e&&(63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null===e&&(61===n.charCodeAt(s)?(e="=",s++):(e=null,0===o&&u('"="')),null===e&&(123===n.charCodeAt(s)?(e="{",s++):(e=null,0===o&&u('"{"')),null===e&&(125===n.charCodeAt(s)?(e="}",s++):(e=null,0===o&&u('"}"')),null===e&&null===(e=v())&&(e=g()))))))))))))))));return e},word:x,STAR:D,SLASH:P,EQUAL:M,LPAREN:q,RPAREN:L,RAQUOT:H,LAQUOT:F,COMMA:j,SEMI:B,COLON:G,LDQUOT:V,RDQUOT:W,comment:function e(){var t,n,r;var i;i=s;t=q();if(null!==t){for(n=[],null===(r=Y())&&null===(r=X())&&(r=e());null!==r;)n.push(r),null===(r=Y())&&null===(r=X())&&(r=e());null!==n&&null!==(r=L())?t=[t,n,r]:(t=null,s=i)}else t=null,s=i;return t},ctext:Y,quoted_string:K,quoted_string_clean:z,qdtext:$,quoted_pair:X,SIP_URI_noparams:J,SIP_URI:Q,uri_scheme:Z,uri_scheme_sips:ee,uri_scheme_sip:te,userinfo:ne,user:re,user_unreserved:ie,password:se,hostport:oe,host:le,hostname:ae,domainlabel:ue,toplabel:ce,IPv6reference:he,IPv6address:de,h16:fe,ls32:_e,IPv4address:pe,dec_octet:me,port:ve,uri_parameters:ge,uri_parameter:ye,transport_param:Te,user_param:be,method_param:Se,ttl_param:Ee,maddr_param:Ce,lr_param:Ae,other_param:Re,pname:we,pvalue:Ie,paramchar:Oe,param_unreserved:Ne,headers:ke,header:Ue,hname:xe,hvalue:De,hnv_unreserved:Pe,Request_Response:function(){var e;null===(e=ht())&&(e=Me());return e},Request_Line:Me,Request_URI:qe,absoluteURI:Le,hier_part:He,net_path:Fe,abs_path:je,opaque_part:Be,uric:Ge,uric_no_slash:Ve,path_segments:We,segment:Ye,param:Ke,pchar:ze,scheme:$e,authority:Xe,srvr:Je,reg_name:Qe,query:Ze,SIP_Version:et,INVITEm:tt,ACKm:nt,OPTIONSm:rt,BYEm:it,CANCELm:st,REGISTERm:ot,SUBSCRIBEm:lt,NOTIFYm:at,REFERm:ut,Method:ct,Status_Line:ht,Status_Code:dt,extension_code:ft,Reason_Phrase:_t,Allow_Events:function(){var e,t,n,r,i,o;if(i=s,null!==(e=Lt())){for(t=[],o=s,null!==(n=j())&&null!==(r=Lt())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=Lt())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},Call_ID:function(){var e,t,r,i,l,a;i=s,l=s,null!==(e=x())?(a=s,64===n.charCodeAt(s)?(t="@",s++):(t=null,0===o&&u('"@"')),null!==t&&null!==(r=x())?t=[t,r]:(t=null,s=a),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=l)):(e=null,s=l);null!==e&&(c=i,e=void(jn=n.substring(s,c)));var c;null===e&&(s=i);return e},Contact:function(){var e,t,n,r,i,o,l;if(i=s,null===(e=D()))if(o=s,null!==(e=pt())){for(t=[],l=s,null!==(n=j())&&null!==(r=pt())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=j())&&null!==(r=pt())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(e=function(e){var t,n;for(n=jn.multi_header.length,t=0;t<n;t++)if(null===jn.multi_header[t].parsed){jn=null;break}jn=null!==jn?jn.multi_header:-1}());null===e&&(s=i);return e},contact_param:pt,name_addr:mt,display_name:vt,contact_params:gt,c_p_q:yt,c_p_expires:Tt,delta_seconds:bt,qvalue:St,generic_param:Et,gen_value:Ct,Content_Disposition:function(){var e,t,n,r,i,o;if(i=s,null!==(e=At())){for(t=[],o=s,null!==(n=B())&&null!==(r=Rt())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=B())&&null!==(r=Rt())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},disp_type:At,disp_param:Rt,handling_param:wt,Content_Encoding:function(){var e,t,n,r,i,o;if(i=s,null!==(e=k())){for(t=[],o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},Content_Length:function(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(jn=parseInt(e.join(""))));null===e&&(s=n);return e},Content_Type:function(){var e,t;t=s,null!==(e=It())&&(r=t,e=void(jn=n.substring(s,r)));var r;null===e&&(s=t);return e},media_type:It,m_type:Ot,discrete_type:Nt,composite_type:kt,extension_token:Ut,x_token:xt,m_subtype:Dt,m_parameter:Pt,m_value:Mt,CSeq:function(){var e,t,n,r;r=s,null!==(e=qt())&&null!==(t=C())&&null!==(n=ct())?e=[e,t,n]:(e=null,s=r);return e},CSeq_value:qt,Expires:function(){var e,t;t=s,null!==(e=bt())&&(e=void(jn=e));null===e&&(s=t);return e},Event:function(){var e,t,n,r,i,o,l;if(i=s,o=s,null!==(e=Lt())){for(t=[],l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(a=e[0],e=void(jn.event=a.join("").toLowerCase()));var a;null===e&&(s=i);return e},event_type:Lt,From:function(){var e,t,n,r,i,o,l;i=s,o=s,null===(e=J())&&(e=mt());if(null!==e){for(t=[],l=s,null!==(n=B())&&null!==(r=Ht())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=Ht())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(e=function(e){var t=jn.tag;try{jn=new Fn(jn.uri,jn.display_name,jn.params),t&&jn.setParam("tag",t)}catch(e){jn=-1}}());null===e&&(s=i);return e},from_param:Ht,tag_param:Ft,Max_Forwards:function(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;null!==e&&(e=void(jn=parseInt(e.join(""))));null===e&&(s=n);return e},Min_Expires:function(){var e,t;t=s,null!==(e=bt())&&(e=void(jn=e));null===e&&(s=t);return e},Name_Addr_Header:function(){var e,t,n,r,i,o,l,a,u,c;a=s,u=s,e=[],t=vt();for(;null!==t;)e.push(t),t=vt();if(null!==e)if(null!==(t=F()))if(null!==(n=Q()))if(null!==(r=H())){for(i=[],c=s,null!==(o=B())&&null!==(l=Et())?o=[o,l]:(o=null,s=c);null!==o;)i.push(o),c=s,null!==(o=B())&&null!==(l=Et())?o=[o,l]:(o=null,s=c);null!==i?e=[e,t,n,r,i]:(e=null,s=u)}else e=null,s=u;else e=null,s=u;else e=null,s=u;else e=null,s=u;null!==e&&(e=function(e){try{jn=new Fn(jn.uri,jn.display_name,jn.params)}catch(e){jn=-1}}());null===e&&(s=a);return e},Proxy_Authenticate:function(){return jt()},challenge:jt,other_challenge:Bt,auth_param:Gt,digest_cln:Vt,realm:Wt,realm_value:Yt,domain:Kt,URI:zt,nonce:$t,nonce_value:Xt,opaque:Jt,stale:Qt,algorithm:Zt,qop_options:en,qop_value:tn,Proxy_Require:function(){var e,t,n,r,i,o;if(i=s,null!==(e=k())){for(t=[],o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},Record_Route:function(){var e,t,n,r,i,o,l;if(i=s,o=s,null!==(e=nn())){for(t=[],l=s,null!==(n=j())&&null!==(r=nn())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=j())&&null!==(r=nn())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(e=function(e){var t,n;for(n=jn.multi_header.length,t=0;t<n;t++)if(null===jn.multi_header[t].parsed){jn=null;break}jn=null!==jn?jn.multi_header:-1}());null===e&&(s=i);return e},rec_route:nn,Reason:function(){var e,t,r,i,l,a,c;l=s,a=s,"sip"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"SIP"'));null===e&&(e=k());if(null!==e){for(t=[],c=s,null!==(r=B())&&null!==(i=rn())?r=[r,i]:(r=null,s=c);null!==r;)t.push(r),c=s,null!==(r=B())&&null!==(i=rn())?r=[r,i]:(r=null,s=c);null!==t?e=[e,t]:(e=null,s=a)}else e=null,s=a;null!==e&&(e=function(e,t){if(jn.protocol=t.toLowerCase(),jn.params||(jn.params={}),jn.params.text&&'"'===jn.params.text[0]){var n=jn.params.text;jn.text=n.substring(1,n.length-1),delete jn.params.text}}(0,e[0]));null===e&&(s=l);return e},reason_param:rn,reason_cause:sn,Require:function(){var e,t,n,r,i,o;if(i=s,null!==(e=k())){for(t=[],o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},Route:function(){var e,t,n,r,i,o;if(i=s,null!==(e=on())){for(t=[],o=s,null!==(n=j())&&null!==(r=on())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=on())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},route_param:on,Subscription_State:function(){var e,t,n,r,i,o;if(i=s,null!==(e=ln())){for(t=[],o=s,null!==(n=B())&&null!==(r=an())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=B())&&null!==(r=an())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},substate_value:ln,subexp_params:an,event_reason_value:un,Subject:function(){var e;return e=null!==(e=w())?e:""},Supported:function(){var e,t,n,r,i,o;if(i=s,null!==(e=k())){for(t=[],o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=k())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e=null!==e?e:""},To:function(){var e,t,n,r,i,o,l;i=s,o=s,null===(e=J())&&(e=mt());if(null!==e){for(t=[],l=s,null!==(n=B())&&null!==(r=cn())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=cn())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(e=function(e){var t=jn.tag;try{jn=new Fn(jn.uri,jn.display_name,jn.params),t&&jn.setParam("tag",t)}catch(e){jn=-1}}());null===e&&(s=i);return e},to_param:cn,Via:function(){var e,t,n,r,i,o;if(i=s,null!==(e=hn())){for(t=[],o=s,null!==(n=j())&&null!==(r=hn())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=j())&&null!==(r=hn())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},via_param:hn,via_params:dn,via_ttl:fn,via_maddr:_n,via_received:pn,via_branch:mn,response_port:vn,rport:gn,sent_protocol:yn,protocol_name:Tn,transport:bn,sent_by:Sn,via_host:En,via_port:Cn,ttl:An,WWW_Authenticate:function(){return jt()},Session_Expires:function(){var e,t,n,r,i,o;if(i=s,null!==(e=Rn())){for(t=[],o=s,null!==(n=B())&&null!==(r=wn())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=B())&&null!==(r=wn())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},s_e_expires:Rn,s_e_params:wn,s_e_refresher:In,extension_header:function(){var e,t,n,r;r=s,null!==(e=k())&&null!==(t=R())&&null!==(n=On())?e=[e,t,n]:(e=null,s=r);return e},header_value:On,message_body:function(){var e,t;e=[],t=p();for(;null!==t;)e.push(t),t=p();return e},uuid_URI:function(){var e,t,r;r=s,"uuid:"===n.substr(s,5)?(e="uuid:",s+=5):(e=null,0===o&&u('"uuid:"'));null!==e&&null!==(t=Nn())?e=[e,t]:(e=null,s=r);return e},uuid:Nn,hex4:kn,hex8:Un,hex12:xn,Refer_To:function(){var e,t,n,r,i,o,l;i=s,o=s,null===(e=J())&&(e=mt());if(null!==e){for(t=[],l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;null!==e&&(e=function(e){try{jn=new Fn(jn.uri,jn.display_name,jn.params)}catch(e){jn=-1}}());null===e&&(s=i);return e},Replaces:function(){var e,t,n,r,i,o;if(i=s,null!==(e=Dn())){for(t=[],o=s,null!==(n=B())&&null!==(r=Pn())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=B())&&null!==(r=Pn())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e},call_id:Dn,replaces_param:Pn,to_tag:Mn,from_tag:qn,early_flag:Ln};if(void 0!==r){if(void 0===i[r])throw new Error("Invalid rule name: "+t(r)+".")}else r="CRLF";var s=0,o=0,l=0,a=[];function u(e){s<l||(s>l&&(l=s,a=[]),a.push(e))}function c(){var e;return"\r\n"===n.substr(s,2)?(e="\r\n",s+=2):(e=null,0===o&&u('"\\r\\n"')),e}function h(){var e;return/^[0-9]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[0-9]")),e}function d(){var e;return/^[a-zA-Z]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[a-zA-Z]")),e}function f(){var e;return/^[0-9a-fA-F]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[0-9a-fA-F]")),e}function _(){var e;return null===(e=v())&&(e=g()),e}function p(){var e;return/^[\0-\xFF]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[\\0-\\xFF]")),e}function m(){var e;return/^["]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u('["]')),e}function v(){var e;return 32===n.charCodeAt(s)?(e=" ",s++):(e=null,0===o&&u('" "')),e}function g(){var e;return 9===n.charCodeAt(s)?(e="\t",s++):(e=null,0===o&&u('"\\t"')),e}function y(){var e;return/^[a-zA-Z0-9]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[a-zA-Z0-9]")),e}function T(){var e;return 59===n.charCodeAt(s)?(e=";",s++):(e=null,0===o&&u('";"')),null===e&&(47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"')),null===e&&(63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null===e&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(64===n.charCodeAt(s)?(e="@",s++):(e=null,0===o&&u('"@"')),null===e&&(38===n.charCodeAt(s)?(e="&",s++):(e=null,0===o&&u('"&"')),null===e&&(61===n.charCodeAt(s)?(e="=",s++):(e=null,0===o&&u('"="')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')),null===e&&(44===n.charCodeAt(s)?(e=",",s++):(e=null,0===o&&u('","'))))))))))),e}function b(){var e;return null===(e=y())&&(e=S()),e}function S(){var e;return 45===n.charCodeAt(s)?(e="-",s++):(e=null,0===o&&u('"-"')),null===e&&(95===n.charCodeAt(s)?(e="_",s++):(e=null,0===o&&u('"_"')),null===e&&(46===n.charCodeAt(s)?(e=".",s++):(e=null,0===o&&u('"."')),null===e&&(33===n.charCodeAt(s)?(e="!",s++):(e=null,0===o&&u('"!"')),null===e&&(126===n.charCodeAt(s)?(e="~",s++):(e=null,0===o&&u('"~"')),null===e&&(42===n.charCodeAt(s)?(e="*",s++):(e=null,0===o&&u('"*"')),null===e&&(39===n.charCodeAt(s)?(e="'",s++):(e=null,0===o&&u('"\'"')),null===e&&(40===n.charCodeAt(s)?(e="(",s++):(e=null,0===o&&u('"("')),null===e&&(41===n.charCodeAt(s)?(e=")",s++):(e=null,0===o&&u('")"')))))))))),e}function E(){var e,t,r,i,l;return i=s,l=s,37===n.charCodeAt(s)?(e="%",s++):(e=null,0===o&&u('"%"')),null!==e&&null!==(t=f())&&null!==(r=f())?e=[e,t,r]:(e=null,s=l),null!==e&&(e=e.join("")),null===e&&(s=i),e}function C(){var e,t,n,r,i,o;for(r=s,i=s,o=s,e=[],t=_();null!==t;)e.push(t),t=_();if(null!==e&&null!==(t=c())?e=[e,t]:(e=null,s=o),null!==(e=null!==e?e:"")){if(null!==(n=_()))for(t=[];null!==n;)t.push(n),n=_();else t=null;null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return null!==e&&(e=" "),null===e&&(s=r),e}function A(){var e;return e=null!==(e=C())?e:""}function R(){var e,t,r,i,l;for(i=s,l=s,e=[],null===(t=v())&&(t=g());null!==t;)e.push(t),null===(t=v())&&(t=g());return null!==e?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e=":"),null===e&&(s=i),e}function w(){var e,t,r,i,o,l,a,u;if(o=s,l=s,null!==(t=I()))for(e=[];null!==t;)e.push(t),t=I();else e=null;if(null!==e){for(t=[],a=s,r=[],i=C();null!==i;)r.push(i),i=C();for(null!==r&&null!==(i=I())?r=[r,i]:(r=null,s=a);null!==r;){for(t.push(r),a=s,r=[],i=C();null!==i;)r.push(i),i=C();null!==r&&null!==(i=I())?r=[r,i]:(r=null,s=a)}null!==t?e=[e,t]:(e=null,s=l)}else e=null,s=l;return null!==e&&(u=o,e=n.substring(s,u)),null===e&&(s=o),e}function I(){var e;return/^[!-~]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[!-~]")),null===e&&(e=O()),e}function O(){var e;return/^[\x80-\uFFFF]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[\\x80-\\uFFFF]")),e}function N(){var e;return/^[\x80-\xBF]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[\\x80-\\xBF]")),e}function k(){var e,t,r,i;if(r=s,null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"')))))))))))),null!==t)for(e=[];null!==t;)e.push(t),null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"'))))))))))));else e=null;return null!==e&&(i=r,e=n.substring(s,i)),null===e&&(s=r),e}function U(){var e,t,r,i;if(r=s,null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"'))))))))))),null!==t)for(e=[];null!==t;)e.push(t),null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"')))))))))));else e=null;return null!==e&&(i=r,e=n.substring(s,i)),null===e&&(s=r),e}function x(){var e,t,r,i;if(r=s,null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"')),null===t&&(40===n.charCodeAt(s)?(t="(",s++):(t=null,0===o&&u('"("')),null===t&&(41===n.charCodeAt(s)?(t=")",s++):(t=null,0===o&&u('")"')),null===t&&(60===n.charCodeAt(s)?(t="<",s++):(t=null,0===o&&u('"<"')),null===t&&(62===n.charCodeAt(s)?(t=">",s++):(t=null,0===o&&u('">"')),null===t&&(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null===t&&(92===n.charCodeAt(s)?(t="\\",s++):(t=null,0===o&&u('"\\\\"')),null===t&&null===(t=m())&&(47===n.charCodeAt(s)?(t="/",s++):(t=null,0===o&&u('"/"')),null===t&&(91===n.charCodeAt(s)?(t="[",s++):(t=null,0===o&&u('"["')),null===t&&(93===n.charCodeAt(s)?(t="]",s++):(t=null,0===o&&u('"]"')),null===t&&(63===n.charCodeAt(s)?(t="?",s++):(t=null,0===o&&u('"?"')),null===t&&(123===n.charCodeAt(s)?(t="{",s++):(t=null,0===o&&u('"{"')),null===t&&(125===n.charCodeAt(s)?(t="}",s++):(t=null,0===o&&u('"}"')))))))))))))))))))))))),null!==t)for(e=[];null!==t;)e.push(t),null===(t=y())&&(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null===t&&(46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null===t&&(33===n.charCodeAt(s)?(t="!",s++):(t=null,0===o&&u('"!"')),null===t&&(37===n.charCodeAt(s)?(t="%",s++):(t=null,0===o&&u('"%"')),null===t&&(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null===t&&(95===n.charCodeAt(s)?(t="_",s++):(t=null,0===o&&u('"_"')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(96===n.charCodeAt(s)?(t="`",s++):(t=null,0===o&&u('"`"')),null===t&&(39===n.charCodeAt(s)?(t="'",s++):(t=null,0===o&&u('"\'"')),null===t&&(126===n.charCodeAt(s)?(t="~",s++):(t=null,0===o&&u('"~"')),null===t&&(40===n.charCodeAt(s)?(t="(",s++):(t=null,0===o&&u('"("')),null===t&&(41===n.charCodeAt(s)?(t=")",s++):(t=null,0===o&&u('")"')),null===t&&(60===n.charCodeAt(s)?(t="<",s++):(t=null,0===o&&u('"<"')),null===t&&(62===n.charCodeAt(s)?(t=">",s++):(t=null,0===o&&u('">"')),null===t&&(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null===t&&(92===n.charCodeAt(s)?(t="\\",s++):(t=null,0===o&&u('"\\\\"')),null===t&&null===(t=m())&&(47===n.charCodeAt(s)?(t="/",s++):(t=null,0===o&&u('"/"')),null===t&&(91===n.charCodeAt(s)?(t="[",s++):(t=null,0===o&&u('"["')),null===t&&(93===n.charCodeAt(s)?(t="]",s++):(t=null,0===o&&u('"]"')),null===t&&(63===n.charCodeAt(s)?(t="?",s++):(t=null,0===o&&u('"?"')),null===t&&(123===n.charCodeAt(s)?(t="{",s++):(t=null,0===o&&u('"{"')),null===t&&(125===n.charCodeAt(s)?(t="}",s++):(t=null,0===o&&u('"}"'))))))))))))))))))))))));else e=null;return null!==e&&(i=r,e=n.substring(s,i)),null===e&&(s=r),e}function D(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(42===n.charCodeAt(s)?(t="*",s++):(t=null,0===o&&u('"*"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e="*"),null===e&&(s=i),e}function P(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(47===n.charCodeAt(s)?(t="/",s++):(t=null,0===o&&u('"/"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e="/"),null===e&&(s=i),e}function M(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e="="),null===e&&(s=i),e}function q(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(40===n.charCodeAt(s)?(t="(",s++):(t=null,0===o&&u('"("')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e="("),null===e&&(s=i),e}function L(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(41===n.charCodeAt(s)?(t=")",s++):(t=null,0===o&&u('")"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e=")"),null===e&&(s=i),e}function H(){var e,t,r,i;return r=s,i=s,62===n.charCodeAt(s)?(e=">",s++):(e=null,0===o&&u('">"')),null!==e&&null!==(t=A())?e=[e,t]:(e=null,s=i),null!==e&&(e=">"),null===e&&(s=r),e}function F(){var e,t,r,i;return r=s,i=s,null!==(e=A())?(60===n.charCodeAt(s)?(t="<",s++):(t=null,0===o&&u('"<"')),null!==t?e=[e,t]:(e=null,s=i)):(e=null,s=i),null!==e&&(e="<"),null===e&&(s=r),e}function j(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(44===n.charCodeAt(s)?(t=",",s++):(t=null,0===o&&u('","')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e=","),null===e&&(s=i),e}function B(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(59===n.charCodeAt(s)?(t=";",s++):(t=null,0===o&&u('";"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e=";"),null===e&&(s=i),e}function G(){var e,t,r,i,l;return i=s,l=s,null!==(e=A())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=A())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(e=":"),null===e&&(s=i),e}function V(){var e,t,n,r;return n=s,r=s,null!==(e=A())&&null!==(t=m())?e=[e,t]:(e=null,s=r),null!==e&&(e='"'),null===e&&(s=n),e}function W(){var e,t,n,r;return n=s,r=s,null!==(e=m())&&null!==(t=A())?e=[e,t]:(e=null,s=r),null!==e&&(e='"'),null===e&&(s=n),e}function Y(){var e;return/^[!-']/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[!-']")),null===e&&(/^[*-[]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[*-[]")),null===e&&(/^[\]-~]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[\\]-~]")),null===e&&null===(e=O())&&(e=C()))),e}function K(){var e,t,r,i,o,l,a;if(o=s,l=s,null!==(e=A()))if(null!==(t=m())){for(r=[],null===(i=$())&&(i=X());null!==i;)r.push(i),null===(i=$())&&(i=X());null!==r&&null!==(i=m())?e=[e,t,r,i]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;return null!==e&&(a=o,e=n.substring(s,a)),null===e&&(s=o),e}function z(){var e,t,r,i,o,l,a,u;if(o=s,l=s,null!==(e=A()))if(null!==(t=m())){for(r=[],null===(i=$())&&(i=X());null!==i;)r.push(i),null===(i=$())&&(i=X());null!==r&&null!==(i=m())?e=[e,t,r,i]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;return null!==e&&(a=o,e=(u=n.substring(s,a).trim()).substring(1,u.length-1).replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g,"$1")),null===e&&(s=o),e}function $(){var e;return null===(e=C())&&(33===n.charCodeAt(s)?(e="!",s++):(e=null,0===o&&u('"!"')),null===e&&(/^[#-[]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[#-[]")),null===e&&(/^[\]-~]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[\\]-~]")),null===e&&(e=O())))),e}function X(){var e,t,r;return r=s,92===n.charCodeAt(s)?(e="\\",s++):(e=null,0===o&&u('"\\\\"')),null!==e?(/^[\0-\t]/.test(n.charAt(s))?(t=n.charAt(s),s++):(t=null,0===o&&u("[\\0-\\t]")),null===t&&(/^[\x0B-\f]/.test(n.charAt(s))?(t=n.charAt(s),s++):(t=null,0===o&&u("[\\x0B-\\f]")),null===t&&(/^[\x0E-]/.test(n.charAt(s))?(t=n.charAt(s),s++):(t=null,0===o&&u("[\\x0E-]")))),null!==t?e=[e,t]:(e=null,s=r)):(e=null,s=r),e}function J(){var e,t,r,i,l,a;return l=s,a=s,null!==(e=Z())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=null!==(r=ne())?r:"")&&null!==(i=oe())?e=[e,t,r,i]:(e=null,s=a)):(e=null,s=a),null!==e&&(e=function(e){try{jn.uri=new Hn(jn.scheme,jn.user,jn.host,jn.port),delete jn.scheme,delete jn.user,delete jn.host,delete jn.host_type,delete jn.port}catch(e){jn=-1}}()),null===e&&(s=l),e}function Q(){var e,t,i,l,a,c,h,d;return h=s,d=s,null!==(e=Z())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(i=null!==(i=ne())?i:"")&&null!==(l=oe())&&null!==(a=ge())&&null!==(c=null!==(c=ke())?c:"")?e=[e,t,i,l,a,c]:(e=null,s=d)):(e=null,s=d),null!==e&&(e=function(e){try{jn.uri=new Hn(jn.scheme,jn.user,jn.host,jn.port,jn.uri_params,jn.uri_headers),delete jn.scheme,delete jn.user,delete jn.host,delete jn.host_type,delete jn.port,delete jn.uri_params,"SIP_URI"===r&&(jn=jn.uri)}catch(e){jn=-1}}()),null===e&&(s=h),e}function Z(){var e;return null===(e=ee())&&(e=te()),e}function ee(){var e,t,r;return t=s,"sips"===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"sips"')),null!==e&&(r=e,e=void(jn.scheme=r.toLowerCase())),null===e&&(s=t),e}function te(){var e,t,r;return t=s,"sip"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"sip"')),null!==e&&(r=e,e=void(jn.scheme=r.toLowerCase())),null===e&&(s=t),e}function ne(){var e,t,r,i,l,a,c;return i=s,l=s,null!==(e=re())?(a=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=se())?t=[t,r]:(t=null,s=a),null!==(t=null!==t?t:"")?(64===n.charCodeAt(s)?(r="@",s++):(r=null,0===o&&u('"@"')),null!==r?e=[e,t,r]:(e=null,s=l)):(e=null,s=l)):(e=null,s=l),null!==e&&(c=i,e=void(jn.user=decodeURIComponent(n.substring(s-1,c)))),null===e&&(s=i),e}function re(){var e,t;if(null===(t=b())&&null===(t=E())&&(t=ie()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=b())&&null===(t=E())&&(t=ie());else e=null;return e}function ie(){var e;return 38===n.charCodeAt(s)?(e="&",s++):(e=null,0===o&&u('"&"')),null===e&&(61===n.charCodeAt(s)?(e="=",s++):(e=null,0===o&&u('"="')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')),null===e&&(44===n.charCodeAt(s)?(e=",",s++):(e=null,0===o&&u('","')),null===e&&(59===n.charCodeAt(s)?(e=";",s++):(e=null,0===o&&u('";"')),null===e&&(63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null===e&&(47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"'))))))))),e}function se(){var e,t,r,i;for(r=s,e=[],null===(t=b())&&null===(t=E())&&(38===n.charCodeAt(s)?(t="&",s++):(t=null,0===o&&u('"&"')),null===t&&(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(36===n.charCodeAt(s)?(t="$",s++):(t=null,0===o&&u('"$"')),null===t&&(44===n.charCodeAt(s)?(t=",",s++):(t=null,0===o&&u('","')))))));null!==t;)e.push(t),null===(t=b())&&null===(t=E())&&(38===n.charCodeAt(s)?(t="&",s++):(t=null,0===o&&u('"&"')),null===t&&(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')),null===t&&(36===n.charCodeAt(s)?(t="$",s++):(t=null,0===o&&u('"$"')),null===t&&(44===n.charCodeAt(s)?(t=",",s++):(t=null,0===o&&u('","')))))));return null!==e&&(i=r,e=void(jn.password=n.substring(s,i))),null===e&&(s=r),e}function oe(){var e,t,r,i,l;return i=s,null!==(e=le())?(l=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=ve())?t=[t,r]:(t=null,s=l),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=i)):(e=null,s=i),e}function le(){var e,t,r;return t=s,null===(e=ae())&&null===(e=pe())&&(e=he()),null!==e&&(r=t,jn.host=n.substring(s,r).toLowerCase(),e=jn.host),null===e&&(s=t),e}function ae(){var e,t,r,i,l,a,c;for(i=s,l=s,e=[],a=s,null!==(t=ue())?(46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')),null!==r?t=[t,r]:(t=null,s=a)):(t=null,s=a);null!==t;)e.push(t),a=s,null!==(t=ue())?(46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')),null!==r?t=[t,r]:(t=null,s=a)):(t=null,s=a);return null!==e&&null!==(t=ce())?(46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')),null!==(r=null!==r?r:"")?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(c=i,jn.host_type="domain",e=n.substring(s,c)),null===e&&(s=i),e}function ue(){var e,t,r,i;if(i=s,null!==(e=y())){for(t=[],null===(r=y())&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(95===n.charCodeAt(s)?(r="_",s++):(r=null,0===o&&u('"_"'))));null!==r;)t.push(r),null===(r=y())&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(95===n.charCodeAt(s)?(r="_",s++):(r=null,0===o&&u('"_"'))));null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e}function ce(){var e,t,r,i;if(i=s,null!==(e=d())){for(t=[],null===(r=y())&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(95===n.charCodeAt(s)?(r="_",s++):(r=null,0===o&&u('"_"'))));null!==r;)t.push(r),null===(r=y())&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(95===n.charCodeAt(s)?(r="_",s++):(r=null,0===o&&u('"_"'))));null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e}function he(){var e,t,r,i,l,a;return i=s,l=s,91===n.charCodeAt(s)?(e="[",s++):(e=null,0===o&&u('"["')),null!==e&&null!==(t=de())?(93===n.charCodeAt(s)?(r="]",s++):(r=null,0===o&&u('"]"')),null!==r?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(a=i,jn.host_type="IPv6",e=n.substring(s,a)),null===e&&(s=i),e}function de(){var e,t,r,i,l,a,c,h,d,f,_,p,m,v,g,y,T;return v=s,g=s,null!==(e=fe())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?(58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?(58===n.charCodeAt(s)?(a=":",s++):(a=null,0===o&&u('":"')),null!==a&&null!==(c=fe())?(58===n.charCodeAt(s)?(h=":",s++):(h=null,0===o&&u('":"')),null!==h&&null!==(d=fe())?(58===n.charCodeAt(s)?(f=":",s++):(f=null,0===o&&u('":"')),null!==f&&null!==(_=fe())?(58===n.charCodeAt(s)?(p=":",s++):(p=null,0===o&&u('":"')),null!==p&&null!==(m=_e())?e=[e,t,r,i,l,a,c,h,d,f,_,p,m]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?(58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?(58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?(58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=fe())?(58===n.charCodeAt(s)?(d=":",s++):(d=null,0===o&&u('":"')),null!==d&&null!==(f=fe())?(58===n.charCodeAt(s)?(_=":",s++):(_=null,0===o&&u('":"')),null!==_&&null!==(p=_e())?e=[e,t,r,i,l,a,c,h,d,f,_,p]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?(58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?(58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?(58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=fe())?(58===n.charCodeAt(s)?(d=":",s++):(d=null,0===o&&u('":"')),null!==d&&null!==(f=_e())?e=[e,t,r,i,l,a,c,h,d,f]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?(58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?(58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?(58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=_e())?e=[e,t,r,i,l,a,c,h]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?(58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?(58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=_e())?e=[e,t,r,i,l,a]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?(58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=_e())?e=[e,t,r,i]:(e=null,s=g)):(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=_e())?e=[e,t]:(e=null,s=g),null===e&&(g=s,"::"===n.substr(s,2)?(e="::",s+=2):(e=null,0===o&&u('"::"')),null!==e&&null!==(t=fe())?e=[e,t]:(e=null,s=g),null===e&&(g=s,null!==(e=fe())?("::"===n.substr(s,2)?(t="::",s+=2):(t=null,0===o&&u('"::"')),null!==t&&null!==(r=fe())?(58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?(58===n.charCodeAt(s)?(a=":",s++):(a=null,0===o&&u('":"')),null!==a&&null!==(c=fe())?(58===n.charCodeAt(s)?(h=":",s++):(h=null,0===o&&u('":"')),null!==h&&null!==(d=fe())?(58===n.charCodeAt(s)?(f=":",s++):(f=null,0===o&&u('":"')),null!==f&&null!==(_=_e())?e=[e,t,r,i,l,a,c,h,d,f,_]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?("::"===n.substr(s,2)?(r="::",s+=2):(r=null,0===o&&u('"::"')),null!==r&&null!==(i=fe())?(58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?(58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=fe())?(58===n.charCodeAt(s)?(d=":",s++):(d=null,0===o&&u('":"')),null!==d&&null!==(f=_e())?e=[e,t,r,i,l,a,c,h,d,f]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?(y=s,58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,s=y),null!==(r=null!==r?r:"")?("::"===n.substr(s,2)?(i="::",s+=2):(i=null,0===o&&u('"::"')),null!==i&&null!==(l=fe())?(58===n.charCodeAt(s)?(a=":",s++):(a=null,0===o&&u('":"')),null!==a&&null!==(c=fe())?(58===n.charCodeAt(s)?(h=":",s++):(h=null,0===o&&u('":"')),null!==h&&null!==(d=_e())?e=[e,t,r,i,l,a,c,h,d]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?(y=s,58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,s=y),null!==(r=null!==r?r:"")?(y=s,58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?i=[i,l]:(i=null,s=y),null!==(i=null!==i?i:"")?("::"===n.substr(s,2)?(l="::",s+=2):(l=null,0===o&&u('"::"')),null!==l&&null!==(a=fe())?(58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=_e())?e=[e,t,r,i,l,a,c,h]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?(y=s,58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,s=y),null!==(r=null!==r?r:"")?(y=s,58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?i=[i,l]:(i=null,s=y),null!==(i=null!==i?i:"")?(y=s,58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?l=[l,a]:(l=null,s=y),null!==(l=null!==l?l:"")?("::"===n.substr(s,2)?(a="::",s+=2):(a=null,0===o&&u('"::"')),null!==a&&null!==(c=_e())?e=[e,t,r,i,l,a,c]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?(y=s,58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,s=y),null!==(r=null!==r?r:"")?(y=s,58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?i=[i,l]:(i=null,s=y),null!==(i=null!==i?i:"")?(y=s,58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?l=[l,a]:(l=null,s=y),null!==(l=null!==l?l:"")?(y=s,58===n.charCodeAt(s)?(a=":",s++):(a=null,0===o&&u('":"')),null!==a&&null!==(c=fe())?a=[a,c]:(a=null,s=y),null!==(a=null!==a?a:"")?("::"===n.substr(s,2)?(c="::",s+=2):(c=null,0===o&&u('"::"')),null!==c&&null!==(h=fe())?e=[e,t,r,i,l,a,c,h]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g),null===e&&(g=s,null!==(e=fe())?(y=s,58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?t=[t,r]:(t=null,s=y),null!==(t=null!==t?t:"")?(y=s,58===n.charCodeAt(s)?(r=":",s++):(r=null,0===o&&u('":"')),null!==r&&null!==(i=fe())?r=[r,i]:(r=null,s=y),null!==(r=null!==r?r:"")?(y=s,58===n.charCodeAt(s)?(i=":",s++):(i=null,0===o&&u('":"')),null!==i&&null!==(l=fe())?i=[i,l]:(i=null,s=y),null!==(i=null!==i?i:"")?(y=s,58===n.charCodeAt(s)?(l=":",s++):(l=null,0===o&&u('":"')),null!==l&&null!==(a=fe())?l=[l,a]:(l=null,s=y),null!==(l=null!==l?l:"")?(y=s,58===n.charCodeAt(s)?(a=":",s++):(a=null,0===o&&u('":"')),null!==a&&null!==(c=fe())?a=[a,c]:(a=null,s=y),null!==(a=null!==a?a:"")?(y=s,58===n.charCodeAt(s)?(c=":",s++):(c=null,0===o&&u('":"')),null!==c&&null!==(h=fe())?c=[c,h]:(c=null,s=y),null!==(c=null!==c?c:"")?("::"===n.substr(s,2)?(h="::",s+=2):(h=null,0===o&&u('"::"')),null!==h?e=[e,t,r,i,l,a,c,h]:(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g)):(e=null,s=g))))))))))))))),null!==e&&(T=v,jn.host_type="IPv6",e=n.substring(s,T)),null===e&&(s=v),e}function fe(){var e,t,n,r,i;return i=s,null!==(e=f())&&null!==(t=null!==(t=f())?t:"")&&null!==(n=null!==(n=f())?n:"")&&null!==(r=null!==(r=f())?r:"")?e=[e,t,n,r]:(e=null,s=i),e}function _e(){var e,t,r,i;return i=s,null!==(e=fe())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t&&null!==(r=fe())?e=[e,t,r]:(e=null,s=i)):(e=null,s=i),null===e&&(e=pe()),e}function pe(){var e,t,r,i,l,a,c,h,d,f;return h=s,d=s,null!==(e=me())?(46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null!==t&&null!==(r=me())?(46===n.charCodeAt(s)?(i=".",s++):(i=null,0===o&&u('"."')),null!==i&&null!==(l=me())?(46===n.charCodeAt(s)?(a=".",s++):(a=null,0===o&&u('"."')),null!==a&&null!==(c=me())?e=[e,t,r,i,l,a,c]:(e=null,s=d)):(e=null,s=d)):(e=null,s=d)):(e=null,s=d),null!==e&&(f=h,jn.host_type="IPv4",e=n.substring(s,f)),null===e&&(s=h),e}function me(){var e,t,r,i;return i=s,"25"===n.substr(s,2)?(e="25",s+=2):(e=null,0===o&&u('"25"')),null!==e?(/^[0-5]/.test(n.charAt(s))?(t=n.charAt(s),s++):(t=null,0===o&&u("[0-5]")),null!==t?e=[e,t]:(e=null,s=i)):(e=null,s=i),null===e&&(i=s,50===n.charCodeAt(s)?(e="2",s++):(e=null,0===o&&u('"2"')),null!==e?(/^[0-4]/.test(n.charAt(s))?(t=n.charAt(s),s++):(t=null,0===o&&u("[0-4]")),null!==t&&null!==(r=h())?e=[e,t,r]:(e=null,s=i)):(e=null,s=i),null===e&&(i=s,49===n.charCodeAt(s)?(e="1",s++):(e=null,0===o&&u('"1"')),null!==e&&null!==(t=h())&&null!==(r=h())?e=[e,t,r]:(e=null,s=i),null===e&&(i=s,/^[1-9]/.test(n.charAt(s))?(e=n.charAt(s),s++):(e=null,0===o&&u("[1-9]")),null!==e&&null!==(t=h())?e=[e,t]:(e=null,s=i),null===e&&(e=h())))),e}function ve(){var e,t,n,r,i,o,l,a;return o=s,l=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")?e=[e,t,n,r,i]:(e=null,s=l),null!==e&&(a=e,a=parseInt(a.join("")),jn.port=a,e=a),null===e&&(s=o),e}function ge(){var e,t,r,i;for(e=[],i=s,59===n.charCodeAt(s)?(t=";",s++):(t=null,0===o&&u('";"')),null!==t&&null!==(r=ye())?t=[t,r]:(t=null,s=i);null!==t;)e.push(t),i=s,59===n.charCodeAt(s)?(t=";",s++):(t=null,0===o&&u('";"')),null!==t&&null!==(r=ye())?t=[t,r]:(t=null,s=i);return e}function ye(){var e;return null===(e=Te())&&null===(e=be())&&null===(e=Se())&&null===(e=Ee())&&null===(e=Ce())&&null===(e=Ae())&&(e=Re()),e}function Te(){var e,t,r,i,l;return r=s,i=s,"transport="===n.substr(s,10).toLowerCase()?(e=n.substr(s,10),s+=10):(e=null,0===o&&u('"transport="')),null!==e?("udp"===n.substr(s,3).toLowerCase()?(t=n.substr(s,3),s+=3):(t=null,0===o&&u('"udp"')),null===t&&("tcp"===n.substr(s,3).toLowerCase()?(t=n.substr(s,3),s+=3):(t=null,0===o&&u('"tcp"')),null===t&&("sctp"===n.substr(s,4).toLowerCase()?(t=n.substr(s,4),s+=4):(t=null,0===o&&u('"sctp"')),null===t&&("tls"===n.substr(s,3).toLowerCase()?(t=n.substr(s,3),s+=3):(t=null,0===o&&u('"tls"')),null===t&&(t=k())))),null!==t?e=[e,t]:(e=null,s=i)):(e=null,s=i),null!==e&&(l=e[1],jn.uri_params||(jn.uri_params={}),e=void(jn.uri_params.transport=l.toLowerCase())),null===e&&(s=r),e}function be(){var e,t,r,i,l;return r=s,i=s,"user="===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"user="')),null!==e?("phone"===n.substr(s,5).toLowerCase()?(t=n.substr(s,5),s+=5):(t=null,0===o&&u('"phone"')),null===t&&("ip"===n.substr(s,2).toLowerCase()?(t=n.substr(s,2),s+=2):(t=null,0===o&&u('"ip"')),null===t&&(t=k())),null!==t?e=[e,t]:(e=null,s=i)):(e=null,s=i),null!==e&&(l=e[1],jn.uri_params||(jn.uri_params={}),e=void(jn.uri_params.user=l.toLowerCase())),null===e&&(s=r),e}function Se(){var e,t,r,i,l;return r=s,i=s,"method="===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"method="')),null!==e&&null!==(t=ct())?e=[e,t]:(e=null,s=i),null!==e&&(l=e[1],jn.uri_params||(jn.uri_params={}),e=void(jn.uri_params.method=l)),null===e&&(s=r),e}function Ee(){var e,t,r,i,l;return r=s,i=s,"ttl="===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"ttl="')),null!==e&&null!==(t=An())?e=[e,t]:(e=null,s=i),null!==e&&(l=e[1],jn.params||(jn.params={}),e=void(jn.params.ttl=l)),null===e&&(s=r),e}function Ce(){var e,t,r,i,l;return r=s,i=s,"maddr="===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"maddr="')),null!==e&&null!==(t=le())?e=[e,t]:(e=null,s=i),null!==e&&(l=e[1],jn.uri_params||(jn.uri_params={}),e=void(jn.uri_params.maddr=l)),null===e&&(s=r),e}function Ae(){var e,t,r,i,l,a;return i=s,l=s,"lr"===n.substr(s,2).toLowerCase()?(e=n.substr(s,2),s+=2):(e=null,0===o&&u('"lr"')),null!==e?(a=s,61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null!==t&&null!==(r=k())?t=[t,r]:(t=null,s=a),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=l)):(e=null,s=l),null!==e&&(jn.uri_params||(jn.uri_params={}),e=void(jn.uri_params.lr=void 0)),null===e&&(s=i),e}function Re(){var e,t,r,i,l,a,c,h;return i=s,l=s,null!==(e=we())?(a=s,61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null!==t&&null!==(r=Ie())?t=[t,r]:(t=null,s=a),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=l)):(e=null,s=l),null!==e&&(c=e[0],h=e[1],jn.uri_params||(jn.uri_params={}),h=void 0===h?void 0:h[1],e=void(jn.uri_params[c.toLowerCase()]=h)),null===e&&(s=i),e}function we(){var e,t,n;if(n=s,null!==(t=Oe()))for(e=[];null!==t;)e.push(t),t=Oe();else e=null;return null!==e&&(e=e.join("")),null===e&&(s=n),e}function Ie(){var e,t,n;if(n=s,null!==(t=Oe()))for(e=[];null!==t;)e.push(t),t=Oe();else e=null;return null!==e&&(e=e.join("")),null===e&&(s=n),e}function Oe(){var e;return null===(e=Ne())&&null===(e=b())&&(e=E()),e}function Ne(){var e;return 91===n.charCodeAt(s)?(e="[",s++):(e=null,0===o&&u('"["')),null===e&&(93===n.charCodeAt(s)?(e="]",s++):(e=null,0===o&&u('"]"')),null===e&&(47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"')),null===e&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(38===n.charCodeAt(s)?(e="&",s++):(e=null,0===o&&u('"&"')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')))))))),e}function ke(){var e,t,r,i,l,a,c;if(a=s,63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null!==e)if(null!==(t=Ue())){for(r=[],c=s,38===n.charCodeAt(s)?(i="&",s++):(i=null,0===o&&u('"&"')),null!==i&&null!==(l=Ue())?i=[i,l]:(i=null,s=c);null!==i;)r.push(i),c=s,38===n.charCodeAt(s)?(i="&",s++):(i=null,0===o&&u('"&"')),null!==i&&null!==(l=Ue())?i=[i,l]:(i=null,s=c);null!==r?e=[e,t,r]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;return e}function Ue(){var e,t,r,i,l,a,c;return i=s,l=s,null!==(e=xe())?(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null!==t&&null!==(r=De())?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(a=e[0],c=e[2],a=a.join("").toLowerCase(),c=c.join(""),jn.uri_headers||(jn.uri_headers={}),e=void(jn.uri_headers[a]?jn.uri_headers[a].push(c):jn.uri_headers[a]=[c])),null===e&&(s=i),e}function xe(){var e,t;if(null===(t=Pe())&&null===(t=b())&&(t=E()),null!==t)for(e=[];null!==t;)e.push(t),null===(t=Pe())&&null===(t=b())&&(t=E());else e=null;return e}function De(){var e,t;for(e=[],null===(t=Pe())&&null===(t=b())&&(t=E());null!==t;)e.push(t),null===(t=Pe())&&null===(t=b())&&(t=E());return e}function Pe(){var e;return 91===n.charCodeAt(s)?(e="[",s++):(e=null,0===o&&u('"["')),null===e&&(93===n.charCodeAt(s)?(e="]",s++):(e=null,0===o&&u('"]"')),null===e&&(47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"')),null===e&&(63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null===e&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')))))))),e}function Me(){var e,t,n,r,i,o;return o=s,null!==(e=ct())&&null!==(t=v())&&null!==(n=qe())&&null!==(r=v())&&null!==(i=et())?e=[e,t,n,r,i]:(e=null,s=o),e}function qe(){var e;return null===(e=Q())&&(e=Le()),e}function Le(){var e,t,r,i;return i=s,null!==(e=$e())?(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null!==t?(null===(r=He())&&(r=Be()),null!==r?e=[e,t,r]:(e=null,s=i)):(e=null,s=i)):(e=null,s=i),e}function He(){var e,t,r,i,l;return i=s,null===(e=Fe())&&(e=je()),null!==e?(l=s,63===n.charCodeAt(s)?(t="?",s++):(t=null,0===o&&u('"?"')),null!==t&&null!==(r=Ze())?t=[t,r]:(t=null,s=l),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=i)):(e=null,s=i),e}function Fe(){var e,t,r,i;return i=s,"//"===n.substr(s,2)?(e="//",s+=2):(e=null,0===o&&u('"//"')),null!==e&&null!==(t=Xe())&&null!==(r=null!==(r=je())?r:"")?e=[e,t,r]:(e=null,s=i),e}function je(){var e,t,r;return r=s,47===n.charCodeAt(s)?(e="/",s++):(e=null,0===o&&u('"/"')),null!==e&&null!==(t=We())?e=[e,t]:(e=null,s=r),e}function Be(){var e,t,n,r;if(r=s,null!==(e=Ve())){for(t=[],n=Ge();null!==n;)t.push(n),n=Ge();null!==t?e=[e,t]:(e=null,s=r)}else e=null,s=r;return e}function Ge(){var e;return null===(e=T())&&null===(e=b())&&(e=E()),e}function Ve(){var e;return null===(e=b())&&null===(e=E())&&(59===n.charCodeAt(s)?(e=";",s++):(e=null,0===o&&u('";"')),null===e&&(63===n.charCodeAt(s)?(e="?",s++):(e=null,0===o&&u('"?"')),null===e&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(64===n.charCodeAt(s)?(e="@",s++):(e=null,0===o&&u('"@"')),null===e&&(38===n.charCodeAt(s)?(e="&",s++):(e=null,0===o&&u('"&"')),null===e&&(61===n.charCodeAt(s)?(e="=",s++):(e=null,0===o&&u('"="')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')),null===e&&(44===n.charCodeAt(s)?(e=",",s++):(e=null,0===o&&u('","'))))))))))),e}function We(){var e,t,r,i,l,a;if(l=s,null!==(e=Ye())){for(t=[],a=s,47===n.charCodeAt(s)?(r="/",s++):(r=null,0===o&&u('"/"')),null!==r&&null!==(i=Ye())?r=[r,i]:(r=null,s=a);null!==r;)t.push(r),a=s,47===n.charCodeAt(s)?(r="/",s++):(r=null,0===o&&u('"/"')),null!==r&&null!==(i=Ye())?r=[r,i]:(r=null,s=a);null!==t?e=[e,t]:(e=null,s=l)}else e=null,s=l;return e}function Ye(){var e,t,r,i,l,a;for(l=s,e=[],t=ze();null!==t;)e.push(t),t=ze();if(null!==e){for(t=[],a=s,59===n.charCodeAt(s)?(r=";",s++):(r=null,0===o&&u('";"')),null!==r&&null!==(i=Ke())?r=[r,i]:(r=null,s=a);null!==r;)t.push(r),a=s,59===n.charCodeAt(s)?(r=";",s++):(r=null,0===o&&u('";"')),null!==r&&null!==(i=Ke())?r=[r,i]:(r=null,s=a);null!==t?e=[e,t]:(e=null,s=l)}else e=null,s=l;return e}function Ke(){var e,t;for(e=[],t=ze();null!==t;)e.push(t),t=ze();return e}function ze(){var e;return null===(e=b())&&null===(e=E())&&(58===n.charCodeAt(s)?(e=":",s++):(e=null,0===o&&u('":"')),null===e&&(64===n.charCodeAt(s)?(e="@",s++):(e=null,0===o&&u('"@"')),null===e&&(38===n.charCodeAt(s)?(e="&",s++):(e=null,0===o&&u('"&"')),null===e&&(61===n.charCodeAt(s)?(e="=",s++):(e=null,0===o&&u('"="')),null===e&&(43===n.charCodeAt(s)?(e="+",s++):(e=null,0===o&&u('"+"')),null===e&&(36===n.charCodeAt(s)?(e="$",s++):(e=null,0===o&&u('"$"')),null===e&&(44===n.charCodeAt(s)?(e=",",s++):(e=null,0===o&&u('","'))))))))),e}function $e(){var e,t,r,i,l,a;if(i=s,l=s,null!==(e=d())){for(t=[],null===(r=d())&&null===(r=h())&&(43===n.charCodeAt(s)?(r="+",s++):(r=null,0===o&&u('"+"')),null===r&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')))));null!==r;)t.push(r),null===(r=d())&&null===(r=h())&&(43===n.charCodeAt(s)?(r="+",s++):(r=null,0===o&&u('"+"')),null===r&&(45===n.charCodeAt(s)?(r="-",s++):(r=null,0===o&&u('"-"')),null===r&&(46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')))));null!==t?e=[e,t]:(e=null,s=l)}else e=null,s=l;return null!==e&&(a=i,e=void(jn.scheme=n.substring(s,a))),null===e&&(s=i),e}function Xe(){var e;return null===(e=Je())&&(e=Qe()),e}function Je(){var e,t,r,i;return r=s,i=s,null!==(e=ne())?(64===n.charCodeAt(s)?(t="@",s++):(t=null,0===o&&u('"@"')),null!==t?e=[e,t]:(e=null,s=i)):(e=null,s=i),null!==(e=null!==e?e:"")&&null!==(t=oe())?e=[e,t]:(e=null,s=r),e=null!==e?e:""}function Qe(){var e,t;if(null===(t=b())&&null===(t=E())&&(36===n.charCodeAt(s)?(t="$",s++):(t=null,0===o&&u('"$"')),null===t&&(44===n.charCodeAt(s)?(t=",",s++):(t=null,0===o&&u('","')),null===t&&(59===n.charCodeAt(s)?(t=";",s++):(t=null,0===o&&u('";"')),null===t&&(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null===t&&(64===n.charCodeAt(s)?(t="@",s++):(t=null,0===o&&u('"@"')),null===t&&(38===n.charCodeAt(s)?(t="&",s++):(t=null,0===o&&u('"&"')),null===t&&(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"')))))))))),null!==t)for(e=[];null!==t;)e.push(t),null===(t=b())&&null===(t=E())&&(36===n.charCodeAt(s)?(t="$",s++):(t=null,0===o&&u('"$"')),null===t&&(44===n.charCodeAt(s)?(t=",",s++):(t=null,0===o&&u('","')),null===t&&(59===n.charCodeAt(s)?(t=";",s++):(t=null,0===o&&u('";"')),null===t&&(58===n.charCodeAt(s)?(t=":",s++):(t=null,0===o&&u('":"')),null===t&&(64===n.charCodeAt(s)?(t="@",s++):(t=null,0===o&&u('"@"')),null===t&&(38===n.charCodeAt(s)?(t="&",s++):(t=null,0===o&&u('"&"')),null===t&&(61===n.charCodeAt(s)?(t="=",s++):(t=null,0===o&&u('"="')),null===t&&(43===n.charCodeAt(s)?(t="+",s++):(t=null,0===o&&u('"+"'))))))))));else e=null;return e}function Ze(){var e,t;for(e=[],t=Ge();null!==t;)e.push(t),t=Ge();return e}function et(){var e,t,r,i,l,a,c,d,f;if(c=s,d=s,"sip"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"SIP"')),null!==e)if(47===n.charCodeAt(s)?(t="/",s++):(t=null,0===o&&u('"/"')),null!==t){if(null!==(i=h()))for(r=[];null!==i;)r.push(i),i=h();else r=null;if(null!==r)if(46===n.charCodeAt(s)?(i=".",s++):(i=null,0===o&&u('"."')),null!==i){if(null!==(a=h()))for(l=[];null!==a;)l.push(a),a=h();else l=null;null!==l?e=[e,t,r,i,l]:(e=null,s=d)}else e=null,s=d;else e=null,s=d}else e=null,s=d;else e=null,s=d;return null!==e&&(f=c,e=void(jn.sip_version=n.substring(s,f))),null===e&&(s=c),e}function tt(){var e;return"INVITE"===n.substr(s,6)?(e="INVITE",s+=6):(e=null,0===o&&u('"INVITE"')),e}function nt(){var e;return"ACK"===n.substr(s,3)?(e="ACK",s+=3):(e=null,0===o&&u('"ACK"')),e}function rt(){var e;return"OPTIONS"===n.substr(s,7)?(e="OPTIONS",s+=7):(e=null,0===o&&u('"OPTIONS"')),e}function it(){var e;return"BYE"===n.substr(s,3)?(e="BYE",s+=3):(e=null,0===o&&u('"BYE"')),e}function st(){var e;return"CANCEL"===n.substr(s,6)?(e="CANCEL",s+=6):(e=null,0===o&&u('"CANCEL"')),e}function ot(){var e;return"REGISTER"===n.substr(s,8)?(e="REGISTER",s+=8):(e=null,0===o&&u('"REGISTER"')),e}function lt(){var e;return"SUBSCRIBE"===n.substr(s,9)?(e="SUBSCRIBE",s+=9):(e=null,0===o&&u('"SUBSCRIBE"')),e}function at(){var e;return"NOTIFY"===n.substr(s,6)?(e="NOTIFY",s+=6):(e=null,0===o&&u('"NOTIFY"')),e}function ut(){var e;return"REFER"===n.substr(s,5)?(e="REFER",s+=5):(e=null,0===o&&u('"REFER"')),e}function ct(){var e,t,r;return t=s,null===(e=tt())&&null===(e=nt())&&null===(e=rt())&&null===(e=it())&&null===(e=st())&&null===(e=ot())&&null===(e=lt())&&null===(e=at())&&null===(e=ut())&&(e=k()),null!==e&&(r=t,jn.method=n.substring(s,r),e=jn.method),null===e&&(s=t),e}function ht(){var e,t,n,r,i,o;return o=s,null!==(e=et())&&null!==(t=v())&&null!==(n=dt())&&null!==(r=v())&&null!==(i=_t())?e=[e,t,n,r,i]:(e=null,s=o),e}function dt(){var e,t,n;return t=s,null!==(e=ft())&&(n=e,e=void(jn.status_code=parseInt(n.join("")))),null===e&&(s=t),e}function ft(){var e,t,n,r;return r=s,null!==(e=h())&&null!==(t=h())&&null!==(n=h())?e=[e,t,n]:(e=null,s=r),e}function _t(){var e,t,r,i;for(r=s,e=[],null===(t=T())&&null===(t=b())&&null===(t=E())&&null===(t=O())&&null===(t=N())&&null===(t=v())&&(t=g());null!==t;)e.push(t),null===(t=T())&&null===(t=b())&&null===(t=E())&&null===(t=O())&&null===(t=N())&&null===(t=v())&&(t=g());return null!==e&&(i=r,e=void(jn.reason_phrase=n.substring(s,i))),null===e&&(s=r),e}function pt(){var e,t,n,r,i,o,l;if(i=s,o=s,null===(e=J())&&(e=mt()),null!==e){for(t=[],l=s,null!==(n=B())&&null!==(r=gt())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=gt())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return null!==e&&(e=function(e){var t;jn.multi_header||(jn.multi_header=[]);try{t=new Fn(jn.uri,jn.display_name,jn.params),delete jn.uri,delete jn.display_name,delete jn.params}catch(e){t=null}jn.multi_header.push({possition:s,offset:e,parsed:t})}(i)),null===e&&(s=i),e}function mt(){var e,t,n,r,i;return i=s,null!==(e=null!==(e=vt())?e:"")&&null!==(t=F())&&null!==(n=Q())&&null!==(r=H())?e=[e,t,n,r]:(e=null,s=i),e}function vt(){var e,t,n,r,i,o,l,a;if(i=s,o=s,null!==(e=k())){for(t=[],l=s,null!==(n=C())&&null!==(r=k())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=C())&&null!==(r=k())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return null===e&&(e=z()),null!==e&&(a=e,e=void(jn.display_name="string"==typeof a?a:a[1].reduce(function(e,t){return e+t[0]+t[1]},a[0]))),null===e&&(s=i),e}function gt(){var e;return null===(e=yt())&&null===(e=Tt())&&(e=Et()),e}function yt(){var e,t,r,i,l,a;return i=s,l=s,"q"===n.substr(s,1).toLowerCase()?(e=n.substr(s,1),s++):(e=null,0===o&&u('"q"')),null!==e&&null!==(t=M())&&null!==(r=St())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],jn.params||(jn.params={}),e=void(jn.params.q=a)),null===e&&(s=i),e}function Tt(){var e,t,r,i,l,a;return i=s,l=s,"expires"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"expires"')),null!==e&&null!==(t=M())&&null!==(r=bt())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],jn.params||(jn.params={}),e=void(jn.params.expires=a)),null===e&&(s=i),e}function bt(){var e,t,n;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(e=parseInt(e.join(""))),null===e&&(s=n),e}function St(){var e,t,r,i,l,a,c,d,f;return a=s,c=s,48===n.charCodeAt(s)?(e="0",s++):(e=null,0===o&&u('"0"')),null!==e?(d=s,46===n.charCodeAt(s)?(t=".",s++):(t=null,0===o&&u('"."')),null!==t&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")&&null!==(l=null!==(l=h())?l:"")?t=[t,r,i,l]:(t=null,s=d),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=c)):(e=null,s=c),null!==e&&(f=a,e=parseFloat(n.substring(s,f))),null===e&&(s=a),e}function Et(){var e,t,n,r,i,o,l,a;return r=s,i=s,null!==(e=k())?(o=s,null!==(t=M())&&null!==(n=Ct())?t=[t,n]:(t=null,s=o),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=i)):(e=null,s=i),null!==e&&(l=e[0],a=e[1],jn.params||(jn.params={}),a=void 0===a?void 0:a[1],e=void(jn.params[l.toLowerCase()]=a)),null===e&&(s=r),e}function Ct(){var e;return null===(e=k())&&null===(e=le())&&(e=K()),e}function At(){var e;return"render"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"render"')),null===e&&("session"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"session"')),null===e&&("icon"===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"icon"')),null===e&&("alert"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"alert"')),null===e&&(e=k())))),e}function Rt(){var e;return null===(e=wt())&&(e=Et()),e}function wt(){var e,t,r,i;return i=s,"handling"===n.substr(s,8).toLowerCase()?(e=n.substr(s,8),s+=8):(e=null,0===o&&u('"handling"')),null!==e&&null!==(t=M())?("optional"===n.substr(s,8).toLowerCase()?(r=n.substr(s,8),s+=8):(r=null,0===o&&u('"optional"')),null===r&&("required"===n.substr(s,8).toLowerCase()?(r=n.substr(s,8),s+=8):(r=null,0===o&&u('"required"')),null===r&&(r=k())),null!==r?e=[e,t,r]:(e=null,s=i)):(e=null,s=i),e}function It(){var e,t,n,r,i,o,l,a;if(l=s,null!==(e=Ot()))if(null!==(t=P()))if(null!==(n=Dt())){for(r=[],a=s,null!==(i=B())&&null!==(o=Pt())?i=[i,o]:(i=null,s=a);null!==i;)r.push(i),a=s,null!==(i=B())&&null!==(o=Pt())?i=[i,o]:(i=null,s=a);null!==r?e=[e,t,n,r]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;else e=null,s=l;return e}function Ot(){var e;return null===(e=Nt())&&(e=kt()),e}function Nt(){var e;return"text"===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"text"')),null===e&&("image"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"image"')),null===e&&("audio"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"audio"')),null===e&&("video"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"video"')),null===e&&("application"===n.substr(s,11).toLowerCase()?(e=n.substr(s,11),s+=11):(e=null,0===o&&u('"application"')),null===e&&(e=Ut()))))),e}function kt(){var e;return"message"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"message"')),null===e&&("multipart"===n.substr(s,9).toLowerCase()?(e=n.substr(s,9),s+=9):(e=null,0===o&&u('"multipart"')),null===e&&(e=Ut())),e}function Ut(){var e;return null===(e=k())&&(e=xt()),e}function xt(){var e,t,r;return r=s,"x-"===n.substr(s,2).toLowerCase()?(e=n.substr(s,2),s+=2):(e=null,0===o&&u('"x-"')),null!==e&&null!==(t=k())?e=[e,t]:(e=null,s=r),e}function Dt(){var e;return null===(e=Ut())&&(e=k()),e}function Pt(){var e,t,n,r;return r=s,null!==(e=k())&&null!==(t=M())&&null!==(n=Mt())?e=[e,t,n]:(e=null,s=r),e}function Mt(){var e;return null===(e=k())&&(e=K()),e}function qt(){var e,t,n,r;if(n=s,null!==(t=h()))for(e=[];null!==t;)e.push(t),t=h();else e=null;return null!==e&&(r=e,e=void(jn.value=parseInt(r.join("")))),null===e&&(s=n),e}function Lt(){var e,t,r,i,l,a;if(l=s,null!==(e=U())){for(t=[],a=s,46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')),null!==r&&null!==(i=U())?r=[r,i]:(r=null,s=a);null!==r;)t.push(r),a=s,46===n.charCodeAt(s)?(r=".",s++):(r=null,0===o&&u('"."')),null!==r&&null!==(i=U())?r=[r,i]:(r=null,s=a);null!==t?e=[e,t]:(e=null,s=l)}else e=null,s=l;return e}function Ht(){var e;return null===(e=Ft())&&(e=Et()),e}function Ft(){var e,t,r,i,l,a;return i=s,l=s,"tag"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"tag"')),null!==e&&null!==(t=M())&&null!==(r=k())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.tag=a)),null===e&&(s=i),e}function jt(){var e,t,r,i,l,a,c,h;if(c=s,"digest"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"Digest"')),null!==e)if(null!==(t=C()))if(null!==(r=Vt())){for(i=[],h=s,null!==(l=j())&&null!==(a=Vt())?l=[l,a]:(l=null,s=h);null!==l;)i.push(l),h=s,null!==(l=j())&&null!==(a=Vt())?l=[l,a]:(l=null,s=h);null!==i?e=[e,t,r,i]:(e=null,s=c)}else e=null,s=c;else e=null,s=c;else e=null,s=c;return null===e&&(e=Bt()),e}function Bt(){var e,t,n,r,i,o,l,a;if(l=s,null!==(e=k()))if(null!==(t=C()))if(null!==(n=Gt())){for(r=[],a=s,null!==(i=j())&&null!==(o=Gt())?i=[i,o]:(i=null,s=a);null!==i;)r.push(i),a=s,null!==(i=j())&&null!==(o=Gt())?i=[i,o]:(i=null,s=a);null!==r?e=[e,t,n,r]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;else e=null,s=l;return e}function Gt(){var e,t,n,r;return r=s,null!==(e=k())&&null!==(t=M())?(null===(n=k())&&(n=K()),null!==n?e=[e,t,n]:(e=null,s=r)):(e=null,s=r),e}function Vt(){var e;return null===(e=Wt())&&null===(e=Kt())&&null===(e=$t())&&null===(e=Jt())&&null===(e=Qt())&&null===(e=Zt())&&null===(e=en())&&(e=Gt()),e}function Wt(){var e,t,r,i;return i=s,"realm"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"realm"')),null!==e&&null!==(t=M())&&null!==(r=Yt())?e=[e,t,r]:(e=null,s=i),e}function Yt(){var e,t,n;return t=s,null!==(e=z())&&(n=e,e=void(jn.realm=n)),null===e&&(s=t),e}function Kt(){var e,t,r,i,l,a,c,h,d;if(h=s,"domain"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"domain"')),null!==e)if(null!==(t=M()))if(null!==(r=V()))if(null!==(i=zt())){if(l=[],d=s,null!==(c=v()))for(a=[];null!==c;)a.push(c),c=v();else a=null;for(null!==a&&null!==(c=zt())?a=[a,c]:(a=null,s=d);null!==a;){if(l.push(a),d=s,null!==(c=v()))for(a=[];null!==c;)a.push(c),c=v();else a=null;null!==a&&null!==(c=zt())?a=[a,c]:(a=null,s=d)}null!==l&&null!==(a=W())?e=[e,t,r,i,l,a]:(e=null,s=h)}else e=null,s=h;else e=null,s=h;else e=null,s=h;else e=null,s=h;return e}function zt(){var e;return null===(e=Le())&&(e=je()),e}function $t(){var e,t,r,i;return i=s,"nonce"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"nonce"')),null!==e&&null!==(t=M())&&null!==(r=Xt())?e=[e,t,r]:(e=null,s=i),e}function Xt(){var e,t,n;return t=s,null!==(e=z())&&(n=e,e=void(jn.nonce=n)),null===e&&(s=t),e}function Jt(){var e,t,r,i,l,a;return i=s,l=s,"opaque"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"opaque"')),null!==e&&null!==(t=M())&&null!==(r=z())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.opaque=a)),null===e&&(s=i),e}function Qt(){var e,t,r,i,l;return i=s,"stale"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"stale"')),null!==e&&null!==(t=M())?(l=s,"true"===n.substr(s,4).toLowerCase()?(r=n.substr(s,4),s+=4):(r=null,0===o&&u('"true"')),null!==r&&(r=void(jn.stale=!0)),null===r&&(s=l),null===r&&(l=s,"false"===n.substr(s,5).toLowerCase()?(r=n.substr(s,5),s+=5):(r=null,0===o&&u('"false"')),null!==r&&(r=void(jn.stale=!1)),null===r&&(s=l)),null!==r?e=[e,t,r]:(e=null,s=i)):(e=null,s=i),e}function Zt(){var e,t,r,i,l,a;return i=s,l=s,"algorithm"===n.substr(s,9).toLowerCase()?(e=n.substr(s,9),s+=9):(e=null,0===o&&u('"algorithm"')),null!==e&&null!==(t=M())?("md5"===n.substr(s,3).toLowerCase()?(r=n.substr(s,3),s+=3):(r=null,0===o&&u('"MD5"')),null===r&&("md5-sess"===n.substr(s,8).toLowerCase()?(r=n.substr(s,8),s+=8):(r=null,0===o&&u('"MD5-sess"')),null===r&&(r=k())),null!==r?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(a=e[2],e=void(jn.algorithm=a.toUpperCase())),null===e&&(s=i),e}function en(){var e,t,r,i,l,a,c,h,d,f;if(h=s,"qop"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"qop"')),null!==e)if(null!==(t=M()))if(null!==(r=V())){if(d=s,null!==(i=tn())){for(l=[],f=s,44===n.charCodeAt(s)?(a=",",s++):(a=null,0===o&&u('","')),null!==a&&null!==(c=tn())?a=[a,c]:(a=null,s=f);null!==a;)l.push(a),f=s,44===n.charCodeAt(s)?(a=",",s++):(a=null,0===o&&u('","')),null!==a&&null!==(c=tn())?a=[a,c]:(a=null,s=f);null!==l?i=[i,l]:(i=null,s=d)}else i=null,s=d;null!==i&&null!==(l=W())?e=[e,t,r,i,l]:(e=null,s=h)}else e=null,s=h;else e=null,s=h;else e=null,s=h;return e}function tn(){var e,t,r;return t=s,"auth-int"===n.substr(s,8).toLowerCase()?(e=n.substr(s,8),s+=8):(e=null,0===o&&u('"auth-int"')),null===e&&("auth"===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"auth"')),null===e&&(e=k())),null!==e&&(r=e,jn.qop||(jn.qop=[]),e=void jn.qop.push(r.toLowerCase())),null===e&&(s=t),e}function nn(){var e,t,n,r,i,o,l;if(i=s,o=s,null!==(e=mt())){for(t=[],l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==n;)t.push(n),l=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=l);null!==t?e=[e,t]:(e=null,s=o)}else e=null,s=o;return null!==e&&(e=function(e){var t;jn.multi_header||(jn.multi_header=[]);try{t=new Fn(jn.uri,jn.display_name,jn.params),delete jn.uri,delete jn.display_name,delete jn.params}catch(e){t=null}jn.multi_header.push({possition:s,offset:e,parsed:t})}(i)),null===e&&(s=i),e}function rn(){var e;return null===(e=sn())&&(e=Et()),e}function sn(){var e,t,r,i,l,a,c;if(l=s,a=s,"cause"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"cause"')),null!==e)if(null!==(t=M())){if(null!==(i=h()))for(r=[];null!==i;)r.push(i),i=h();else r=null;null!==r?e=[e,t,r]:(e=null,s=a)}else e=null,s=a;else e=null,s=a;return null!==e&&(c=e[2],e=void(jn.cause=parseInt(c.join("")))),null===e&&(s=l),e}function on(){var e,t,n,r,i,o;if(i=s,null!==(e=mt())){for(t=[],o=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=o);null!==n;)t.push(n),o=s,null!==(n=B())&&null!==(r=Et())?n=[n,r]:(n=null,s=o);null!==t?e=[e,t]:(e=null,s=i)}else e=null,s=i;return e}function ln(){var e,t,r;return t=s,"active"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"active"')),null===e&&("pending"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"pending"')),null===e&&("terminated"===n.substr(s,10).toLowerCase()?(e=n.substr(s,10),s+=10):(e=null,0===o&&u('"terminated"')),null===e&&(e=k()))),null!==e&&(r=t,e=void(jn.state=n.substring(s,r))),null===e&&(s=t),e}function an(){var e,t,r,i,l,a,c,h;return i=s,l=s,"reason"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"reason"')),null!==e&&null!==(t=M())&&null!==(r=un())?e=[e,t,r]:(e=null,s=l),null!==e&&(e=void(void 0!==(a=e[2])&&(jn.reason=a))),null===e&&(s=i),null===e&&(i=s,l=s,"expires"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"expires"')),null!==e&&null!==(t=M())&&null!==(r=bt())?e=[e,t,r]:(e=null,s=l),null!==e&&(e=void(void 0!==(h=e[2])&&(jn.expires=h))),null===e&&(s=i),null===e&&(i=s,l=s,"retry_after"===n.substr(s,11).toLowerCase()?(e=n.substr(s,11),s+=11):(e=null,0===o&&u('"retry_after"')),null!==e&&null!==(t=M())&&null!==(r=bt())?e=[e,t,r]:(e=null,s=l),null!==e&&(e=void(void 0!==(c=e[2])&&(jn.retry_after=c))),null===e&&(s=i),null===e&&(e=Et()))),e}function un(){var e;return"deactivated"===n.substr(s,11).toLowerCase()?(e=n.substr(s,11),s+=11):(e=null,0===o&&u('"deactivated"')),null===e&&("probation"===n.substr(s,9).toLowerCase()?(e=n.substr(s,9),s+=9):(e=null,0===o&&u('"probation"')),null===e&&("rejected"===n.substr(s,8).toLowerCase()?(e=n.substr(s,8),s+=8):(e=null,0===o&&u('"rejected"')),null===e&&("timeout"===n.substr(s,7).toLowerCase()?(e=n.substr(s,7),s+=7):(e=null,0===o&&u('"timeout"')),null===e&&("giveup"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"giveup"')),null===e&&("noresource"===n.substr(s,10).toLowerCase()?(e=n.substr(s,10),s+=10):(e=null,0===o&&u('"noresource"')),null===e&&("invariant"===n.substr(s,9).toLowerCase()?(e=n.substr(s,9),s+=9):(e=null,0===o&&u('"invariant"')),null===e&&(e=k()))))))),e}function cn(){var e;return null===(e=Ft())&&(e=Et()),e}function hn(){var e,t,n,r,i,o,l,a;if(l=s,null!==(e=yn()))if(null!==(t=C()))if(null!==(n=Sn())){for(r=[],a=s,null!==(i=B())&&null!==(o=dn())?i=[i,o]:(i=null,s=a);null!==i;)r.push(i),a=s,null!==(i=B())&&null!==(o=dn())?i=[i,o]:(i=null,s=a);null!==r?e=[e,t,n,r]:(e=null,s=l)}else e=null,s=l;else e=null,s=l;else e=null,s=l;return e}function dn(){var e;return null===(e=fn())&&null===(e=_n())&&null===(e=pn())&&null===(e=mn())&&null===(e=vn())&&(e=Et()),e}function fn(){var e,t,r,i,l,a;return i=s,l=s,"ttl"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"ttl"')),null!==e&&null!==(t=M())&&null!==(r=An())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.ttl=a)),null===e&&(s=i),e}function _n(){var e,t,r,i,l,a;return i=s,l=s,"maddr"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"maddr"')),null!==e&&null!==(t=M())&&null!==(r=le())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.maddr=a)),null===e&&(s=i),e}function pn(){var e,t,r,i,l,a;return i=s,l=s,"received"===n.substr(s,8).toLowerCase()?(e=n.substr(s,8),s+=8):(e=null,0===o&&u('"received"')),null!==e&&null!==(t=M())?(null===(r=pe())&&(r=de()),null!==r?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(a=e[2],e=void(jn.received=a)),null===e&&(s=i),e}function mn(){var e,t,r,i,l,a;return i=s,l=s,"branch"===n.substr(s,6).toLowerCase()?(e=n.substr(s,6),s+=6):(e=null,0===o&&u('"branch"')),null!==e&&null!==(t=M())&&null!==(r=k())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.branch=a)),null===e&&(s=i),e}function vn(){var e,t,r,i,l;return i=s,"rport"===n.substr(s,5).toLowerCase()?(e=n.substr(s,5),s+=5):(e=null,0===o&&u('"rport"')),null!==e?(l=s,null!==(t=M())&&null!==(r=gn())?t=[t,r]:(t=null,s=l),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=i)):(e=null,s=i),e}function gn(){var e,t,n,r,i,o,l,a;return o=s,l=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")?e=[e,t,n,r,i]:(e=null,s=l),null!==e&&(a=e,e=void(jn.rport=parseInt(a.join("")))),null===e&&(s=o),e}function yn(){var e,t,n,r,i,o;return o=s,null!==(e=Tn())&&null!==(t=P())&&null!==(n=k())&&null!==(r=P())&&null!==(i=bn())?e=[e,t,n,r,i]:(e=null,s=o),e}function Tn(){var e,t,r;return t=s,"sip"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"SIP"')),null===e&&(e=k()),null!==e&&(r=e,e=void(jn.protocol=r)),null===e&&(s=t),e}function bn(){var e,t,r;return t=s,"udp"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"UDP"')),null===e&&("tcp"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"TCP"')),null===e&&("tls"===n.substr(s,3).toLowerCase()?(e=n.substr(s,3),s+=3):(e=null,0===o&&u('"TLS"')),null===e&&("sctp"===n.substr(s,4).toLowerCase()?(e=n.substr(s,4),s+=4):(e=null,0===o&&u('"SCTP"')),null===e&&(e=k())))),null!==e&&(r=e,e=void(jn.transport=r)),null===e&&(s=t),e}function Sn(){var e,t,n,r,i;return r=s,null!==(e=En())?(i=s,null!==(t=G())&&null!==(n=Cn())?t=[t,n]:(t=null,s=i),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=r)):(e=null,s=r),e}function En(){var e,t,r;return t=s,null===(e=pe())&&null===(e=he())&&(e=ae()),null!==e&&(r=t,e=void(jn.host=n.substring(s,r))),null===e&&(s=t),e}function Cn(){var e,t,n,r,i,o,l,a;return o=s,l=s,null!==(e=null!==(e=h())?e:"")&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")&&null!==(r=null!==(r=h())?r:"")&&null!==(i=null!==(i=h())?i:"")?e=[e,t,n,r,i]:(e=null,s=l),null!==e&&(a=e,e=void(jn.port=parseInt(a.join("")))),null===e&&(s=o),e}function An(){var e,t,n,r,i;return r=s,i=s,null!==(e=h())&&null!==(t=null!==(t=h())?t:"")&&null!==(n=null!==(n=h())?n:"")?e=[e,t,n]:(e=null,s=i),null!==e&&(e=parseInt(e.join(""))),null===e&&(s=r),e}function Rn(){var e,t,n;return t=s,null!==(e=bt())&&(n=e,e=void(jn.expires=n)),null===e&&(s=t),e}function wn(){var e;return null===(e=In())&&(e=Et()),e}function In(){var e,t,r,i,l,a;return i=s,l=s,"refresher"===n.substr(s,9).toLowerCase()?(e=n.substr(s,9),s+=9):(e=null,0===o&&u('"refresher"')),null!==e&&null!==(t=M())?("uac"===n.substr(s,3).toLowerCase()?(r=n.substr(s,3),s+=3):(r=null,0===o&&u('"uac"')),null===r&&("uas"===n.substr(s,3).toLowerCase()?(r=n.substr(s,3),s+=3):(r=null,0===o&&u('"uas"'))),null!==r?e=[e,t,r]:(e=null,s=l)):(e=null,s=l),null!==e&&(a=e[2],e=void(jn.refresher=a.toLowerCase())),null===e&&(s=i),e}function On(){var e,t;for(e=[],null===(t=I())&&null===(t=N())&&(t=C());null!==t;)e.push(t),null===(t=I())&&null===(t=N())&&(t=C());return e}function Nn(){var e,t,r,i,l,a,c,h,d,f,_,p;return f=s,_=s,null!==(e=Un())?(45===n.charCodeAt(s)?(t="-",s++):(t=null,0===o&&u('"-"')),null!==t&&null!==(r=kn())?(45===n.charCodeAt(s)?(i="-",s++):(i=null,0===o&&u('"-"')),null!==i&&null!==(l=kn())?(45===n.charCodeAt(s)?(a="-",s++):(a=null,0===o&&u('"-"')),null!==a&&null!==(c=kn())?(45===n.charCodeAt(s)?(h="-",s++):(h=null,0===o&&u('"-"')),null!==h&&null!==(d=xn())?e=[e,t,r,i,l,a,c,h,d]:(e=null,s=_)):(e=null,s=_)):(e=null,s=_)):(e=null,s=_)):(e=null,s=_),null!==e&&(p=f,e[0],e=void(jn=n.substring(s+5,p))),null===e&&(s=f),e}function kn(){var e,t,n,r,i;return i=s,null!==(e=f())&&null!==(t=f())&&null!==(n=f())&&null!==(r=f())?e=[e,t,n,r]:(e=null,s=i),e}function Un(){var e,t,n;return n=s,null!==(e=kn())&&null!==(t=kn())?e=[e,t]:(e=null,s=n),e}function xn(){var e,t,n,r;return r=s,null!==(e=kn())&&null!==(t=kn())&&null!==(n=kn())?e=[e,t,n]:(e=null,s=r),e}function Dn(){var e,t,r,i,l,a,c;return i=s,l=s,null!==(e=x())?(a=s,64===n.charCodeAt(s)?(t="@",s++):(t=null,0===o&&u('"@"')),null!==t&&null!==(r=x())?t=[t,r]:(t=null,s=a),null!==(t=null!==t?t:"")?e=[e,t]:(e=null,s=l)):(e=null,s=l),null!==e&&(c=i,e=void(jn.call_id=n.substring(s,c))),null===e&&(s=i),e}function Pn(){var e;return null===(e=Mn())&&null===(e=qn())&&null===(e=Ln())&&(e=Et()),e}function Mn(){var e,t,r,i,l,a;return i=s,l=s,"to-tag"===n.substr(s,6)?(e="to-tag",s+=6):(e=null,0===o&&u('"to-tag"')),null!==e&&null!==(t=M())&&null!==(r=k())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.to_tag=a)),null===e&&(s=i),e}function qn(){var e,t,r,i,l,a;return i=s,l=s,"from-tag"===n.substr(s,8)?(e="from-tag",s+=8):(e=null,0===o&&u('"from-tag"')),null!==e&&null!==(t=M())&&null!==(r=k())?e=[e,t,r]:(e=null,s=l),null!==e&&(a=e[2],e=void(jn.from_tag=a)),null===e&&(s=i),e}function Ln(){var e,t;return t=s,"early-only"===n.substr(s,10)?(e="early-only",s+=10):(e=null,0===o&&u('"early-only"')),null!==e&&(e=void(jn.early_only=!0)),null===e&&(s=t),e}var Hn=e("./URI"),Fn=e("./NameAddrHeader"),jn={};if(null===i[r]()||s!==n.length){var Bn=Math.max(s,l),Gn=Bn<n.length?n.charAt(Bn):null,Vn=function(){for(var e=1,t=1,r=!1,i=0;i<Math.max(s,l);i++){var o=n.charAt(i);"\n"===o?(r||e++,t=1,r=!1):"\r"===o||"\u2028"===o||"\u2029"===o?(e++,t=1,r=!0):(t++,r=!1)}return{line:e,column:t}}();return new this.SyntaxError(function(e){e.sort();for(var t=null,n=[],r=0;r<e.length;r++)e[r]!==t&&(n.push(e[r]),t=e[r]);return n}(a),Gn,Bn,Vn.line,Vn.column),-1}return jn},toSource:function(){return this._source},SyntaxError:function(e,n,r,i,s){this.name="SyntaxError",this.expected=e,this.found=n,this.message=function(e,n){var r;switch(e.length){case 0:r="end of input";break;case 1:r=e[0];break;default:r=e.slice(0,e.length-1).join(", ")+" or "+e[e.length-1]}return"Expected "+r+" but "+(n?t(n):"end of input")+" found."}(e,n),this.offset=r,this.line=i,this.column=s}};return n.SyntaxError.prototype=Error.prototype,n}()},{"./NameAddrHeader":11,"./URI":29}],8:[function(e,t,n){"use strict";var r=e("../package.json"),i=e("./Constants"),s=e("./Exceptions"),o=e("./Utils"),l=e("./UA"),a=e("./URI"),u=e("./NameAddrHeader"),c=e("./Grammar"),h=e("./WebSocketInterface");e("debug")("JsSIP")("version %s",r.version),t.exports={C:i,Exceptions:s,Utils:o,UA:l,URI:a,NameAddrHeader:u,WebSocketInterface:h,Grammar:c,debug:e("debug"),get name(){return r.title},get version(){return r.version}}},{"../package.json":42,"./Constants":2,"./Exceptions":6,"./Grammar":7,"./NameAddrHeader":11,"./UA":28,"./URI":29,"./Utils":30,"./WebSocketInterface":31,debug:34}],9:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("debug"),s="JsSIP";t.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t?(this._debug=i.default("".concat(s,":").concat(t)),this._warn=i.default("".concat(s,":WARN:").concat(t)),this._error=i.default("".concat(s,":ERROR:").concat(t))):(this._debug=i.default(s),this._warn=i.default("".concat(s,":WARN")),this._error=i.default("".concat(s,":ERROR"))),this._debug.log=console.info.bind(console),this._warn.log=console.warn.bind(console),this._error.log=console.error.bind(console)}var t,n,o;return t=e,(n=[{key:"debug",get:function(){return this._debug}},{key:"warn",get:function(){return this._warn}},{key:"error",get:function(){return this._error}}])&&r(t.prototype,n),o&&r(t,o),e}()},{debug:34}],10:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var a=e("events").EventEmitter,u=e("./Logger"),c=e("./Constants"),h=e("./SIPMessage"),d=e("./Utils"),f=e("./RequestSender"),_=e("./Exceptions"),p=e("./URI"),m=new u("Message");t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,a);var t,n,r,l=o(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this))._ua=e,t._request=null,t._closed=!1,t._direction=null,t._local_identity=null,t._remote_identity=null,t._is_replied=!1,t._data={},t}return t=u,(n=[{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=e;if(void 0===e||void 0===t)throw new TypeError("Not enough arguments");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(i));var s=d.cloneArray(r.extraHeaders),o=d.cloneObject(r.eventHandlers),l=r.contentType||"text/plain",a={};for(var u in r.fromUserName&&(a.from_uri=new p("sip",r.fromUserName,this._ua.configuration.uri.host),s.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString()))),r.fromDisplayName&&(a.from_display_name=r.fromDisplayName),o)Object.prototype.hasOwnProperty.call(o,u)&&this.on(u,o[u]);s.push("Content-Type: ".concat(l)),this._request=new h.OutgoingRequest(c.MESSAGE,e,this._ua,a,s),t&&(this._request.body=t);var _=new f(this._ua,this._request,{onRequestTimeout:function(){n._onRequestTimeout()},onTransportError:function(){n._onTransportError()},onReceiveResponse:function(e){n._receiveResponse(e)}});this._newMessage("local",this._request),_.send()}},{key:"init_incoming",value:function(e){this._request=e,this._newMessage("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}},{key:"accept",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=d.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new _.NotSupportedError('"accept" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}},{key:"reject",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.status_code||480,n=e.reason_phrase,r=d.cloneArray(e.extraHeaders),i=e.body;if("incoming"!==this._direction)throw new _.NotSupportedError('"reject" not supported for outgoing Message');if(this._is_replied)throw new Error("incoming Message already replied");if(t<300||t>=700)throw new TypeError("Invalid status_code: ".concat(t));this._is_replied=!0,this._request.reply(t,n,r,i)}},{key:"_receiveResponse",value:function(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:var t=d.sipErrorCause(e.status_code);this._failed("remote",e,t)}}},{key:"_onRequestTimeout",value:function(){this._closed||this._failed("system",null,c.causes.REQUEST_TIMEOUT)}},{key:"_onTransportError",value:function(){this._closed||this._failed("system",null,c.causes.CONNECTION_ERROR)}},{key:"_close",value:function(){this._closed=!0,this._ua.destroyMessage(this)}},{key:"_newMessage",value:function(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newMessage(this,{originator:e,message:this,request:t})}},{key:"_failed",value:function(e,t,n){m.debug("MESSAGE failed"),this._close(),m.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}},{key:"_succeeded",value:function(e,t){m.debug("MESSAGE succeeded"),this._close(),m.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}])&&i(t.prototype,n),r&&i(t,r),u}()},{"./Constants":2,"./Exceptions":6,"./Logger":9,"./RequestSender":21,"./SIPMessage":22,"./URI":29,"./Utils":30,events:33}],11:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./URI"),s=e("./Grammar");t.exports=function(){function e(t,n,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t&&t instanceof i))throw new TypeError('missing or invalid "uri" parameter');for(var s in this._uri=t,this._parameters={},this.display_name=n,r)Object.prototype.hasOwnProperty.call(r,s)&&this.setParam(s,r[s])}var t,n,o;return t=e,o=[{key:"parse",value:function(e){return-1!==(e=s.parse(e,"Name_Addr_Header"))?e:void 0}}],(n=[{key:"uri",get:function(){return this._uri}},{key:"display_name",get:function(){return this._display_name},set:function(e){this._display_name=0===e?"0":e}},{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"clone",value:function(){return new e(this._uri.clone(),this._display_name,JSON.parse(JSON.stringify(this._parameters)))}},{key:"_quote",value:function(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}},{key:"toString",value:function(){var e=this._display_name?'"'.concat(this._quote(this._display_name),'" '):"";for(var t in e+="<".concat(this._uri.toString(),">"),this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,t)&&(e+=";".concat(t),null!==this._parameters[t]&&(e+="=".concat(this._parameters[t])));return e}}])&&r(t.prototype,n),o&&r(t,o),e}()},{"./Grammar":7,"./URI":29}],12:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=a(e);if(t){var s=a(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return l(e)}(this,n)}}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var u=e("events").EventEmitter,c=e("./Logger"),h=e("./Constants"),d=e("./Utils"),f=e("./Dialog"),_=new c("Notifier"),p={NOTIFY_RESPONSE_TIMEOUT:0,NOTIFY_TRANSPORT_ERROR:1,NOTIFY_NON_OK_RESPONSE:2,NOTIFY_FAILED_AUTHENTICATION:3,SEND_FINAL_NOTIFY:4,RECEIVE_UNSUBSCRIBE:5,SUBSCRIPTION_EXPIRED:6,STATE_PENDING:0,STATE_ACTIVE:1,STATE_TERMINATED:2};t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(c,u);var t,n,r,a=o(c);function c(e,t,n,r){var i,s=r.extraHeaders,o=r.allowEvents,u=r.pending;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),_.debug("new"),i=a.call(this),!t)throw new TypeError("subscribe is undefined");if(!n)throw new TypeError("contentType is undefined");i._ua=e,i._initial_subscribe=t,i._expires_timestamp=null,i._expires_timer=null,i._state=u?p.STATE_PENDING:p.STATE_ACTIVE,i._terminated_reason=null,i._terminated_retry_after=null,i.data={},i._dialog=null;var h=t.getHeader("event");i._content_type=n,i._expires=parseInt(t.getHeader("expires")),i._headers=d.cloneArray(s),i._headers.push("Event: ".concat(h)),i._contact=i._headers.find(function(e){return e.startsWith("Contact")}),i._contact||(i._contact="Contact: <sip:".concat(t.to.uri.user,"@").concat(d.createRandomToken(12),".invalid;transport=ws>"),i._headers.push(i._contact)),o&&i._headers.push("Allow-Events: ".concat(o)),i._target=t.from.uri.user,t.to_tag=d.newTag();var m=new f(l(i),t,"UAS");if(m.error)throw _.warn(m.error),new Error("SUBSCRIBE missed Contact");return i._dialog=m,i._expires>0&&i._setExpiresTimer(),i}return t=c,r=[{key:"C",get:function(){return p}}],(n=[{key:"C",get:function(){return p}},{key:"receiveRequest",value:function(e){if(e.method===h.SUBSCRIBE){var t=e.getHeader("expires");null==t&&(t="900",_.debug("Missed expires header. Set by default ".concat(t))),this._expires=parseInt(t),e.reply(200,null,["Expires: ".concat(this._expires),"".concat(this._contact)]);var n=e.body,r=e.getHeader("content-type"),i=0===this._expires;i||this._setExpiresTimer(),_.debug('emit "subscribe"'),this.emit("subscribe",i,e,n,r),i&&this._dialogTerminated(p.RECEIVE_UNSUBSCRIBE)}else e.reply(405)}},{key:"start",value:function(){_.debug("start()"),this.receiveRequest(this._initial_subscribe)}},{key:"setActiveState",value:function(){_.debug("setActiveState()"),this._state===p.STATE_PENDING&&(this._state=p.STATE_ACTIVE)}},{key:"notify",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(_.debug("notify()"),this._dialog){var n=this._stateNumberToString(this._state);if(this._state!==p.STATE_TERMINATED){var r=Math.floor((this._expires_timestamp-(new Date).getTime())/1e3);r<0&&(r=0),n+=";expires=".concat(r)}else this._terminated_reason&&(n+=";reason=".concat(this._terminated_reason)),null!==this._terminated_retry_after&&(n+=";retry-after=".concat(this._terminated_retry_after));var i=this._headers.slice();i.push("Subscription-State: ".concat(n)),t&&i.push("Content-Type: ".concat(this._content_type)),this._dialog.sendRequest(h.NOTIFY,{body:t,extraHeaders:i,eventHandlers:{onRequestTimeout:function(){e._dialogTerminated(p.NOTIFY_RESPONSE_TIMEOUT)},onTransportError:function(){e._dialogTerminated(p.NOTIFY_TRANSPORT_ERROR)},onErrorResponse:function(t){401===t.status_code||407===t.status_code?e._dialogTerminated(p.NOTIFY_FAILED_AUTHENTICATION):e._dialogTerminated(p.NOTIFY_NON_OK_RESPONSE)},onDialogError:function(){e._dialogTerminated(p.NOTIFY_NON_OK_RESPONSE)}}})}else _.warn("final notify has sent")}},{key:"terminate",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;_.debug("terminate()"),this._state=p.STATE_TERMINATED,this._terminated_reason=t,this._terminated_retry_after=n,this.notify(e),this._dialogTerminated(p.SEND_FINAL_NOTIFY)}},{key:"state",get:function(){return this._state}},{key:"id",get:function(){return this._dialog?this._dialog.id:null}},{key:"_dialogTerminated",value:function(e){if(this._dialog){this._state=p.STATE_TERMINATED,clearTimeout(this._expires_timer),this._dialog&&(this._dialog.terminate(),this._dialog=null);var t=e===p.SUBSCRIPTION_EXPIRED;_.debug('emit "terminated" code='.concat(e,", send final notify=").concat(t)),this.emit("terminated",e,t)}}},{key:"_setExpiresTimer",value:function(){var e=this;this._expires_timestamp=(new Date).getTime()+1e3*this._expires,clearTimeout(this._expires_timer),this._expires_timer=setTimeout(function(){e._dialog&&(e._terminated_reason="timeout",e.notify(),e._dialogTerminated(p.SUBSCRIPTION_EXPIRED))},1e3*this._expires)}},{key:"_stateNumberToString",value:function(e){switch(e){case p.STATE_PENDING:return"pending";case p.STATE_ACTIVE:return"active";case p.STATE_TERMINATED:return"terminated";default:throw new TypeError("wrong state value")}}}])&&i(t.prototype,n),r&&i(t,r),c}()},{"./Constants":2,"./Dialog":3,"./Logger":9,"./Utils":30,events:33}],13:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var a=e("events").EventEmitter,u=e("./Logger"),c=e("./Constants"),h=e("./SIPMessage"),d=e("./Utils"),f=e("./RequestSender"),_=e("./Exceptions"),p=new u("Options");t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,a);var t,n,r,l=o(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this))._ua=e,t._request=null,t._closed=!1,t._direction=null,t._local_identity=null,t._remote_identity=null,t._is_replied=!1,t._data={},t}return t=u,(n=[{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=e;if(void 0===e)throw new TypeError("A target is required for OPTIONS");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(i));var s=d.cloneArray(r.extraHeaders),o=d.cloneObject(r.eventHandlers),l=r.contentType||"application/sdp";for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&this.on(a,o[a]);s.push("Content-Type: ".concat(l)),this._request=new h.OutgoingRequest(c.OPTIONS,e,this._ua,null,s),t&&(this._request.body=t);var u=new f(this._ua,this._request,{onRequestTimeout:function(){n._onRequestTimeout()},onTransportError:function(){n._onTransportError()},onReceiveResponse:function(e){n._receiveResponse(e)}});this._newOptions("local",this._request),u.send()}},{key:"init_incoming",value:function(e){this._request=e,this._newOptions("remote",e),this._is_replied||(this._is_replied=!0,e.reply(200)),this._close()}},{key:"accept",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=d.cloneArray(e.extraHeaders),n=e.body;if("incoming"!==this._direction)throw new _.NotSupportedError('"accept" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");this._is_replied=!0,this._request.reply(200,null,t,n)}},{key:"reject",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.status_code||480,n=e.reason_phrase,r=d.cloneArray(e.extraHeaders),i=e.body;if("incoming"!==this._direction)throw new _.NotSupportedError('"reject" not supported for outgoing Options');if(this._is_replied)throw new Error("incoming Options already replied");if(t<300||t>=700)throw new TypeError("Invalid status_code: ".concat(t));this._is_replied=!0,this._request.reply(t,n,r,i)}},{key:"_receiveResponse",value:function(e){if(!this._closed)switch(!0){case/^1[0-9]{2}$/.test(e.status_code):break;case/^2[0-9]{2}$/.test(e.status_code):this._succeeded("remote",e);break;default:var t=d.sipErrorCause(e.status_code);this._failed("remote",e,t)}}},{key:"_onRequestTimeout",value:function(){this._closed||this._failed("system",null,c.causes.REQUEST_TIMEOUT)}},{key:"_onTransportError",value:function(){this._closed||this._failed("system",null,c.causes.CONNECTION_ERROR)}},{key:"_close",value:function(){this._closed=!0,this._ua.destroyMessage(this)}},{key:"_newOptions",value:function(e,t){"remote"===e?(this._direction="incoming",this._local_identity=t.to,this._remote_identity=t.from):"local"===e&&(this._direction="outgoing",this._local_identity=t.from,this._remote_identity=t.to),this._ua.newOptions(this,{originator:e,message:this,request:t})}},{key:"_failed",value:function(e,t,n){p.debug("OPTIONS failed"),this._close(),p.debug('emit "failed"'),this.emit("failed",{originator:e,response:t||null,cause:n})}},{key:"_succeeded",value:function(e,t){p.debug("OPTIONS succeeded"),this._close(),p.debug('emit "succeeded"'),this.emit("succeeded",{originator:e,response:t})}}])&&i(t.prototype,n),r&&i(t,r),u}()},{"./Constants":2,"./Exceptions":6,"./Logger":9,"./RequestSender":21,"./SIPMessage":22,"./Utils":30,events:33}],14:[function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=e("./Logger"),o=e("./Grammar"),l=e("./SIPMessage"),a=new s("Parser");function u(e,t){var n=t,r=0,i=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===r;){if(-1===(i=e.indexOf("\r\n",n)))return i;!e.substring(i+2,i+4).match(/(^\r\n)/)&&e.charAt(i+2).match(/(^\s+)/)?n=i+2:r=i}return r}function c(e,t,n,i){var s,a=t.indexOf(":",n),u=t.substring(n,a).trim(),c=t.substring(a+1,i).trim();switch(u.toLowerCase()){case"via":case"v":e.addHeader("via",c),1===e.getHeaders("via").length?(s=e.parseHeader("Via"))&&(e.via=s,e.via_branch=s.branch):s=0;break;case"from":case"f":e.setHeader("from",c),(s=e.parseHeader("from"))&&(e.from=s,e.from_tag=s.getParam("tag"));break;case"to":case"t":e.setHeader("to",c),(s=e.parseHeader("to"))&&(e.to=s,e.to_tag=s.getParam("tag"));break;case"record-route":if(-1===(s=o.parse(c,"Record_Route")))s=void 0;else{var h,d=r(s);try{for(d.s();!(h=d.n()).done;){var f=h.value;e.addHeader("record-route",c.substring(f.possition,f.offset)),e.headers["Record-Route"][e.getHeaders("record-route").length-1].parsed=f.parsed}}catch(e){d.e(e)}finally{d.f()}}break;case"call-id":case"i":e.setHeader("call-id",c),(s=e.parseHeader("call-id"))&&(e.call_id=c);break;case"contact":case"m":if(-1===(s=o.parse(c,"Contact")))s=void 0;else{var _,p=r(s);try{for(p.s();!(_=p.n()).done;){var m=_.value;e.addHeader("contact",c.substring(m.possition,m.offset)),e.headers.Contact[e.getHeaders("contact").length-1].parsed=m.parsed}}catch(e){p.e(e)}finally{p.f()}}break;case"content-length":case"l":e.setHeader("content-length",c),s=e.parseHeader("content-length");break;case"content-type":case"c":e.setHeader("content-type",c),s=e.parseHeader("content-type");break;case"cseq":e.setHeader("cseq",c),(s=e.parseHeader("cseq"))&&(e.cseq=s.value),e instanceof l.IncomingResponse&&(e.method=s.method);break;case"max-forwards":e.setHeader("max-forwards",c),s=e.parseHeader("max-forwards");break;case"www-authenticate":e.setHeader("www-authenticate",c),s=e.parseHeader("www-authenticate");break;case"proxy-authenticate":e.setHeader("proxy-authenticate",c),s=e.parseHeader("proxy-authenticate");break;case"session-expires":case"x":e.setHeader("session-expires",c),(s=e.parseHeader("session-expires"))&&(e.session_expires=s.expires,e.session_expires_refresher=s.refresher);break;case"refer-to":case"r":e.setHeader("refer-to",c),(s=e.parseHeader("refer-to"))&&(e.refer_to=s);break;case"replaces":e.setHeader("replaces",c),(s=e.parseHeader("replaces"))&&(e.replaces=s);break;case"event":case"o":e.setHeader("event",c),(s=e.parseHeader("event"))&&(e.event=s);break;default:e.addHeader(u,c),s=0}return void 0!==s||{error:'error parsing header "'.concat(u,'"')}}n.parseMessage=function(e,t){var n,r,i=e.indexOf("\r\n");if(-1!==i){var s=e.substring(0,i),h=o.parse(s,"Request_Response");if(-1!==h){h.status_code?((n=new l.IncomingResponse).status_code=h.status_code,n.reason_phrase=h.reason_phrase):((n=new l.IncomingRequest(t)).method=h.method,n.ruri=h.uri),n.data=e;for(var d=i+2;;){if(-2===(i=u(e,d))){r=d+2;break}if(-1===i)return void a.warn("parseMessage() | malformed message");if(!0!==(h=c(n,e,d,i)))return void a.warn("parseMessage() |",h.error);d=i+2}if(n.hasHeader("content-length")){var f=n.getHeader("content-length");n.body=e.substr(r,f)}else n.body=e.substring(r);return n}a.warn('parseMessage() | error parsing first line of SIP message: "'.concat(s,'"'))}else a.warn("parseMessage() | no CRLF found, not a SIP message")}},{"./Grammar":7,"./Logger":9,"./SIPMessage":22}],15:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=u(e);if(t){var s=u(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=e("events").EventEmitter,h=e("sdp-transform"),d=e("./Logger"),f=e("./Constants"),_=e("./Exceptions"),p=e("./Transactions"),m=e("./Utils"),v=e("./Timers"),g=e("./SIPMessage"),y=e("./Dialog"),T=e("./RequestSender"),b=e("./RTCSession/DTMF"),S=e("./RTCSession/Info"),E=e("./RTCSession/ReferNotifier"),C=e("./RTCSession/ReferSubscriber"),A=e("./URI"),R=new d("RTCSession"),w={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_ACK:6,STATUS_CANCELED:7,STATUS_TERMINATED:8,STATUS_CONFIRMED:9},I=["audio","video"];t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(u,c);var t,n,r,s=a(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),R.debug("new"),(t=s.call(this))._id=null,t._ua=e,t._status=w.STATUS_NULL,t._dialog=null,t._earlyDialogs={},t._contact=null,t._from_tag=null,t._to_tag=null,t._connection=null,t._connectionPromiseQueue=Promise.resolve(),t._request=null,t._is_canceled=!1,t._cancel_reason="",t._is_confirmed=!1,t._late_sdp=!1,t._rtcOfferConstraints=null,t._rtcAnswerConstraints=null,t._localMediaStream=null,t._localMediaStreamLocallyGenerated=!1,t._rtcReady=!0,t._iceReady=!1,t._timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null},t._direction=null,t._local_identity=null,t._remote_identity=null,t._start_time=null,t._end_time=null,t._tones=null,t._audioMuted=!1,t._videoMuted=!1,t._localHold=!1,t._remoteHold=!1,t._sessionTimers={enabled:t._ua.configuration.session_timers,refreshMethod:t._ua.configuration.session_timers_refresh_method,defaultExpires:f.SESSION_EXPIRES,currentExpires:null,running:!1,refresher:!1,timer:null},t._referSubscribers={},t._data={},t}return t=u,r=[{key:"C",get:function(){return w}}],(n=[{key:"C",get:function(){return w}},{key:"causes",get:function(){return f.causes}},{key:"id",get:function(){return this._id}},{key:"connection",get:function(){return this._connection}},{key:"contact",get:function(){return this._contact}},{key:"direction",get:function(){return this._direction}},{key:"local_identity",get:function(){return this._local_identity}},{key:"remote_identity",get:function(){return this._remote_identity}},{key:"start_time",get:function(){return this._start_time}},{key:"end_time",get:function(){return this._end_time}},{key:"data",get:function(){return this._data},set:function(e){this._data=e}},{key:"status",get:function(){return this._status}},{key:"isInProgress",value:function(){switch(this._status){case w.STATUS_NULL:case w.STATUS_INVITE_SENT:case w.STATUS_1XX_RECEIVED:case w.STATUS_INVITE_RECEIVED:case w.STATUS_WAITING_FOR_ANSWER:return!0;default:return!1}}},{key:"isEstablished",value:function(){switch(this._status){case w.STATUS_ANSWERED:case w.STATUS_WAITING_FOR_ACK:case w.STATUS_CONFIRMED:return!0;default:return!1}}},{key:"isEnded",value:function(){switch(this._status){case w.STATUS_CANCELED:case w.STATUS_TERMINATED:return!0;default:return!1}}},{key:"isMuted",value:function(){return{audio:this._audioMuted,video:this._videoMuted}}},{key:"isOnHold",value:function(){return{local:this._localHold,remote:this._remoteHold}}},{key:"connect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;R.debug("connect()");var r=e,i=m.cloneObject(t.eventHandlers),s=m.cloneArray(t.extraHeaders),o=m.cloneObject(t.mediaConstraints,{audio:!0,video:!0}),l=t.mediaStream||null,a=m.cloneObject(t.pcConfig,{iceServers:[]}),u=t.rtcConstraints||null,c=t.rtcOfferConstraints||null;if(this._rtcOfferConstraints=c,this._rtcAnswerConstraints=t.rtcAnswerConstraints||null,this._data=t.data||this._data,void 0===e)throw new TypeError("Not enough arguments");if(this._status!==w.STATUS_NULL)throw new _.InvalidStateError(this._status);if(!window.RTCPeerConnection)throw new _.NotSupportedError("WebRTC not supported");if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(r));for(var h in this._sessionTimers.enabled&&m.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=f.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=f.SESSION_EXPIRES),i)Object.prototype.hasOwnProperty.call(i,h)&&this.on(h,i[h]);this._from_tag=m.newTag();var d=t.anonymous||!1,p={from_tag:this._from_tag};this._contact=this._ua.contact.toString({anonymous:d,outbound:!0}),d?(p.from_display_name="Anonymous",p.from_uri=new A("sip","anonymous","anonymous.invalid"),s.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString())),s.push("Privacy: id")):t.fromUserName&&(p.from_uri=new A("sip",t.fromUserName,this._ua.configuration.uri.host),s.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString()))),t.fromDisplayName&&(p.from_display_name=t.fromDisplayName),s.push("Contact: ".concat(this._contact)),s.push("Content-Type: application/sdp"),this._sessionTimers.enabled&&s.push("Session-Expires: ".concat(this._sessionTimers.defaultExpires).concat(this._ua.configuration.session_timers_force_refresher?";refresher=uac":"")),this._request=new g.InitialOutgoingInviteRequest(e,this._ua,p,s),this._id=this._request.call_id+this._from_tag,this._createRTCConnection(a,u),this._direction="outgoing",this._local_identity=this._request.from,this._remote_identity=this._request.to,n&&n(this),this._newRTCSession("local",this._request),this._sendInitialRequest(o,c,l)}},{key:"init_incoming",value:function(e,t){var n,r=this;R.debug("init_incoming()");var i=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;if(e.body&&"application/sdp"!==i)e.reply(415);else if(this._status=w.STATUS_INVITE_RECEIVED,this._from_tag=e.from_tag,this._id=e.call_id+this._from_tag,this._request=e,this._contact=this._ua.contact.toString(),e.hasHeader("expires")&&(n=1e3*e.getHeader("expires")),e.to_tag=m.newTag(),this._createDialog(e,"UAS",!0)){if(e.body?this._late_sdp=!1:this._late_sdp=!0,this._status=w.STATUS_WAITING_FOR_ANSWER,this._timers.userNoAnswerTimer=setTimeout(function(){e.reply(408),r._failed("local",null,f.causes.NO_ANSWER)},this._ua.configuration.no_answer_timeout),n&&(this._timers.expiresTimer=setTimeout(function(){r._status===w.STATUS_WAITING_FOR_ANSWER&&(e.reply(487),r._failed("system",null,f.causes.EXPIRES))},n)),this._direction="incoming",this._local_identity=e.to,this._remote_identity=e.from,t&&t(this),this._newRTCSession("remote",e),this._status!==w.STATUS_TERMINATED){var s=["Contact: ".concat(this._contact)],o=this._ua.modes.ringing_header_mode;void 0!==o&&(Array.isArray(o)?s=s.concat(o):s.push(o)),e.reply(180,null,s),this._progress("local",null)}}else e.reply(500,"Missing Contact header field")}},{key:"answer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};R.debug("answer()");var n=this._request,r=m.cloneArray(t.extraHeaders),s=m.cloneObject(t.mediaConstraints),o=t.mediaStream||null,l=m.cloneObject(t.pcConfig,{iceServers:[]}),a=t.rtcConstraints||null,u=t.rtcAnswerConstraints||null,c=m.cloneObject(t.rtcOfferConstraints),h=!1,d=!1,p=!1,v=!1;if(this._rtcAnswerConstraints=u,this._rtcOfferConstraints=t.rtcOfferConstraints||null,this._data=t.data||this._data,"incoming"!==this._direction)throw new _.NotSupportedError('"answer" not supported for outgoing RTCSession');if(this._status!==w.STATUS_WAITING_FOR_ANSWER)throw new _.InvalidStateError(this._status);if(this._sessionTimers.enabled&&m.isDecimal(t.sessionTimersExpires)&&(t.sessionTimersExpires>=f.MIN_SESSION_EXPIRES?this._sessionTimers.defaultExpires=t.sessionTimersExpires:this._sessionTimers.defaultExpires=f.SESSION_EXPIRES),this._status=w.STATUS_ANSWERED,this._createDialog(n,"UAS")){clearTimeout(this._timers.userNoAnswerTimer),r.unshift("Contact: ".concat(this._contact));var g=n.parseSDP();Array.isArray(g.media)||(g.media=[g.media]);var y,T=i(g.media);try{for(T.s();!(y=T.n()).done;){var b=y.value;"audio"===b.type&&(h=!0,b.direction&&"sendrecv"!==b.direction||(p=!0)),"video"===b.type&&(d=!0,b.direction&&"sendrecv"!==b.direction||(v=!0))}}catch(e){T.e(e)}finally{T.f()}if(o&&!1===s.audio){var S,E=i(o.getAudioTracks());try{for(E.s();!(S=E.n()).done;){var C=S.value;o.removeTrack(C)}}catch(e){E.e(e)}finally{E.f()}}if(o&&!1===s.video){var A,I=i(o.getVideoTracks());try{for(I.s();!(A=I.n()).done;){var O=A.value;o.removeTrack(O)}}catch(e){I.e(e)}finally{I.f()}}o||void 0!==s.audio||(s.audio=p),o||void 0!==s.video||(s.video=v),o||h||c.offerToReceiveAudio||(s.audio=!1),o||d||c.offerToReceiveVideo||(s.video=!1),this._createRTCConnection(l,a),Promise.resolve().then(function(){return o||(s.audio||s.video?(e._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(s).catch(function(t){if(e._status===w.STATUS_TERMINATED)throw new Error("terminated");throw n.reply(480),e._failed("local",null,f.causes.USER_DENIED_MEDIA_ACCESS),R.warn('emit "getusermediafailed" [error:%o]',t),e.emit("getusermediafailed",t),new Error("getUserMedia() failed")})):void 0)}).then(function(t){if(e._status===w.STATUS_TERMINATED)throw new Error("terminated");e._localMediaStream=t,t&&t.getTracks().forEach(function(n){e._connection.addTrack(n,t)})}).then(function(){if(!e._late_sdp){var t={originator:"remote",type:"offer",sdp:n.body};R.debug('emit "sdp"'),e.emit("sdp",t);var r=new RTCSessionDescription({type:"offer",sdp:t.sdp});return e._connectionPromiseQueue=e._connectionPromiseQueue.then(function(){return e._connection.setRemoteDescription(r)}).catch(function(t){throw n.reply(488),e._failed("system",null,f.causes.WEBRTC_ERROR),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',t),e.emit("peerconnection:setremotedescriptionfailed",t),new Error("peerconnection.setRemoteDescription() failed")}),e._connectionPromiseQueue}}).then(function(){if(e._status===w.STATUS_TERMINATED)throw new Error("terminated");return e._connecting(n),e._late_sdp?e._createLocalDescription("offer",e._rtcOfferConstraints).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")}):e._createLocalDescription("answer",u).catch(function(){throw n.reply(500),new Error("_createLocalDescription() failed")})}).then(function(t){if(e._status===w.STATUS_TERMINATED)throw new Error("terminated");e._handleSessionTimersInIncomingRequest(n,r),n.reply(200,null,r,t,function(){e._status=w.STATUS_WAITING_FOR_ACK,e._setInvite2xxTimer(n,t),e._setACKTimer(),e._accepted("local")},function(){e._failed("system",null,f.causes.CONNECTION_ERROR)})}).catch(function(t){e._status!==w.STATUS_TERMINATED&&R.warn(t)})}else n.reply(500,"Error creating dialog")}},{key:"terminate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};R.debug("terminate()");var n,r=t.cause||f.causes.BYE,i=m.cloneArray(t.extraHeaders),s=t.body,o=t.status_code,l=t.reason_phrase;if(this._status===w.STATUS_TERMINATED)throw new _.InvalidStateError(this._status);switch(this._status){case w.STATUS_NULL:case w.STATUS_INVITE_SENT:case w.STATUS_1XX_RECEIVED:if(R.debug("canceling session"),o&&(o<200||o>=700))throw new TypeError("Invalid status_code: ".concat(o));o&&(l=l||f.REASON_PHRASE[o]||"",n="SIP ;cause=".concat(o,' ;text="').concat(l,'"')),this._status===w.STATUS_NULL||this._status===w.STATUS_INVITE_SENT?(this._is_canceled=!0,this._cancel_reason=n):this._status===w.STATUS_1XX_RECEIVED&&this._request.cancel(n),this._status=w.STATUS_CANCELED,this._failed("local",null,f.causes.CANCELED);break;case w.STATUS_WAITING_FOR_ANSWER:case w.STATUS_ANSWERED:if(R.debug("rejecting session"),(o=o||480)<300||o>=700)throw new TypeError("Invalid status_code: ".concat(o));this._request.reply(o,l,i,s),this._failed("local",null,f.causes.REJECTED);break;case w.STATUS_WAITING_FOR_ACK:case w.STATUS_CONFIRMED:if(R.debug("terminating session"),l=t.reason_phrase||f.REASON_PHRASE[o]||"",o&&(o<200||o>=700))throw new TypeError("Invalid status_code: ".concat(o));if(o&&i.push("Reason: SIP ;cause=".concat(o,'; text="').concat(l,'"')),this._status===w.STATUS_WAITING_FOR_ACK&&"incoming"===this._direction&&this._request.server_transaction.state!==p.C.STATUS_TERMINATED){var a=this._dialog;this.receiveRequest=function(t){t.method===f.ACK&&(e.sendRequest(f.BYE,{extraHeaders:i,body:s}),a.terminate())},this._request.server_transaction.on("stateChanged",function(){e._request.server_transaction.state===p.C.STATUS_TERMINATED&&(e.sendRequest(f.BYE,{extraHeaders:i,body:s}),a.terminate())}),this._ended("local",null,r),this._dialog=a,this._ua.newDialog(a)}else this.sendRequest(f.BYE,{extraHeaders:i,body:s}),this._ended("local",null,r)}}},{key:"sendDTMF",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};R.debug("sendDTMF() | tones: %s",e);var n=0,r=t.duration||null,i=t.interToneGap||null,s=t.transportType||f.DTMF_TRANSPORT.INFO;if(void 0===e)throw new TypeError("Not enough arguments");if(this._status!==w.STATUS_CONFIRMED&&this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_1XX_RECEIVED)throw new _.InvalidStateError(this._status);if(s!==f.DTMF_TRANSPORT.INFO&&s!==f.DTMF_TRANSPORT.RFC2833)throw new TypeError("invalid transportType: ".concat(s));if("number"==typeof e&&(e=e.toString()),!e||"string"!=typeof e||!e.match(/^[0-9A-DR#*,]+$/i))throw new TypeError("Invalid tones: ".concat(e));if(r&&!m.isDecimal(r))throw new TypeError("Invalid tone duration: ".concat(r));if(r?r<b.C.MIN_DURATION?(R.debug('"duration" value is lower than the minimum allowed, setting it to '.concat(b.C.MIN_DURATION," milliseconds")),r=b.C.MIN_DURATION):r>b.C.MAX_DURATION?(R.debug('"duration" value is greater than the maximum allowed, setting it to '.concat(b.C.MAX_DURATION," milliseconds")),r=b.C.MAX_DURATION):r=Math.abs(r):r=b.C.DEFAULT_DURATION,t.duration=r,i&&!m.isDecimal(i))throw new TypeError("Invalid interToneGap: ".concat(i));if(i?i<b.C.MIN_INTER_TONE_GAP?(R.debug('"interToneGap" value is lower than the minimum allowed, setting it to '.concat(b.C.MIN_INTER_TONE_GAP," milliseconds")),i=b.C.MIN_INTER_TONE_GAP):i=Math.abs(i):i=b.C.DEFAULT_INTER_TONE_GAP,s!==f.DTMF_TRANSPORT.RFC2833)this._tones?this._tones+=e:(this._tones=e,function e(){var s=this;var o;if(this._status===w.STATUS_TERMINATED||!this._tones||n>=this._tones.length)return void(this._tones=null);var l=this._tones[n];n+=1;if(","===l)o=2e3;else{var a=new b(this);t.eventHandlers={onFailed:function(){s._tones=null}},a.send(l,t),o=r+i}setTimeout(e.bind(this),o)}.call(this));else{var o=this._getDTMFRTPSender();o&&(e=o.toneBuffer+e,o.insertDTMF(e,r,i))}}},{key:"sendInfo",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(R.debug("sendInfo()"),this._status!==w.STATUS_CONFIRMED&&this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_1XX_RECEIVED)throw new _.InvalidStateError(this._status);new S(this).send(e,t,n)}},{key:"mute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!1};R.debug("mute()");var t=!1,n=!1;!1===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!0,this._toggleMuteAudio(!0)),!1===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!0,this._toggleMuteVideo(!0)),!0!==t&&!0!==n||this._onmute({audio:t,video:n})}},{key:"unmute",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{audio:!0,video:!0};R.debug("unmute()");var t=!1,n=!1;!0===this._audioMuted&&e.audio&&(t=!0,this._audioMuted=!1,!1===this._localHold&&this._toggleMuteAudio(!1)),!0===this._videoMuted&&e.video&&(n=!0,this._videoMuted=!1,!1===this._localHold&&this._toggleMuteVideo(!1)),!0!==t&&!0!==n||this._onunmute({audio:t,video:n})}},{key:"hold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(R.debug("hold()"),this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;if(!0===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!0,this._onhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:f.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Hold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"unhold",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(R.debug("unhold()"),this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;if(!1===this._localHold)return!1;if(!this._isReadyToReOffer())return!1;this._localHold=!1,this._onunhold("local");var r={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:f.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Unhold Failed"})}};return t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:r,extraHeaders:t.extraHeaders}),!0}},{key:"renegotiate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;R.debug("renegotiate()");var r=t.rtcOfferConstraints||null;if(this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;if(!this._isReadyToReOffer())return!1;var i={succeeded:function(){n&&n()},failed:function(){e.terminate({cause:f.causes.WEBRTC_ERROR,status_code:500,reason_phrase:"Media Renegotiation Failed"})}};return this._setLocalMediaStatus(),t.useUpdate?this._sendUpdate({sdpOffer:!0,eventHandlers:i,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}):this._sendReinvite({eventHandlers:i,rtcOfferConstraints:r,extraHeaders:t.extraHeaders}),!0}},{key:"refer",value:function(e,t){var n=this;R.debug("refer()");var r=e;if(this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;if(!(e=this._ua.normalizeTarget(e)))throw new TypeError("Invalid target: ".concat(r));var i=new C(this);i.sendRefer(e,t);var s=i.id;return this._referSubscribers[s]=i,i.on("requestFailed",function(){delete n._referSubscribers[s]}),i.on("accepted",function(){delete n._referSubscribers[s]}),i.on("failed",function(){delete n._referSubscribers[s]}),i}},{key:"sendRequest",value:function(e,t){return R.debug("sendRequest()"),this._dialog.sendRequest(e,t)}},{key:"receiveRequest",value:function(e){var t=this;if(R.debug("receiveRequest()"),e.method===f.CANCEL)this._status!==w.STATUS_WAITING_FOR_ANSWER&&this._status!==w.STATUS_ANSWERED||(this._status=w.STATUS_CANCELED,this._request.reply(487),this._failed("remote",e,f.causes.CANCELED));else switch(e.method){case f.ACK:if(this._status!==w.STATUS_WAITING_FOR_ACK)return;if(this._status=w.STATUS_CONFIRMED,clearTimeout(this._timers.ackTimer),clearTimeout(this._timers.invite2xxTimer),this._late_sdp){if(!e.body){this.terminate({cause:f.causes.MISSING_SDP,status_code:400});break}var n={originator:"remote",type:"answer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",n);var r=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(r)}).then(function(){t._is_confirmed||t._confirmed("remote",e)}).catch(function(e){t.terminate({cause:f.causes.BAD_MEDIA_DESCRIPTION,status_code:488}),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else this._is_confirmed||this._confirmed("remote",e);break;case f.BYE:this._status===w.STATUS_CONFIRMED||this._status===w.STATUS_WAITING_FOR_ACK?(e.reply(200),this._ended("remote",e,f.causes.BYE)):this._status===w.STATUS_INVITE_RECEIVED||this._status===w.STATUS_WAITING_FOR_ANSWER?(e.reply(200),this._request.reply(487,"BYE Received"),this._ended("remote",e,f.causes.BYE)):e.reply(403,"Wrong Status");break;case f.INVITE:this._status===w.STATUS_CONFIRMED?e.hasHeader("replaces")?this._receiveReplaces(e):this._receiveReinvite(e):e.reply(403,"Wrong Status");break;case f.INFO:if(this._status===w.STATUS_1XX_RECEIVED||this._status===w.STATUS_WAITING_FOR_ANSWER||this._status===w.STATUS_ANSWERED||this._status===w.STATUS_WAITING_FOR_ACK||this._status===w.STATUS_CONFIRMED){var i=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0;i&&i.match(/^application\/dtmf-relay/i)?new b(this).init_incoming(e):void 0!==i?new S(this).init_incoming(e):e.reply(415)}else e.reply(403,"Wrong Status");break;case f.UPDATE:this._status===w.STATUS_CONFIRMED?this._receiveUpdate(e):e.reply(403,"Wrong Status");break;case f.REFER:this._status===w.STATUS_CONFIRMED?this._receiveRefer(e):e.reply(403,"Wrong Status");break;case f.NOTIFY:var s={event:e.event,request:e,taken:!1};if(this.emit("sipEvent",s),s.taken){e.reply(200);break}this._status===w.STATUS_CONFIRMED?this._receiveNotify(e):e.reply(403,"Wrong Status");break;default:e.reply(501)}}},{key:"onTransportError",value:function(){R.warn("onTransportError()"),this._status!==w.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:f.causes.CONNECTION_ERROR,cause:f.causes.CONNECTION_ERROR})}},{key:"onRequestTimeout",value:function(){R.warn("onRequestTimeout()"),this._status!==w.STATUS_TERMINATED&&this.terminate({status_code:408,reason_phrase:f.causes.REQUEST_TIMEOUT,cause:f.causes.REQUEST_TIMEOUT})}},{key:"onDialogError",value:function(){R.warn("onDialogError()"),this._status!==w.STATUS_TERMINATED&&this.terminate({status_code:500,reason_phrase:f.causes.DIALOG_ERROR,cause:f.causes.DIALOG_ERROR})}},{key:"newDTMF",value:function(e){R.debug("newDTMF()"),this.emit("newDTMF",e)}},{key:"newInfo",value:function(e){R.debug("newInfo()"),this.emit("newInfo",e)}},{key:"_isReadyToReOffer",value:function(){return this._rtcReady?this._dialog?!0!==this._dialog.uac_pending_reply&&!0!==this._dialog.uas_pending_reply||(R.debug("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress"),!1):(R.debug("_isReadyToReOffer() | session not established yet"),!1):(R.debug("_isReadyToReOffer() | internal WebRTC status not ready"),!1)}},{key:"_close",value:function(){if(R.debug("close()"),this._localMediaStream&&this._localMediaStreamLocallyGenerated&&(R.debug("close() | closing local MediaStream"),m.closeMediaStream(this._localMediaStream)),this._status!==w.STATUS_TERMINATED){if(this._status=w.STATUS_TERMINATED,this._connection)try{this._connection.close()}catch(e){R.warn("close() | error closing the RTCPeerConnection: %o",e)}for(var e in this._timers)Object.prototype.hasOwnProperty.call(this._timers,e)&&clearTimeout(this._timers[e]);for(var t in clearTimeout(this._sessionTimers.timer),this._dialog&&(this._dialog.terminate(),delete this._dialog),this._earlyDialogs)Object.prototype.hasOwnProperty.call(this._earlyDialogs,t)&&(this._earlyDialogs[t].terminate(),delete this._earlyDialogs[t]);for(var n in this._referSubscribers)Object.prototype.hasOwnProperty.call(this._referSubscribers,n)&&delete this._referSubscribers[n];this._ua.destroyRTCSession(this)}}},{key:"_setInvite2xxTimer",value:function(e,t){var n=v.T1;this._timers.invite2xxTimer=setTimeout(function r(){this._status===w.STATUS_WAITING_FOR_ACK&&(e.reply(200,null,["Contact: ".concat(this._contact)],t),n<v.T2&&(n*=2)>v.T2&&(n=v.T2),this._timers.invite2xxTimer=setTimeout(r.bind(this),n))}.bind(this),n)}},{key:"_setACKTimer",value:function(){var e=this;this._timers.ackTimer=setTimeout(function(){e._status===w.STATUS_WAITING_FOR_ACK&&(R.debug("no ACK received, terminating the session"),clearTimeout(e._timers.invite2xxTimer),e.sendRequest(f.BYE),e._ended("remote",null,f.causes.NO_ACK))},v.TIMER_H)}},{key:"_createRTCConnection",value:function(e,t){var n=this;this._connection=new RTCPeerConnection(e,t),this._connection.addEventListener("iceconnectionstatechange",function(){var e=n._connection.iceConnectionState;if("failed"===e&&n.terminate({cause:f.causes.RTP_TIMEOUT,status_code:408,reason_phrase:f.causes.RTP_TIMEOUT}),void 0!==n._ua.modes.chrome_rtp_timeout_fix&&navigator.webkitGetUserMedia&&"disconnected"===e){var t=n._ua.modes.chrome_rtp_timeout_fix;R.debug("AC: Chrome RTP timeout fix: iceConnectionState==disconnected: check that this will continue for ".concat(t," seconds..."));!function e(){"disconnected"===n._connection.iceConnectionState?t-- >0?setTimeout(function(){return e()},1e3):(R.debug("AC: Chrome RTP timeout fix: Hangup call"),n.terminate({cause:f.causes.RTP_TIMEOUT,status_code:408,reason_phrase:f.causes.RTP_TIMEOUT})):R.debug("AC: Chrome RTP timeout fix: iceConnectionState=".concat(n._connection.iceConnectionState))}()}}),R.debug('emit "peerconnection"'),this.emit("peerconnection",{peerconnection:this._connection})}},{key:"_createLocalDescription",value:function(e,t){var n=this;if(R.debug("createLocalDescription()"),"offer"!==e&&"answer"!==e)throw new Error('createLocalDescription() | invalid type "'.concat(e,'"'));var r=this._connection;return this._rtcReady=!1,Promise.resolve().then(function(){return"offer"===e?r.createOffer(t).catch(function(e){return R.warn('emit "peerconnection:createofferfailed" [error:%o]',e),n.emit("peerconnection:createofferfailed",e),Promise.reject(e)}):r.createAnswer(t).catch(function(e){return R.warn('emit "peerconnection:createanswerfailed" [error:%o]',e),n.emit("peerconnection:createanswerfailed",e),Promise.reject(e)})}).then(function(e){return r.setLocalDescription(e).catch(function(e){return n._rtcReady=!0,R.warn('emit "peerconnection:setlocaldescriptionfailed" [error:%o]',e),n.emit("peerconnection:setlocaldescriptionfailed",e),Promise.reject(e)})}).then(function(){var i=t&&t.iceRestart;if("complete"===r.iceGatheringState&&!i||"gathering"===r.iceGatheringState&&n._iceReady){n._rtcReady=!0;var s={originator:"local",type:e,sdp:r.localDescription.sdp};return R.debug('emit "sdp"'),n.emit("sdp",s),Promise.resolve(s.sdp)}return new Promise(function(t){var i,s,o=!1;n._iceReady=!1;var l=function(){r.removeEventListener("icecandidate",i),r.removeEventListener("icegatheringstatechange",s),o=!0,n._rtcReady=!0,n._iceReady=!0;var l={originator:"local",type:e,sdp:r.localDescription.sdp};R.debug('emit "sdp"'),n.emit("sdp",l),t(l.sdp)};r.addEventListener("icecandidate",i=function(e){var t=e.candidate;t?n.emit("icecandidate",{candidate:t,ready:l}):o||l()}),r.addEventListener("icegatheringstatechange",s=function(){"complete"!==r.iceGatheringState||o||l()}),void 0!==n._ua.modes.ice_timeout_fix&&setTimeout(function(){o||(R.debug("AC: ICE gathering timeout fix"),l())},n._ua.modes.ice_timeout_fix)})})}},{key:"_createDialog",value:function(e,t,n){var r="UAS"===t?e.to_tag:e.from_tag,i="UAS"===t?e.from_tag:e.to_tag,s=e.call_id+r+i,o=this._earlyDialogs[s];if(n)return!!o||((o=new y(this,e,t,y.C.STATUS_EARLY)).error?(R.debug(o.error),this._failed("remote",e,f.causes.INTERNAL_ERROR),!1):(this._earlyDialogs[s]=o,!0));if(this._from_tag=e.from_tag,this._to_tag=e.to_tag,o)return o.update(e,t),this._dialog=o,delete this._earlyDialogs[s],!0;var l=new y(this,e,t);return l.error?(R.debug(l.error),this._failed("remote",e,f.causes.INTERNAL_ERROR),!1):(this._dialog=l,!0)}},{key:"_receiveReinvite",value:function(e){var t=this;R.debug("receiveReinvite()");var n=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i=!0;var n=t.status_code||403,r=t.reason_phrase||"",s=m.cloneArray(t.extraHeaders);if(this._status!==w.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: ".concat(n));e.reply(n,r,s)}.bind(this)},i=!1;if(this.emit("reinvite",r),!i){if(this._late_sdp=!1,!e.body)return this._late_sdp=!0,this._remoteHold&&(this._remoteHold=!1,this._onunhold("remote")),void(this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._createLocalDescription("offer",t._rtcOfferConstraints)}).then(function(e){s.call(t,e)}).catch(function(){e.reply(500)}));if("application/sdp"!==n)return R.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==w.STATUS_TERMINATED&&s.call(t,e)}).catch(function(e){R.warn(e)})}function s(t){var n=this,i=["Contact: ".concat(this._contact)];this._handleSessionTimersInIncomingRequest(e,i),this._late_sdp&&(t=this._mangleOffer(t)),e.reply(200,null,i,t,function(){n._status=w.STATUS_WAITING_FOR_ACK,n._setInvite2xxTimer(e,t),n._setACKTimer()}),"function"==typeof r.callback&&r.callback()}}},{key:"_receiveUpdate",value:function(e){var t=this;R.debug("receiveUpdate()");var n=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,r={request:e,callback:void 0,reject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i=!0;var n=t.status_code||403,r=t.reason_phrase||"",s=m.cloneArray(t.extraHeaders);if(this._status!==w.STATUS_CONFIRMED)return!1;if(n<300||n>=700)throw new TypeError("Invalid status_code: ".concat(n));e.reply(n,r,s)}.bind(this)},i=!1;if(this.emit("update",r),!i)if(e.body){if("application/sdp"!==n)return R.debug("invalid Content-Type"),void e.reply(415);this._processInDialogSdpOffer(e).then(function(e){t._status!==w.STATUS_TERMINATED&&s.call(t,e)}).catch(function(e){R.warn(e)})}else s.call(this,null);function s(t){var n=["Contact: ".concat(this._contact)];this._handleSessionTimersInIncomingRequest(e,n),e.reply(200,null,n,t),"function"==typeof r.callback&&r.callback()}}},{key:"_processInDialogSdpOffer",value:function(e){var t=this;R.debug("_processInDialogSdpOffer()");var n,r=e.parseSDP(),s=!1,o=i(r.media);try{for(o.s();!(n=o.n()).done;){var l=n.value;if(-1!==I.indexOf(l.type)){var a=l.direction||r.direction||"sendrecv";if("sendonly"!==a&&"inactive"!==a){s=!1;break}s=!0}}}catch(e){o.e(e)}finally{o.f()}var u={originator:"remote",type:"offer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",u);var c=new RTCSessionDescription({type:"offer",sdp:u.sdp});return this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if(t._status===w.STATUS_TERMINATED)throw new Error("terminated");return t._connection.setRemoteDescription(c).catch(function(n){throw e.reply(488),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n),n})}).then(function(){if(t._status===w.STATUS_TERMINATED)throw new Error("terminated");!0===t._remoteHold&&!1===s?(t._remoteHold=!1,t._onunhold("remote")):!1===t._remoteHold&&!0===s&&(t._remoteHold=!0,t._onhold("remote"))}).then(function(){if(t._status===w.STATUS_TERMINATED)throw new Error("terminated");return t._createLocalDescription("answer",t._rtcAnswerConstraints).catch(function(t){throw e.reply(500),R.warn('emit "peerconnection:createtelocaldescriptionfailed" [error:%o]',t),t})}).catch(function(e){R.warn("_processInDialogSdpOffer() failed [error: %o]",e)}),this._connectionPromiseQueue}},{key:"_receiveRefer",value:function(e){var t=this;if(R.debug("receiveRefer()"),!e.refer_to)return R.debug("no Refer-To header field present in REFER"),void e.reply(400);if(e.refer_to.uri.scheme!==f.SIP)return R.debug("Refer-To header field points to a non-SIP URI scheme"),void e.reply(416);e.reply(202);var n=new E(this,e.cseq);R.debug('emit "refer"'),this.emit("refer",{request:e,accept:function(r,i){(function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t="function"==typeof t?t:null,this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;var i=new u(this._ua);if(i.on("progress",function(e){var t=e.response;n.notify(t.status_code,t.reason_phrase)}),i.on("accepted",function(e){var t=e.response;n.notify(t.status_code,t.reason_phrase)}),i.on("_failed",function(e){var t=e.message,r=e.cause;t?n.notify(t.status_code,t.reason_phrase):n.notify(487,r)}),e.refer_to.uri.hasHeader("replaces")){var s=decodeURIComponent(e.refer_to.uri.getHeader("replaces"));r.extraHeaders=m.cloneArray(r.extraHeaders),r.extraHeaders.push("Replaces: ".concat(s))}i.connect(e.refer_to.uri.toAor(),r,t)}).call(t,r,i)},reject:function(){(function(){n.notify(603)}).call(t)}})}},{key:"_receiveNotify",value:function(e){switch(R.debug("receiveNotify()"),e.event||e.reply(400),e.event.event){case"refer":var t,n;if(e.event.params&&e.event.params.id)t=e.event.params.id,n=this._referSubscribers[t];else{if(1!==Object.keys(this._referSubscribers).length)return void e.reply(400,"Missing event id parameter");n=this._referSubscribers[Object.keys(this._referSubscribers)[0]]}if(!n)return void e.reply(481,"Subscription does not exist");n.receiveNotify(e),e.reply(200);break;default:e.reply(489)}}},{key:"_receiveReplaces",value:function(e){var t=this;R.debug("receiveReplaces()"),this.emit("replaces",{request:e,accept:function(n){(function(t){var n=this;if(this._status!==w.STATUS_WAITING_FOR_ACK&&this._status!==w.STATUS_CONFIRMED)return!1;var r=new u(this._ua);r.on("confirmed",function(){n.terminate()}),r.init_incoming(e,t)}).call(t,n)},reject:function(){(function(){R.debug("Replaced INVITE rejected by the user"),e.reply(486)}).call(t)}})}},{key:"_sendInitialRequest",value:function(e,t,n){var r=this,i=new T(this._ua,this._request,{onRequestTimeout:function(){r.onRequestTimeout()},onTransportError:function(){r.onTransportError()},onAuthenticated:function(e){r._request=e},onReceiveResponse:function(e){r._receiveInviteResponse(e)}});Promise.resolve().then(function(){return n||(e.audio||e.video?(r._localMediaStreamLocallyGenerated=!0,navigator.mediaDevices.getUserMedia(e).catch(function(e){if(r._status===w.STATUS_TERMINATED)throw new Error("terminated");throw r._failed("local",null,f.causes.USER_DENIED_MEDIA_ACCESS),R.warn('emit "getusermediafailed" [error:%o]',e),r.emit("getusermediafailed",e),e})):void 0)}).then(function(e){if(r._status===w.STATUS_TERMINATED)throw new Error("terminated");return r._localMediaStream=e,e&&e.getTracks().forEach(function(t){r._connection.addTrack(t,e)}),r._connecting(r._request),r._createLocalDescription("offer",t).catch(function(e){throw r._failed("local",null,f.causes.WEBRTC_ERROR),e})}).then(function(e){if(r._is_canceled||r._status===w.STATUS_TERMINATED)throw new Error("terminated");r._request.body=e,r._status=w.STATUS_INVITE_SENT,R.debug('emit "sending" [request:%o]',r._request),r.emit("sending",{request:r._request}),i.send()}).catch(function(e){r._status!==w.STATUS_TERMINATED&&R.warn(e)})}},{key:"_getDTMFRTPSender",value:function(){var e=this._connection.getSenders().find(function(e){return e.track&&"audio"===e.track.kind});if(e&&e.dtmf)return e.dtmf;R.warn("sendDTMF() | no local audio track to send DTMF with")}},{key:"_receiveInviteResponse",value:function(e){var t=this;if(R.debug("receiveInviteResponse()"),this._dialog&&e.status_code>=200&&e.status_code<=299){if(this._dialog.id.call_id===e.call_id&&this._dialog.id.local_tag===e.from_tag&&this._dialog.id.remote_tag===e.to_tag)return void this.sendRequest(f.ACK);var n=new y(this,e,"UAC");return void 0!==n.error?void R.debug(n.error):(this.sendRequest(f.ACK),void this.sendRequest(f.BYE))}if(this._is_canceled)e.status_code>=100&&e.status_code<200?this._request.cancel(this._cancel_reason):e.status_code>=200&&e.status_code<299&&this._acceptAndTerminate(e);else if(this._status===w.STATUS_INVITE_SENT||this._status===w.STATUS_1XX_RECEIVED)switch(!0){case/^100$/.test(e.status_code):this._status=w.STATUS_1XX_RECEIVED;break;case/^1[0-9]{2}$/.test(e.status_code):if(!e.to_tag){R.debug("1xx response received without to tag");break}if(e.hasHeader("contact")&&!this._createDialog(e,"UAC",!0))break;if(this._status=w.STATUS_1XX_RECEIVED,!e.body){this._progress("remote",e);break}var r={originator:"remote",type:"answer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",r);var i=new RTCSessionDescription({type:"answer",sdp:r.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).then(function(){return t._progress("remote",e)}).catch(function(e){R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)});break;case/^2[0-9]{2}$/.test(e.status_code):if(this._status=w.STATUS_CONFIRMED,!e.body){this._acceptAndTerminate(e,400,f.causes.MISSING_SDP),this._failed("remote",e,f.causes.BAD_MEDIA_DESCRIPTION);break}if(!this._createDialog(e,"UAC"))break;var s={originator:"remote",type:"answer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",s);var o=new RTCSessionDescription({type:"answer",sdp:s.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){if("stable"===t._connection.signalingState)return t._connection.createOffer(t._rtcOfferConstraints).then(function(e){return t._connection.setLocalDescription(e)}).catch(function(n){t._acceptAndTerminate(e,500,n.toString()),t._failed("local",e,f.causes.WEBRTC_ERROR)})}).then(function(){t._connection.setRemoteDescription(o).then(function(){t._handleSessionTimersInIncomingResponse(e),t._accepted("remote",e),t.sendRequest(f.ACK),t._confirmed("local",null)}).catch(function(n){t._acceptAndTerminate(e,488,"Not Acceptable Here"),t._failed("remote",e,f.causes.BAD_MEDIA_DESCRIPTION),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',n),t.emit("peerconnection:setremotedescriptionfailed",n)})});break;default:var l=m.sipErrorCause(e.status_code);this._failed("remote",e,l)}}},{key:"_sendReinvite",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};R.debug("sendReinvite()");var n=m.cloneArray(t.extraHeaders),r=m.cloneObject(t.eventHandlers),i=t.rtcOfferConstraints||this._rtcOfferConstraints||null,s=!1;function o(e){r.failed&&r.failed(e)}n.push("Contact: ".concat(this._contact)),n.push("Content-Type: application/sdp"),this._sessionTimers.running&&n.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(this._sessionTimers.refresher?"uac":"uas")),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",i)}).then(function(t){var i={originator:"local",type:"offer",sdp:t=e._mangleOffer(t)};R.debug('emit "sdp"'),e.emit("sdp",i),e.sendRequest(f.INVITE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){(function(e){var t=this;if(this._status===w.STATUS_TERMINATED)return;if(this.sendRequest(f.ACK),s)return;if(this._handleSessionTimersInIncomingResponse(e),!e.body)return void o.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void o.call(this);var n={originator:"remote",type:"answer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",n);var i=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){o.call(t),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}).call(e,t),s=!0},onErrorResponse:function(t){o.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){o()})}},{key:"_sendUpdate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};R.debug("sendUpdate()");var n=m.cloneArray(t.extraHeaders),r=m.cloneObject(t.eventHandlers),i=t.rtcOfferConstraints||this._rtcOfferConstraints||null,s=t.sdpOffer||!1,o=!1;function l(e){var t=this;if(this._status!==w.STATUS_TERMINATED&&!o)if(this._handleSessionTimersInIncomingResponse(e),s){if(!e.body)return void a.call(this);if(!e.hasHeader("Content-Type")||"application/sdp"!==e.getHeader("Content-Type").toLowerCase())return void a.call(this);var n={originator:"remote",type:"answer",sdp:e.body};R.debug('emit "sdp"'),this.emit("sdp",n);var i=new RTCSessionDescription({type:"answer",sdp:n.sdp});this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return t._connection.setRemoteDescription(i)}).then(function(){r.succeeded&&r.succeeded(e)}).catch(function(e){a.call(t),R.warn('emit "peerconnection:setremotedescriptionfailed" [error:%o]',e),t.emit("peerconnection:setremotedescriptionfailed",e)})}else r.succeeded&&r.succeeded(e)}function a(e){r.failed&&r.failed(e)}n.push("Contact: ".concat(this._contact)),this._sessionTimers.running&&n.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(this._sessionTimers.refresher?"uac":"uas")),s?(n.push("Content-Type: application/sdp"),this._connectionPromiseQueue=this._connectionPromiseQueue.then(function(){return e._createLocalDescription("offer",i)}).then(function(t){var r={originator:"local",type:"offer",sdp:t=e._mangleOffer(t)};R.debug('emit "sdp"'),e.emit("sdp",r),e.sendRequest(f.UPDATE,{extraHeaders:n,body:t,eventHandlers:{onSuccessResponse:function(t){l.call(e,t),o=!0},onErrorResponse:function(t){a.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}).catch(function(){a.call(e)})):this.sendRequest(f.UPDATE,{extraHeaders:n,eventHandlers:{onSuccessResponse:function(t){l.call(e,t)},onErrorResponse:function(t){a.call(e,t)},onTransportError:function(){e.onTransportError()},onRequestTimeout:function(){e.onRequestTimeout()},onDialogError:function(){e.onDialogError()}}})}},{key:"_acceptAndTerminate",value:function(e,t,n){R.debug("acceptAndTerminate()");var r=[];t&&(n=n||f.REASON_PHRASE[t]||"",r.push("Reason: SIP ;cause=".concat(t,'; text="').concat(n,'"'))),(this._dialog||this._createDialog(e,"UAC"))&&(this.sendRequest(f.ACK),this.sendRequest(f.BYE,{extraHeaders:r})),this._status=w.STATUS_TERMINATED}},{key:"_mangleOffer",value:function(e){if(!this._localHold&&!this._remoteHold)return e;if(e=h.parse(e),this._localHold&&!this._remoteHold){R.debug("mangleOffer() | me on hold, mangling offer");var t,n=i(e.media);try{for(n.s();!(t=n.n()).done;){var r=t.value;-1!==I.indexOf(r.type)&&(r.direction?"sendrecv"===r.direction?r.direction="sendonly":"recvonly"===r.direction&&(r.direction="inactive"):r.direction="sendonly")}}catch(e){n.e(e)}finally{n.f()}}else if(this._localHold&&this._remoteHold){R.debug("mangleOffer() | both on hold, mangling offer");var s,o=i(e.media);try{for(o.s();!(s=o.n()).done;){var l=s.value;-1!==I.indexOf(l.type)&&(l.direction="inactive")}}catch(e){o.e(e)}finally{o.f()}}else if(this._remoteHold){R.debug("mangleOffer() | remote on hold, mangling offer");var a,u=i(e.media);try{for(u.s();!(a=u.n()).done;){var c=a.value;-1!==I.indexOf(c.type)&&(c.direction?"sendrecv"===c.direction?c.direction="recvonly":"recvonly"===c.direction&&(c.direction="inactive"):c.direction="recvonly")}}catch(e){u.e(e)}finally{u.f()}}return h.write(e)}},{key:"_setLocalMediaStatus",value:function(){var e=!0,t=!0;(this._localHold||this._remoteHold)&&(e=!1,t=!1),this._audioMuted&&(e=!1),this._videoMuted&&(t=!1),this._toggleMuteAudio(!e),this._toggleMuteVideo(!t)}},{key:"_handleSessionTimersInIncomingRequest",value:function(e,t){var n;this._sessionTimers.enabled&&(e.session_expires&&e.session_expires>=f.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,n=e.session_expires_refresher||"uas"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,n="uas"),t.push("Session-Expires: ".concat(this._sessionTimers.currentExpires,";refresher=").concat(n)),this._sessionTimers.refresher="uas"===n,this._runSessionTimer())}},{key:"_handleSessionTimersInIncomingResponse",value:function(e){var t;this._sessionTimers.enabled&&(e.session_expires&&e.session_expires>=f.MIN_SESSION_EXPIRES?(this._sessionTimers.currentExpires=e.session_expires,t=e.session_expires_refresher||"uac"):(this._sessionTimers.currentExpires=this._sessionTimers.defaultExpires,t="uac"),this._sessionTimers.refresher="uac"===t,this._runSessionTimer())}},{key:"_runSessionTimer",value:function(){var e=this,t=this._sessionTimers.currentExpires;this._sessionTimers.running=!0,clearTimeout(this._sessionTimers.timer),this._sessionTimers.refresher?this._sessionTimers.timer=setTimeout(function(){e._status!==w.STATUS_TERMINATED&&e._isReadyToReOffer()&&(R.debug("runSessionTimer() | sending session refresh request"),e._sessionTimers.refreshMethod===f.UPDATE?e._sendUpdate():e._sendReinvite())},500*t):this._sessionTimers.timer=setTimeout(function(){e._status!==w.STATUS_TERMINATED&&(R.warn("runSessionTimer() | timer expired, terminating the session"),e.terminate({cause:f.causes.REQUEST_TIMEOUT,status_code:408,reason_phrase:"Session Timer Expired"}))},1100*t)}},{key:"_toggleMuteAudio",value:function(e){var t,n=i(this._connection.getSenders().filter(function(e){return e.track&&"audio"===e.track.kind}));try{for(n.s();!(t=n.n()).done;){t.value.track.enabled=!e}}catch(e){n.e(e)}finally{n.f()}}},{key:"_toggleMuteVideo",value:function(e){var t,n=i(this._connection.getSenders().filter(function(e){return e.track&&"video"===e.track.kind}));try{for(n.s();!(t=n.n()).done;){t.value.track.enabled=!e}}catch(e){n.e(e)}finally{n.f()}}},{key:"_newRTCSession",value:function(e,t){R.debug("newRTCSession()"),this._ua.newRTCSession(this,{originator:e,session:this,request:t})}},{key:"_connecting",value:function(e){R.debug("session connecting"),R.debug('emit "connecting"'),this.emit("connecting",{request:e})}},{key:"_progress",value:function(e,t){R.debug("session progress"),R.debug('emit "progress"'),this.emit("progress",{originator:e,response:t||null})}},{key:"_accepted",value:function(e,t){R.debug("session accepted"),this._start_time=new Date,R.debug('emit "accepted"'),this.emit("accepted",{originator:e,response:t||null})}},{key:"_confirmed",value:function(e,t){R.debug("session confirmed"),this._is_confirmed=!0,R.debug('emit "confirmed"'),this.emit("confirmed",{originator:e,ack:t||null})}},{key:"_ended",value:function(e,t,n){R.debug("session ended"),this._end_time=new Date,this._close(),R.debug('emit "ended"'),this.emit("ended",{originator:e,message:t||null,cause:n})}},{key:"_failed",value:function(e,t,n){R.debug("session failed"),R.debug('emit "_failed"'),this.emit("_failed",{originator:e,message:t||null,cause:n}),this._close(),R.debug('emit "failed"'),this.emit("failed",{originator:e,message:t||null,cause:n})}},{key:"_onhold",value:function(e){R.debug("session onhold"),this._setLocalMediaStatus(),R.debug('emit "hold"'),this.emit("hold",{originator:e})}},{key:"_onunhold",value:function(e){R.debug("session onunhold"),this._setLocalMediaStatus(),R.debug('emit "unhold"'),this.emit("unhold",{originator:e})}},{key:"_onmute",value:function(e){var t=e.audio,n=e.video;R.debug("session onmute"),this._setLocalMediaStatus(),R.debug('emit "muted"'),this.emit("muted",{audio:t,video:n})}},{key:"_onunmute",value:function(e){var t=e.audio,n=e.video;R.debug("session onunmute"),this._setLocalMediaStatus(),R.debug('emit "unmuted"'),this.emit("unmuted",{audio:t,video:n})}}])&&o(t.prototype,n),r&&o(t,r),u}()},{"./Constants":2,"./Dialog":3,"./Exceptions":6,"./Logger":9,"./RTCSession/DTMF":16,"./RTCSession/Info":17,"./RTCSession/ReferNotifier":18,"./RTCSession/ReferSubscriber":19,"./RequestSender":21,"./SIPMessage":22,"./Timers":25,"./Transactions":26,"./URI":29,"./Utils":30,events:33,"sdp-transform":39}],16:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var a=e("events").EventEmitter,u=e("../Logger"),c=e("../Constants"),h=e("../Exceptions"),d=e("../Utils"),f=new u("RTCSession:DTMF"),_={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,a);var t,n,r,l=o(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this))._session=e,t._direction=null,t._tone=null,t._duration=null,t._request=null,t}return t=u,(n=[{key:"tone",get:function(){return this._tone}},{key:"duration",get:function(){return this._duration}},{key:"send",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(void 0===e)throw new TypeError("Not enough arguments");if(this._direction="outgoing",this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new h.InvalidStateError(this._session.status);var r=d.cloneArray(n.extraHeaders);if(this.eventHandlers=d.cloneObject(n.eventHandlers),"string"==typeof e)e=e.toUpperCase();else{if("number"!=typeof e)throw new TypeError("Invalid tone: ".concat(e));e=e.toString()}if(!e.match(/^[0-9A-DR#*]$/))throw new TypeError("Invalid tone: ".concat(e));this._tone=e,this._duration=n.duration,r.push("Content-Type: application/dtmf-relay");var i="Signal=".concat(this._tone,"\r\n");i+="Duration=".concat(this._duration),this._session.newDTMF({originator:"local",dtmf:this,request:this._request}),this._session.sendRequest(c.INFO,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){t.eventHandlers.onFailed&&t.eventHandlers.onFailed(),t.emit("failed",{originator:"remote",response:e})},onRequestTimeout:function(){t._session.onRequestTimeout()},onTransportError:function(){t._session.onTransportError()},onDialogError:function(){t._session.onDialogError()}},body:i})}},{key:"init_incoming",value:function(e){var t=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,n=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(this._direction="incoming",this._request=e,e.reply(200),e.body){var r=e.body.split("\n");r.length>=1&&t.test(r[0])&&(this._tone=r[0].replace(t,"$2")),r.length>=2&&n.test(r[1])&&(this._duration=parseInt(r[1].replace(n,"$2"),10))}this._duration||(this._duration=_.DEFAULT_DURATION),this._tone?this._session.newDTMF({originator:"remote",dtmf:this,request:e}):f.debug("invalid INFO DTMF received, discarded")}}])&&i(t.prototype,n),r&&i(t,r),u}(),t.exports.C=_},{"../Constants":2,"../Exceptions":6,"../Logger":9,"../Utils":30,events:33}],17:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var a=e("events").EventEmitter,u=e("../Constants"),c=e("../Exceptions"),h=e("../Utils");t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(d,a);var t,n,r,l=o(d);function d(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),(t=l.call(this))._session=e,t._direction=null,t._contentType=null,t._body=null,t}return t=d,(n=[{key:"contentType",get:function(){return this._contentType}},{key:"body",get:function(){return this._body}},{key:"send",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(this._direction="outgoing",t&&void 0===e)throw new TypeError("Not enough arguments");if(this._session.status!==this._session.C.STATUS_CONFIRMED&&this._session.status!==this._session.C.STATUS_WAITING_FOR_ACK)throw new c.InvalidStateError(this._session.status);this._contentType=e,this._body=t;var i=h.cloneArray(r.extraHeaders);e&&i.push("Content-Type: ".concat(e)),this._session.newInfo({originator:"local",info:this,request:this.request}),this._session.sendRequest(u.INFO,{extraHeaders:i,eventHandlers:{onSuccessResponse:function(e){n.emit("succeeded",{originator:"remote",response:e})},onErrorResponse:function(e){n.emit("failed",{originator:"remote",response:e})},onTransportError:function(){n._session.onTransportError()},onRequestTimeout:function(){n._session.onRequestTimeout()},onDialogError:function(){n._session.onDialogError()}},body:t})}},{key:"init_incoming",value:function(e){this._direction="incoming",this.request=e,e.reply(200),this._contentType=e.hasHeader("Content-Type")?e.getHeader("Content-Type").toLowerCase():void 0,this._body=e.body,this._session.newInfo({originator:"remote",info:this,request:e})}}])&&i(t.prototype,n),r&&i(t,r),d}()},{"../Constants":2,"../Exceptions":6,"../Utils":30,events:33}],18:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("../Logger"),s=e("../Constants"),o=new i("RTCSession:ReferNotifier"),l={event_type:"refer",body_type:"message/sipfrag;version=2.0",expires:300};t.exports=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._session=t,this._id=n,this._expires=r||l.expires,this._active=!0,this.notify(100)}var t,n,i;return t=e,(n=[{key:"notify",value:function(e,t){if(o.debug("notify()"),!1!==this._active){var n;t=t||s.REASON_PHRASE[e]||"",n=e>=200?"terminated;reason=noresource":"active;expires=".concat(this._expires);try{this._session.sendRequest(s.NOTIFY,{extraHeaders:["Event: ".concat(l.event_type,";id=").concat(this._id),"Subscription-State: ".concat(n),"Content-Type: ".concat(l.body_type)],body:"SIP/2.0 ".concat(e," ").concat(t),eventHandlers:{onErrorResponse:function(){this._active=!1}}})}catch(e){o.debug("send NOTIFY exception [ignored]")}}}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"../Constants":2,"../Logger":9}],19:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var a=e("events").EventEmitter,u=e("../Logger"),c=e("../Constants"),h=e("../Grammar"),d=e("../Utils"),f=new u("RTCSession:ReferSubscriber");t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,a);var t,n,r,l=o(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this))._id=null,t._session=e,t}return t=u,(n=[{key:"id",get:function(){return this._id}},{key:"sendRefer",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};f.debug("sendRefer()");var r=d.cloneArray(n.extraHeaders),i=d.cloneObject(n.eventHandlers);for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&this.on(s,i[s]);var o=null;n.replaces&&(o=n.replaces._request.call_id,o+=";to-tag=".concat(n.replaces._to_tag),o+=";from-tag=".concat(n.replaces._from_tag),o=encodeURIComponent(o));var l="Refer-To: <".concat(e).concat(o?"?Replaces=".concat(o):"",">");if(r.push(l),!r.some(function(e){return e.toLowerCase().startsWith("referred-by:")})){var a="Referred-By: <".concat(this._session._ua._configuration.uri._scheme,":").concat(this._session._ua._configuration.uri._user,"@").concat(this._session._ua._configuration.uri._host,">");r.push(a)}r.push("Contact: ".concat(this._session.contact));var u=this._session.sendRequest(c.REFER,{extraHeaders:r,eventHandlers:{onSuccessResponse:function(e){t._requestSucceeded(e)},onErrorResponse:function(e){t._requestFailed(e,c.causes.REJECTED)},onTransportError:function(){t._requestFailed(null,c.causes.CONNECTION_ERROR)},onRequestTimeout:function(){t._requestFailed(null,c.causes.REQUEST_TIMEOUT)},onDialogError:function(){t._requestFailed(null,c.causes.DIALOG_ERROR)}}});this._id=u.cseq}},{key:"receiveNotify",value:function(e){if(f.debug("receiveNotify()"),e.body){var t=h.parse(e.body.trim(),"Status_Line");if(-1!==t)switch(!0){case/^100$/.test(t.status_code):this.emit("trying",{request:e,status_line:t});break;case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",{request:e,status_line:t});break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",{request:e,status_line:t});break;default:this.emit("failed",{request:e,status_line:t})}else f.debug('receiveNotify() | error parsing NOTIFY body: "'.concat(e.body,'"'))}}},{key:"_requestSucceeded",value:function(e){f.debug("REFER succeeded"),f.debug('emit "requestSucceeded"'),this.emit("requestSucceeded",{response:e})}},{key:"_requestFailed",value:function(e,t){f.debug("REFER failed"),f.debug('emit "requestFailed"'),this.emit("requestFailed",{response:e||null,cause:t})}}])&&i(t.prototype,n),r&&i(t,r),u}()},{"../Constants":2,"../Grammar":7,"../Logger":9,"../Utils":30,events:33}],20:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./Logger"),s=e("./Utils"),o=e("./Constants"),l=e("./SIPMessage"),a=e("./RequestSender"),u=new i("Registrator");t.exports=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._reg_id=1,this._ua=t,this._transport=n,this._registrar=t.configuration.registrar_server,this._expires=t.configuration.register_expires,this._call_id=s.createRandomToken(22),this._cseq=0,this._to_uri=t.configuration.uri,this._registrationTimer=null,this._registering=!1,this._registered=!1,this._contact=this._ua.contact.toString(),this._contact+=";+sip.ice",this._extraHeaders=[],this._extraContactParams="",this._sipInstance='"<urn:uuid:'.concat(this._ua.configuration.instance_id,'>"'),this._contact+=";reg-id=".concat(this._reg_id),this._contact+=";+sip.instance=".concat(this._sipInstance),this._auth=null}var t,n,i;return t=e,(n=[{key:"registered",get:function(){return this._registered}},{key:"setExtraHeaders",value:function(e){Array.isArray(e)||(e=[]),this._extraHeaders=e.slice()}},{key:"setExtraContactParams",value:function(e){for(var t in e instanceof Object||(e={}),this._extraContactParams="",e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=e[t];this._extraContactParams+=";".concat(t),n&&(this._extraContactParams+="=".concat(n))}}},{key:"register",value:function(){var e=this;if(this._registering)u.debug("Register request in progress...");else{var t=this._extraHeaders.slice();t.push("Contact: ".concat(this._contact,";expires=").concat(this._expires).concat(this._extraContactParams)),t.push("Expires: ".concat(this._expires)),this._auth&&t.push(this._auth);var n=new l.OutgoingRequest(o.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},t),r=new a(this._ua,n,{onRequestTimeout:function(){e._registrationFailure(null,o.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._registrationFailure(null,o.causes.CONNECTION_ERROR)},onAuthenticated:function(t){var n,r;(e._cseq+=1,e._ua.modes.cache_register_auth_mode)&&((r=t.getHeader(n="Authorization"))?e._auth="".concat(n,": ").concat(r):(r=t.getHeader(n="Proxy-Authorization"))&&(e._auth="".concat(n,": ").concat(r)))},onReceiveResponse:function(t){if(t.cseq===e._cseq)switch(null!==e._registrationTimer&&(clearTimeout(e._registrationTimer),e._registrationTimer=null),!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):if(e._registering=!1,!t.hasHeader("Contact")){u.debug("no Contact header in response to REGISTER, response ignored");break}var n=t.headers.Contact.reduce(function(e,t){return e.concat(t.parsed)},[]),r=n.find(function(t){return e._sipInstance===t.getParam("+sip.instance")&&e._reg_id===parseInt(t.getParam("reg-id"))});if(r||(r=n.find(function(t){return t.uri.user===e._ua.contact.uri.user})),!r){u.debug("no Contact header pointing to us, response ignored");break}var i=r.getParam("expires");!i&&t.hasHeader("expires")&&(i=t.getHeader("expires")),i||(i=e._expires),(i=Number(i))<10&&(i=10);var l=i>=140?1e3*i/2+Math.floor(1e3*(i/2-70)*Math.random()):1e3*i-5e3;e._registrationTimer=setTimeout(function(){e._registrationTimer=null,0===e._ua.listeners("registrationExpiring").length?e.register():e._ua.emit("registrationExpiring")},l),r.hasParam("temp-gruu")&&(e._ua.contact.temp_gruu=r.getParam("temp-gruu").replace(/"/g,"")),r.hasParam("pub-gruu")&&(e._ua.contact.pub_gruu=r.getParam("pub-gruu").replace(/"/g,"")),e._registered||(e._registered=!0,e._ua.registered({response:t}));break;case/^423$/.test(t.status_code):t.hasHeader("min-expires")?(e._expires=Number(t.getHeader("min-expires")),e._expires<10&&(e._expires=10),e.register()):(u.debug("423 response received for REGISTER without Min-Expires"),e._registrationFailure(t,o.causes.SIP_FAILURE_CODE));break;default:var a=s.sipErrorCause(t.status_code);e._registrationFailure(t,a)}}});this._registering=!0,r.send()}}},{key:"unregister",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._registered){this._registered=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null);var n=this._extraHeaders.slice();t.all?n.push("Contact: *".concat(this._extraContactParams)):n.push("Contact: ".concat(this._contact,";expires=0").concat(this._extraContactParams)),n.push("Expires: 0"),this._auth&&n.push(this._auth);var r=new l.OutgoingRequest(o.REGISTER,this._registrar,this._ua,{to_uri:this._to_uri,call_id:this._call_id,cseq:this._cseq+=1},n);new a(this._ua,r,{onRequestTimeout:function(){e._unregistered(null,o.causes.REQUEST_TIMEOUT)},onTransportError:function(){e._unregistered(null,o.causes.CONNECTION_ERROR)},onAuthenticated:function(){e._cseq+=1},onReceiveResponse:function(t){switch(!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):e._unregistered(t);break;default:var n=s.sipErrorCause(t.status_code);e._unregistered(t,n)}}}).send(),this._auth=null}else u.debug("already unregistered")}},{key:"close",value:function(){this._registered&&this.unregister()}},{key:"onTransportClosed",value:function(){this._registering=!1,null!==this._registrationTimer&&(clearTimeout(this._registrationTimer),this._registrationTimer=null),this._registered&&(this._registered=!1,this._ua.unregistered({}))}},{key:"_registrationFailure",value:function(e,t){this._registering=!1,this._ua.registrationFailed({response:e||null,cause:t}),this._registered&&(this._registered=!1,this._ua.unregistered({response:e||null,cause:t}))}},{key:"_unregistered",value:function(e,t){this._registering=!1,this._registered=!1,this._ua.unregistered({response:e||null,cause:t||null})}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"./Constants":2,"./Logger":9,"./RequestSender":21,"./SIPMessage":22,"./Utils":30}],21:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./Logger"),s=e("./Constants"),o=e("./DigestAuthentication"),l=e("./Transactions"),a=new i("RequestSender"),u={onRequestTimeout:function(){},onTransportError:function(){},onReceiveResponse:function(){},onAuthenticated:function(){}};t.exports=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ua=t,this._eventHandlers=r,this._method=n.method,this._request=n,this._auth=null,this._challenged=!1,this._staled=!1,u)Object.prototype.hasOwnProperty.call(u,i)&&(this._eventHandlers[i]||(this._eventHandlers[i]=u[i]));t.status!==t.C.STATUS_USER_CLOSED||this._method===s.BYE&&this._method===s.ACK||this._eventHandlers.onTransportError()}var t,n,i;return t=e,(n=[{key:"send",value:function(){var e=this,t={onRequestTimeout:function(){e._eventHandlers.onRequestTimeout()},onTransportError:function(){e._eventHandlers.onTransportError()},onReceiveResponse:function(t){e._receiveResponse(t)}};switch(this._method){case"INVITE":this.clientTransaction=new l.InviteClientTransaction(this._ua,this._ua.transport,this._request,t);break;case"ACK":this.clientTransaction=new l.AckClientTransaction(this._ua,this._ua.transport,this._request,t);break;default:this.clientTransaction=new l.NonInviteClientTransaction(this._ua,this._ua.transport,this._request,t)}this._ua._configuration.authorization_jwt&&this._request.setHeader("Authorization",this._ua._configuration.authorization_jwt),this.clientTransaction.send()}},{key:"_receiveResponse",value:function(e){var t,n,r=e.status_code;if(401!==r&&407!==r||null===this._ua.configuration.password&&null===this._ua.configuration.ha1)this._eventHandlers.onReceiveResponse(e);else{if(401===e.status_code?(t=e.parseHeader("www-authenticate"),n="authorization"):(t=e.parseHeader("proxy-authenticate"),n="proxy-authorization"),!t)return a.debug("".concat(e.status_code," with wrong or missing challenge, cannot authenticate")),void this._eventHandlers.onReceiveResponse(e);if(!this._challenged||!this._staled&&!0===t.stale){if(!this._auth){var i=this._ua.getCredential(t.realm);this._auth=new o(i)}if(!this._auth.authenticate(this._request,t))return void this._eventHandlers.onReceiveResponse(e);this._challenged=!0,this._ua.updateCredential(t.realm,this._auth.get("realm"),this._auth.get("ha1")),t.stale&&(this._staled=!0),this._request=this._request.clone(),this._request.cseq+=1,this._request.setHeader("cseq","".concat(this._request.cseq," ").concat(this._method)),this._request.setHeader(n,this._auth.toString()),this._eventHandlers.onAuthenticated(this._request),this.send()}else this._eventHandlers.onReceiveResponse(e)}}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"./Constants":2,"./DigestAuthentication":5,"./Logger":9,"./Transactions":26}],22:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=l(e);if(t){var s=l(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return o=e.done,e},e:function(e){l=!0,s=e},f:function(){try{o||null==n.return||n.return()}finally{if(l)throw s}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&h(e.prototype,t),n&&h(e,n),e}var f=e("sdp-transform"),_=e("./Logger"),p=e("./Constants"),m=e("./Utils"),v=e("./NameAddrHeader"),g=e("./Grammar"),y=new _("SIPMessage"),T=function(){function e(t,n,r,i,s,o){if(c(this,e),!t||!n||!r)return null;i=i||{},this.ua=r,this.headers={},this.method=t,this.ruri=n,this.body=o,this.extraHeaders=m.cloneArray(s),i.route_set?this.setHeader("route",i.route_set):r.configuration.use_preloaded_route&&this.setHeader("route","<".concat(r.transport.sip_uri,";lr>")),this.setHeader("via",""),this.setHeader("max-forwards",p.MAX_FORWARDS);var l=i.to_uri||n,a=i.to_tag?{tag:i.to_tag}:null,u=void 0!==i.to_display_name?i.to_display_name:null;this.to=new v(l,u,a),this.setHeader("to",this.to.toString());var h,d=i.from_uri||r.configuration.uri,f={tag:i.from_tag||m.newTag()};h=void 0!==i.from_display_name?i.from_display_name:r.configuration.display_name?r.configuration.display_name:null,this.from=new v(d,h,f),this.setHeader("from",this.from.toString());var _=i.call_id||r.configuration.jssip_id+m.createRandomToken(15);this.call_id=_,this.setHeader("call-id",_);var g=i.cseq||Math.floor(1e4*Math.random());this.cseq=g,this.setHeader("cseq","".concat(g," ").concat(t))}return d(e,[{key:"setHeader",value:function(e,t){for(var n=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),r=0;r<this.extraHeaders.length;r++)n.test(this.extraHeaders[r])&&this.extraHeaders.splice(r,1);this.headers[m.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){var t=this.headers[m.headerize(e)];if(t){if(t[0])return t[0]}else{var n,r=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),i=a(this.extraHeaders);try{for(i.s();!(n=i.n()).done;){var s=n.value;if(r.test(s))return s.substring(s.indexOf(":")+1).trim()}}catch(e){i.e(e)}finally{i.f()}}}},{key:"getHeaders",value:function(e){var t=this.headers[m.headerize(e)],n=[];if(t){var r,i=a(t);try{for(i.s();!(r=i.n()).done;){var s=r.value;n.push(s)}}catch(e){i.e(e)}finally{i.f()}return n}var o,l=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),u=a(this.extraHeaders);try{for(u.s();!(o=u.n()).done;){var c=o.value;l.test(c)&&n.push(c.substring(c.indexOf(":")+1).trim())}}catch(e){u.e(e)}finally{u.f()}return n}},{key:"hasHeader",value:function(e){if(this.headers[m.headerize(e)])return!0;var t,n=new RegExp("^\\s*".concat(e,"\\s*:"),"i"),r=a(this.extraHeaders);try{for(r.s();!(t=r.n()).done;){var i=t.value;if(n.test(i))return!0}}catch(e){r.e(e)}finally{r.f()}return!1}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=f.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){var e="".concat(this.method," ").concat(this.ruri," SIP/2.0\r\n");for(var t in this.headers)if(Object.prototype.hasOwnProperty.call(this.headers,t)){var n,r=a(this.headers[t]);try{for(r.s();!(n=r.n()).done;){var i=n.value;e+="".concat(t,": ").concat(i,"\r\n")}}catch(e){r.e(e)}finally{r.f()}}var s,o=a(this.extraHeaders);try{for(o.s();!(s=o.n()).done;){var l=s.value;e+="".concat(l.trim(),"\r\n")}}catch(e){o.e(e)}finally{o.f()}var u=[];switch(this.method){case p.REGISTER:u.push("path","gruu");break;case p.INVITE:this.ua.configuration.session_timers&&u.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&u.push("gruu"),u.push("ice","replaces");break;case p.UPDATE:this.ua.configuration.session_timers&&u.push("timer"),u.push("ice")}u.push("outbound");var c=this.ua.configuration.user_agent||p.USER_AGENT;if(e+="Allow: ".concat(p.ALLOWED_METHODS,"\r\n"),e+="Supported: ".concat(u,"\r\n"),e+="User-Agent: ".concat(c,"\r\n"),this.body){var h=m.str_utf8_length(this.body);e+="Content-Length: ".concat(h,"\r\n\r\n"),e+=this.body}else e+="Content-Length: 0\r\n\r\n";return e}},{key:"clone",value:function(){var t=new e(this.method,this.ruri,this.ua);return Object.keys(this.headers).forEach(function(e){t.headers[e]=this.headers[e].slice()},this),t.body=this.body,t.extraHeaders=m.cloneArray(this.extraHeaders),t.to=this.to,t.from=this.from,t.call_id=this.call_id,t.cseq=this.cseq,t}}]),e}(),b=function(e){i(n,T);var t=o(n);function n(e,r,i,s,o){var l;return c(this,n),(l=t.call(this,p.INVITE,e,r,i,s,o)).transaction=null,l}return d(n,[{key:"cancel",value:function(e){this.transaction.cancel(e)}},{key:"clone",value:function(){var e=new n(this.ruri,this.ua);return Object.keys(this.headers).forEach(function(t){e.headers[t]=this.headers[t].slice()},this),e.body=this.body,e.extraHeaders=m.cloneArray(this.extraHeaders),e.to=this.to,e.from=this.from,e.call_id=this.call_id,e.cseq=this.cseq,e.transaction=this.transaction,e}}]),n}(),S=function(){function e(){c(this,e),this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null,this.sdp=null}return d(e,[{key:"addHeader",value:function(e,t){var n={raw:t};e=m.headerize(e),this.headers[e]?this.headers[e].push(n):this.headers[e]=[n]}},{key:"getHeader",value:function(e){var t=this.headers[m.headerize(e)];if(t)return t[0]?t[0].raw:void 0}},{key:"getHeaders",value:function(e){var t=this.headers[m.headerize(e)],n=[];if(!t)return[];var r,i=a(t);try{for(i.s();!(r=i.n()).done;){var s=r.value;n.push(s.raw)}}catch(e){i.e(e)}finally{i.f()}return n}},{key:"hasHeader",value:function(e){return!!this.headers[m.headerize(e)]}},{key:"parseHeader",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(e=m.headerize(e),this.headers[e]){if(!(t>=this.headers[e].length)){var n=this.headers[e][t],r=n.raw;if(n.parsed)return n.parsed;var i=g.parse(r,e.replace(/-/g,"_"));return-1===i?(this.headers[e].splice(t,1),void y.debug('error parsing "'.concat(e,'" header field with value "').concat(r,'"'))):(n.parsed=i,i)}y.debug('not so many "'.concat(e,'" headers present'))}else y.debug('header "'.concat(e,'" not present'))}},{key:"s",value:function(e,t){return this.parseHeader(e,t)}},{key:"setHeader",value:function(e,t){var n={raw:t};this.headers[m.headerize(e)]=[n]}},{key:"parseSDP",value:function(e){return!e&&this.sdp?this.sdp:(this.sdp=f.parse(this.body||""),this.sdp)}},{key:"toString",value:function(){return this.data}}]),e}(),E=function(e){i(n,S);var t=o(n);function n(e){var r;return c(this,n),(r=t.call(this)).ua=e,r.headers={},r.ruri=null,r.transport=null,r.server_transaction=null,r}return d(n,[{key:"reply",value:function(e,t,n,r,i,s){var o=[],l=this.getHeader("To");if(t=t||null,!(e=e||null)||e<100||e>699)throw new TypeError("Invalid status_code: ".concat(e));if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: ".concat(t));t=t||p.REASON_PHRASE[e]||"",n=m.cloneArray(n);var u="SIP/2.0 ".concat(e," ").concat(t,"\r\n");if(this.method===p.INVITE&&e>100&&e<=200){var c,h=a(this.getHeaders("record-route"));try{for(h.s();!(c=h.n()).done;){var d=c.value;u+="Record-Route: ".concat(d,"\r\n")}}catch(e){h.e(e)}finally{h.f()}}var f,_=a(this.getHeaders("via"));try{for(_.s();!(f=_.n()).done;){var v=f.value;u+="Via: ".concat(v,"\r\n")}}catch(e){_.e(e)}finally{_.f()}!this.to_tag&&e>100?l+=";tag=".concat(m.newTag()):this.to_tag&&!this.s("to").hasParam("tag")&&(l+=";tag=".concat(this.to_tag)),u+="To: ".concat(l,"\r\n"),u+="From: ".concat(this.getHeader("From"),"\r\n"),u+="Call-ID: ".concat(this.call_id,"\r\n"),u+="CSeq: ".concat(this.cseq," ").concat(this.method,"\r\n");var g,y=a(n);try{for(y.s();!(g=y.n()).done;){var T=g.value;u+="".concat(T.trim(),"\r\n")}}catch(e){y.e(e)}finally{y.f()}switch(this.method){case p.INVITE:this.ua.configuration.session_timers&&o.push("timer"),(this.ua.contact.pub_gruu||this.ua.contact.temp_gruu)&&o.push("gruu"),o.push("ice","replaces");break;case p.UPDATE:this.ua.configuration.session_timers&&o.push("timer"),r&&o.push("ice"),o.push("replaces")}if(o.push("outbound"),this.method===p.OPTIONS?(u+="Allow: ".concat(p.ALLOWED_METHODS,"\r\n"),u+="Accept: ".concat(p.ACCEPTED_BODY_TYPES,"\r\n")):405===e?u+="Allow: ".concat(p.ALLOWED_METHODS,"\r\n"):415===e&&(u+="Accept: ".concat(p.ACCEPTED_BODY_TYPES,"\r\n")),u+="Supported: ".concat(o,"\r\n"),r){var b=m.str_utf8_length(r);u+="Content-Type: application/sdp\r\n",u+="Content-Length: ".concat(b,"\r\n\r\n"),u+=r}else u+="Content-Length: ".concat(0,"\r\n\r\n");this.server_transaction.receiveResponse(e,u,i,s)}},{key:"reply_sl",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.getHeaders("via");if(!e||e<100||e>699)throw new TypeError("Invalid status_code: ".concat(e));if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: ".concat(t));t=t||p.REASON_PHRASE[e]||"";var r,i="SIP/2.0 ".concat(e," ").concat(t,"\r\n"),s=a(n);try{for(s.s();!(r=s.n()).done;){var o=r.value;i+="Via: ".concat(o,"\r\n")}}catch(e){s.e(e)}finally{s.f()}var l=this.getHeader("To");!this.to_tag&&e>100?l+=";tag=".concat(m.newTag()):this.to_tag&&!this.s("to").hasParam("tag")&&(l+=";tag=".concat(this.to_tag)),i+="To: ".concat(l,"\r\n"),i+="From: ".concat(this.getHeader("From"),"\r\n"),i+="Call-ID: ".concat(this.call_id,"\r\n"),i+="CSeq: ".concat(this.cseq," ").concat(this.method,"\r\n"),i+="Content-Length: ".concat(0,"\r\n\r\n"),this.transport.send(i)}}]),n}(),C=function(e){i(n,S);var t=o(n);function n(){var e;return c(this,n),(e=t.call(this)).headers={},e.status_code=null,e.reason_phrase=null,e}return n}();t.exports={OutgoingRequest:T,InitialOutgoingInviteRequest:b,IncomingRequest:E,IncomingResponse:C}},{"./Constants":2,"./Grammar":7,"./Logger":9,"./NameAddrHeader":11,"./Utils":30,"sdp-transform":39}],23:[function(e,t,n){"use strict";var r=e("./Logger"),i=e("./Utils"),s=e("./Grammar"),o=new r("Socket");n.isSocket=function(e){if(Array.isArray(e))return!1;if(void 0===e)return o.warn("undefined JsSIP.Socket instance"),!1;try{if(!i.isString(e.url))throw o.warn("missing or invalid JsSIP.Socket url property"),new Error("Missing or invalid JsSIP.Socket url property");if(!i.isString(e.via_transport))throw o.warn("missing or invalid JsSIP.Socket via_transport property"),new Error("Missing or invalid JsSIP.Socket via_transport property");if(-1===s.parse(e.sip_uri,"SIP_URI"))throw o.warn("missing or invalid JsSIP.Socket sip_uri property"),new Error("missing or invalid JsSIP.Socket sip_uri property")}catch(e){return!1}try{["connect","disconnect","send"].forEach(function(t){if(!i.isFunction(e[t]))throw o.warn("missing or invalid JsSIP.Socket method: ".concat(t)),new Error("Missing or invalid JsSIP.Socket method: ".concat(t))})}catch(e){return!1}return!0}},{"./Grammar":7,"./Logger":9,"./Utils":30}],24:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=u(e);if(t){var s=u(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var c=e("events").EventEmitter,h=e("./Logger"),d=e("./Constants"),f=e("./Utils"),_=e("./Grammar"),p=e("./SIPMessage"),m=e("./RequestSender"),v=e("./Dialog"),g=new h("Subscriber"),y={SUBSCRIBE_RESPONSE_TIMEOUT:0,SUBSCRIBE_TRANSPORT_ERROR:1,SUBSCRIBE_NON_OK_RESPONSE:2,SUBSCRIBE_BAD_OK_RESPONSE:3,SUBSCRIBE_FAILED_AUTHENTICATION:4,UNSUBSCRIBE_TIMEOUT:5,RECEIVE_FINAL_NOTIFY:6,RECEIVE_BAD_NOTIFY:7,STATE_PENDING:0,STATE_ACTIVE:1,STATE_TERMINATED:2,STATE_INIT:3,STATE_NOTIFY_WAIT:4};t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(u,c);var t,n,r,s=a(u);function u(e,t,n,r,i){var o,l=i.expires,a=i.contentType,c=i.allowEvents,h=i.params,d=i.extraHeaders;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),g.debug("new"),o=s.call(this),!t)throw new TypeError("target is undefined");if(!n)throw new TypeError("eventName is undefined");if(!r)throw new TypeError("accept is undefined");o._ua=e,o._target=t,0===l||l||(l=900),o._expires=l,o._content_type=a,o._params=f.cloneObject(h),o._params.from_uri||(o._params.from_uri=o._ua.configuration.uri),o._params.from_tag=f.newTag(),o._params.to_tag=null,o._params.call_id=f.createRandomToken(20),void 0===o._params.cseq&&(o._params.cseq=Math.floor(1e4*Math.random()+1)),o._state=y.STATE_INIT,o._dialog=null,o._expires_timer=null,o._expires_timestamp=null,o._terminated=!1,o._unsubscribe_timeout_timer=null,o.data={};var p=_.parse(n,"Event");if(-1===p)throw new TypeError("eventName - wrong format");o._event_name=p.event,o._event_id=p.params&&p.params.id;var m=o._event_name;if(o._event_id&&(m+=";id=".concat(o._event_id)),o._headers=f.cloneArray(d),o._headers=o._headers.concat(["Event: ".concat(m),"Expires: ".concat(o._expires),"Accept: ".concat(r)]),!o._headers.find(function(e){return e.startsWith("Contact")})){var v="Contact: ".concat(o._ua._contact.toString());o._headers.push(v)}return c&&o._headers.push("Allow-Events: ".concat(c)),o._queue=[],o}return t=u,r=[{key:"C",get:function(){return y}}],(n=[{key:"C",get:function(){return y}},{key:"onRequestTimeout",value:function(){this._dialogTerminated(y.SUBSCRIBE_RESPONSE_TIMEOUT)}},{key:"onTransportError",value:function(){this._dialogTerminated(y.SUBSCRIBE_TRANSPORT_ERROR)}},{key:"receiveRequest",value:function(e){if(e.method!==d.NOTIFY)return g.warn("received non-NOTIFY request"),void e.reply(405);var t=e.parseHeader("Event");if(!t)return g.warn("missed Event header"),e.reply(400),void this._dialogTerminated(y.RECEIVE_BAD_NOTIFY);var n=t.event,r=t.params&&t.params.id;if(n!==this._event_name||r!==this._event_id)return g.warn("Event header does not match SUBSCRIBE"),e.reply(489),void this._dialogTerminated(y.RECEIVE_BAD_NOTIFY);var i=e.parseHeader("subscription-state");if(!i)return g.warn("missed Subscription-State header"),e.reply(400),void this._dialogTerminated(y.RECEIVE_BAD_NOTIFY);e.reply(200);var s=this._stateStringToNumber(i.state),o=this._state;if(o!==y.STATE_TERMINATED&&s!==y.STATE_TERMINATED&&(this._state=s,void 0!==i.expires)){var l=i.expires,a=(new Date).getTime()+1e3*l;this._expires_timestamp-a>2e3&&(g.debug("update sending re-SUBSCRIBE time"),this._scheduleSubscribe(l))}o!==y.STATE_PENDING&&s===y.STATE_PENDING?(g.debug('emit "pending"'),this.emit("pending")):o!==y.STATE_ACTIVE&&s===y.STATE_ACTIVE&&(g.debug('emit "active"'),this.emit("active"));var u=e.body,c=s===y.STATE_TERMINATED;if(u){var h=e.getHeader("content-type");g.debug('emit "notify"'),this.emit("notify",c,e,u,h)}if(c){var f=i.reason,_=void 0;i.params&&void 0!==i.params["retry-after"]&&(_=parseInt(i.params["retry-after"])),this._dialogTerminated(y.RECEIVE_FINAL_NOTIFY,f,_)}}},{key:"subscribe",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;g.debug("subscribe()"),this._state===y.STATE_INIT?this._sendInitialSubscribe(e,this._headers):this._sendSubsequentSubscribe(e,this._headers)}},{key:"terminate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(g.debug("terminate()"),!this._terminated){this._terminated=!0;var n=this._headers.map(function(e){return e.startsWith("Expires")?"Expires: 0":e});this._state===y.STATE_INIT?this._sendInitialSubscribe(t,n):this._sendSubsequentSubscribe(t,n);this._unsubscribe_timeout_timer=setTimeout(function(){e._dialogTerminated(y.UNSUBSCRIBE_TIMEOUT)},3e4)}}},{key:"state",get:function(){return this._state}},{key:"id",get:function(){return this._dialog?this._dialog.id:null}},{key:"_sendInitialSubscribe",value:function(e,t){var n=this;if(e){if(!this._content_type)throw new TypeError("content_type is undefined");(t=t.slice()).push("Content-Type: ".concat(this._content_type))}this._state=y.STATE_NOTIFY_WAIT;var r=new p.OutgoingRequest(d.SUBSCRIBE,this._ua.normalizeTarget(this._target),this._ua,this._params,t,e);new m(this._ua,r,{onRequestTimeout:function(){n.onRequestTimeout()},onTransportError:function(){n.onTransportError()},onReceiveResponse:function(e){n._receiveSubscribeResponse(e)}}).send()}},{key:"_receiveSubscribeResponse",value:function(e){if(e.status_code>=200&&e.status_code<300){if(null===this._dialog){var t=new v(this,e,"UAC");if(t.error)return g.warn(t.error),void this._dialogTerminated(y.SUBSCRIBE_BAD_OK_RESPONSE);this._dialog=t,g.debug('emit "accepted"'),this.emit("accepted");var n,r=i(this._queue);try{for(r.s();!(n=r.n()).done;){var s=n.value;g.debug("dequeue subscribe"),this._sendSubsequentSubscribe(s.body,s.headers)}}catch(e){r.e(e)}finally{r.f()}}var o=e.getHeader("expires");0===o||o||(g.warn("response without Expires header"),o="900");var l=parseInt(o);l>0&&this._scheduleSubscribe(l)}else 401===e.status_code||407===e.status_code?this._dialogTerminated(y.SUBSCRIBE_FAILED_AUTHENTICATION):e.status_code>=300&&this._dialogTerminated(y.SUBSCRIBE_NON_OK_RESPONSE)}},{key:"_sendSubsequentSubscribe",value:function(e,t){var n=this;if(this._state!==y.STATE_TERMINATED){if(!this._dialog)return g.debug("enqueue subscribe"),void this._queue.push({body:e,headers:t.slice()});if(e){if(!this._content_type)throw new TypeError("content_type is undefined");(t=t.slice()).push("Content-Type: ".concat(this._content_type))}this._dialog.sendRequest(d.SUBSCRIBE,{body:e,extraHeaders:t,eventHandlers:{onRequestTimeout:function(){n.onRequestTimeout()},onTransportError:function(){n.onTransportError()},onSuccessResponse:function(e){n._receiveSubscribeResponse(e)},onErrorResponse:function(e){n._receiveSubscribeResponse(e)},onDialogError:function(e){n._receiveSubscribeResponse(e)}}})}}},{key:"_dialogTerminated",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this._state!==y.STATE_TERMINATED&&(this._state=y.STATE_TERMINATED,clearTimeout(this._expires_timer),clearTimeout(this._unsubscribe_timeout_timer),this._dialog&&(this._dialog.terminate(),this._dialog=null),g.debug('emit "terminated" code='.concat(e)),this.emit("terminated",e,t,n))}},{key:"_scheduleSubscribe",value:function(e){var t=this,n=e>=140?1e3*e/2+Math.floor(1e3*(e/2-70)*Math.random()):1e3*e-5e3;this._expires_timestamp=(new Date).getTime()+1e3*e,g.debug("next SUBSCRIBE will be sent in ".concat(Math.floor(n/1e3)," sec")),clearTimeout(this._expires_timer),this._expires_timer=setTimeout(function(){t._expires_timer=null,t._sendSubsequentSubscribe(null,t._headers)},n)}},{key:"_stateStringToNumber",value:function(e){switch(e){case"pending":return y.STATE_PENDING;case"active":return y.STATE_ACTIVE;case"terminated":return y.STATE_TERMINATED;case"init":return y.STATE_INIT;case"notify_wait":return y.STATE_NOTIFY_WAIT;default:throw new TypeError("wrong state value")}}}])&&o(t.prototype,n),r&&o(t,r),u}()},{"./Constants":2,"./Dialog":3,"./Grammar":7,"./Logger":9,"./RequestSender":21,"./SIPMessage":22,"./Utils":30,events:33}],25:[function(e,t,n){"use strict";var r=500;t.exports={T1:r,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4}},{}],26:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=h(e);if(t){var s=h(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return c(e)}(this,n)}}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=e("events").EventEmitter,f=e("./Logger"),_=e("./Constants"),p=e("./SIPMessage"),m=e("./Timers"),v=new f("NonInviteClientTransaction"),g=new f("InviteClientTransaction"),y=new f("AckClientTransaction"),T=new f("NonInviteServerTransaction"),b=new f("InviteServerTransaction"),S={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"},E=function(e){l(n,d);var t=u(n);function n(e,r,s,o){var l;i(this,n),(l=t.call(this)).type=S.NON_INVITE_CLIENT,l.id="z9hG4bK".concat(Math.floor(1e7*Math.random())),l.ua=e,l.transport=r,l.request=s,l.eventHandlers=o;var a="SIP/2.0/".concat(r.via_transport);return a+=" ".concat(e.configuration.via_host,";branch=").concat(l.id),l.request.setHeader("via",a),l.ua.newTransaction(c(l)),l}return o(n,[{key:"C",get:function(){return S}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(S.STATUS_TRYING),this.F=setTimeout(function(){e.timer_F()},m.TIMER_F),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){v.debug("transport error occurred, deleting transaction ".concat(this.id)),clearTimeout(this.F),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onTransportError()}},{key:"timer_F",value:function(){v.debug("Timer F expired for transaction ".concat(this.id)),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout()}},{key:"timer_K",value:function(){this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"receiveResponse",value:function(e){var t=e.status_code;if(t<200)switch(this.state){case S.STATUS_TRYING:case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e)}else switch(this.state){case S.STATUS_TRYING:case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_COMPLETED),clearTimeout(this.F),408===t?this.eventHandlers.onRequestTimeout():this.eventHandlers.onReceiveResponse(e),this.timer_K();break;case S.STATUS_COMPLETED:}}}]),n}(),C=function(e){l(n,d);var t=u(n);function n(e,r,s,o){var l;i(this,n),(l=t.call(this)).type=S.INVITE_CLIENT,l.id="z9hG4bK".concat(Math.floor(1e7*Math.random())),l.ua=e,l.transport=r,l.request=s,l.eventHandlers=o,s.transaction=c(l);var a="SIP/2.0/".concat(r.via_transport);return a+=" ".concat(e.configuration.via_host,";branch=").concat(l.id),l.request.setHeader("via",a),l.ua.newTransaction(c(l)),l}return o(n,[{key:"C",get:function(){return S}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"send",value:function(){var e=this;this.stateChanged(S.STATUS_CALLING),this.B=setTimeout(function(){e.timer_B()},m.TIMER_B),this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){clearTimeout(this.B),clearTimeout(this.M),this.state!==S.STATUS_ACCEPTED&&(g.debug("transport error occurred, deleting transaction ".concat(this.id)),this.eventHandlers.onTransportError()),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_M",value:function(){g.debug("Timer M expired for transaction ".concat(this.id)),this.state===S.STATUS_ACCEPTED&&(clearTimeout(this.B),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"timer_B",value:function(){g.debug("Timer B expired for transaction ".concat(this.id)),this.state===S.STATUS_CALLING&&(this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this),this.eventHandlers.onRequestTimeout())}},{key:"timer_D",value:function(){g.debug("Timer D expired for transaction ".concat(this.id)),clearTimeout(this.B),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"sendACK",value:function(e){var t=new p.OutgoingRequest(_.ACK,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",e.getHeader("to")),this.transport.send(t),this.timer_D()}},{key:"cancel",value:function(e){if(this.state===S.STATUS_PROCEEDING){var t=new p.OutgoingRequest(_.CANCEL,this.request.ruri,this.ua,{route_set:this.request.getHeaders("route"),call_id:this.request.getHeader("call-id"),cseq:this.request.cseq});t.setHeader("from",this.request.getHeader("from")),t.setHeader("via",this.request.getHeader("via")),t.setHeader("to",this.request.getHeader("to")),e&&t.setHeader("reason",e),this.transport.send(t)}}},{key:"receiveResponse",value:function(e){var t=this,n=e.status_code;if(n>=100&&n<=199)switch(this.state){case S.STATUS_CALLING:this.stateChanged(S.STATUS_PROCEEDING),this.eventHandlers.onReceiveResponse(e);break;case S.STATUS_PROCEEDING:this.eventHandlers.onReceiveResponse(e)}else if(n>=200&&n<=299)switch(this.state){case S.STATUS_CALLING:case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_ACCEPTED),this.M=setTimeout(function(){t.timer_M()},m.TIMER_M),this.eventHandlers.onReceiveResponse(e);break;case S.STATUS_ACCEPTED:this.eventHandlers.onReceiveResponse(e)}else if(n>=300&&n<=699)switch(this.state){case S.STATUS_CALLING:case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_COMPLETED),this.sendACK(e),this.eventHandlers.onReceiveResponse(e);break;case S.STATUS_COMPLETED:this.sendACK(e)}}}]),n}(),A=function(e){l(n,d);var t=u(n);function n(e,r,s,o){var l;i(this,n),(l=t.call(this)).id="z9hG4bK".concat(Math.floor(1e7*Math.random())),l.transport=r,l.request=s,l.eventHandlers=o;var a="SIP/2.0/".concat(r.via_transport);return a+=" ".concat(e.configuration.via_host,";branch=").concat(l.id),l.request.setHeader("via",a),l}return o(n,[{key:"C",get:function(){return S}},{key:"send",value:function(){this.transport.send(this.request)||this.onTransportError()}},{key:"onTransportError",value:function(){y.debug("transport error occurred for transaction ".concat(this.id)),this.eventHandlers.onTransportError()}}]),n}(),R=function(e){l(n,d);var t=u(n);function n(e,r,s){var o;return i(this,n),(o=t.call(this)).type=S.NON_INVITE_SERVER,o.id=s.via_branch,o.ua=e,o.transport=r,o.request=s,o.last_response="",s.server_transaction=c(o),o.state=S.STATUS_TRYING,e.newTransaction(c(o)),o}return o(n,[{key:"C",get:function(){return S}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_J",value:function(){T.debug("Timer J expired for transaction ".concat(this.id)),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,T.debug("transport error occurred, deleting transaction ".concat(this.id)),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"receiveResponse",value:function(e,t,n,r){if(100===e)switch(this.state){case S.STATUS_TRYING:this.stateChanged(S.STATUS_PROCEEDING),this.transport.send(t)||this.onTransportError();break;case S.STATUS_PROCEEDING:this.last_response=t,this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=200&&e<=699)switch(this.state){case S.STATUS_TRYING:case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_COMPLETED),this.last_response=t,this.timer_J(),this.transport.send(t)?n&&n():(this.onTransportError(),r&&r());break;case S.STATUS_COMPLETED:}}}]),n}(),w=function(e){l(n,d);var t=u(n);function n(e,r,s){var o;return i(this,n),(o=t.call(this)).type=S.INVITE_SERVER,o.id=s.via_branch,o.ua=e,o.transport=r,o.request=s,o.last_response="",s.server_transaction=c(o),o.state=S.STATUS_PROCEEDING,e.newTransaction(c(o)),o.resendProvisionalTimer=null,s.reply(100),o}return o(n,[{key:"C",get:function(){return S}},{key:"stateChanged",value:function(e){this.state=e,this.emit("stateChanged")}},{key:"timer_H",value:function(){b.debug("Timer H expired for transaction ".concat(this.id)),this.state===S.STATUS_COMPLETED&&b.debug("ACK not received, dialog will be terminated"),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_I",value:function(){this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this)}},{key:"timer_L",value:function(){b.debug("Timer L expired for transaction ".concat(this.id)),this.state===S.STATUS_ACCEPTED&&(this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"onTransportError",value:function(){this.transportError||(this.transportError=!0,b.debug("transport error occurred, deleting transaction ".concat(this.id)),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),clearTimeout(this.L),clearTimeout(this.H),this.stateChanged(S.STATUS_TERMINATED),this.ua.destroyTransaction(this))}},{key:"resend_provisional",value:function(){this.transport.send(this.last_response)||this.onTransportError()}},{key:"receiveResponse",value:function(e,t,n,r){var i=this;if(e>=100&&e<=199)switch(this.state){case S.STATUS_PROCEEDING:this.transport.send(t)||this.onTransportError(),this.last_response=t}if(e>100&&e<=199&&this.state===S.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=setInterval(function(){i.resend_provisional()},m.PROVISIONAL_RESPONSE_INTERVAL));else if(e>=200&&e<=299)switch(this.state){case S.STATUS_PROCEEDING:this.stateChanged(S.STATUS_ACCEPTED),this.last_response=t,this.L=setTimeout(function(){i.timer_L()},m.TIMER_L),null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case S.STATUS_ACCEPTED:this.transport.send(t)?n&&n():(this.onTransportError(),r&&r())}else if(e>=300&&e<=699)switch(this.state){case S.STATUS_PROCEEDING:null!==this.resendProvisionalTimer&&(clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(t)?(this.stateChanged(S.STATUS_COMPLETED),this.H=setTimeout(function(){i.timer_H()},m.TIMER_H),n&&n()):(this.onTransportError(),r&&r())}}}]),n}();t.exports={C:S,NonInviteClientTransaction:E,InviteClientTransaction:C,AckClientTransaction:A,NonInviteServerTransaction:R,InviteServerTransaction:w,checkTransaction:function(e,t){var n,r=e._transactions;switch(t.method){case _.INVITE:if(n=r.ist[t.via_branch]){switch(n.state){case S.STATUS_PROCEEDING:n.transport.send(n.last_response);break;case S.STATUS_ACCEPTED:}return!0}break;case _.ACK:if(!(n=r.ist[t.via_branch]))return!1;if(n.state===S.STATUS_ACCEPTED)return!1;if(n.state===S.STATUS_COMPLETED)return n.state=S.STATUS_CONFIRMED,n.timer_I(),!0;break;case _.CANCEL:return(n=r.ist[t.via_branch])?(t.reply_sl(200),n.state!==S.STATUS_PROCEEDING):(t.reply_sl(481),!0);default:if(n=r.nist[t.via_branch]){switch(n.state){case S.STATUS_TRYING:break;case S.STATUS_PROCEEDING:case S.STATUS_COMPLETED:n.transport.send(n.last_response)}return!0}}}}},{"./Constants":2,"./Logger":9,"./SIPMessage":22,"./Timers":25,events:33}],27:[function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=e("./Logger"),l=e("./Socket"),a=e("./Constants"),u=new o("Transport"),c={STATUS_CONNECTED:0,STATUS_CONNECTING:1,STATUS_DISCONNECTED:2,SOCKET_STATUS_READY:0,SOCKET_STATUS_ERROR:1,recovery_options:{min_interval:a.CONNECTION_RECOVERY_MIN_INTERVAL,max_interval:a.CONNECTION_RECOVERY_MAX_INTERVAL}};t.exports=function(){function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.recovery_options;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u.debug("new()"),this._ua=t,this.status=c.STATUS_DISCONNECTED,this.socket=null,this.sockets=[],this.recovery_options=r,this.recover_attempts=0,this.recovery_timer=null,this.close_requested=!1;try{this.textDecoder=new TextDecoder("utf8")}catch(e){u.warn("cannot use TextDecoder: ".concat(e))}if(void 0===n)throw new TypeError("Invalid argument. undefined 'sockets' argument");n instanceof Array||(n=[n]),n.forEach(function(e){if(!l.isSocket(e.socket))throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");if(e.weight&&!Number(e.weight))throw new TypeError("Invalid argument. 'weight' attribute is not a number");this.sockets.push({socket:e.socket,weight:e.weight||0,status:c.SOCKET_STATUS_READY})},this),this._getSocket()}var t,n,i;return t=e,(n=[{key:"via_transport",get:function(){return this.socket.via_transport}},{key:"url",get:function(){return this.socket.url}},{key:"sip_uri",get:function(){return this.socket.sip_uri}},{key:"connect",value:function(){u.debug("connect()"),this.isConnected()?u.debug("Transport is already connected"):this.isConnecting()?u.debug("Transport is connecting"):(this.close_requested=!1,this.status=c.STATUS_CONNECTING,this.onconnecting({socket:this.socket,attempts:this.recover_attempts}),this.close_requested||(this.socket.onconnect=this._onConnect.bind(this),this.socket.ondisconnect=this._onDisconnect.bind(this),this.socket.ondata=this._onData.bind(this),this.socket.connect()))}},{key:"disconnect",value:function(){u.debug("close()"),this.close_requested=!0,this.recover_attempts=0,this.status=c.STATUS_DISCONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.socket.onconnect=function(){},this.socket.ondisconnect=function(){},this.socket.ondata=function(){},this.socket.disconnect(),this.ondisconnect({socket:this.socket,error:!1})}},{key:"send",value:function(e){if(u.debug("send()"),!this.isConnected())return u.warn("unable to send message, transport is not connected"),!1;var t=e.toString();return u.debug("sending message:\n\n".concat(t,"\n")),this.socket.send(t)}},{key:"isConnected",value:function(){return this.status===c.STATUS_CONNECTED}},{key:"isConnecting",value:function(){return this.status===c.STATUS_CONNECTING}},{key:"_get_number_of_sbc",value:function(){return this.sockets.length}},{key:"_switch_sbc",value:function(){var e=this.ondisconnect;this.ondisconnect=function(){},this.disconnect(),this.ondisconnect=e,this.close_requested=!1,this.sockets.forEach(function(e){this.socket===e.socket&&(e.status=c.SOCKET_STATUS_ERROR)},this),this._getSocket(),this.connect()}},{key:"_register_redirect",value:function(e){var t,n=null,i=r(this.sockets);try{for(i.s();!(t=i.n()).done;){var s=t.value;if(s.socket.url===e){n=s.socket;break}}}catch(e){i.e(e)}finally{i.f()}if(null===n&&!e.includes(":",6)){e+=":443";var o,l=r(this.sockets);try{for(l.s();!(o=l.n()).done;){var a=o.value;if(a.socket.url===e){n=a.socket;break}}}catch(e){l.e(e)}finally{l.f()}}if(null===n)return!1;var u=this.ondisconnect;return this.ondisconnect=function(){},this.disconnect(),this.ondisconnect=u,this.socket=n,this.connect(),!0}},{key:"_reconnect",value:function(){var e=this;this.recover_attempts+=1;var t=Math.floor(Math.random()*Math.pow(2,this.recover_attempts)+1);t<this.recovery_options.min_interval?t=this.recovery_options.min_interval:t>this.recovery_options.max_interval&&(t=this.recovery_options.max_interval),u.debug("reconnection attempt: ".concat(this.recover_attempts,". next connection attempt in ").concat(t," seconds")),this.recovery_timer=setTimeout(function(){e.close_requested||e.isConnected()||e.isConnecting()||(e._getSocket(),e.connect())},1e3*t)}},{key:"_getSocket",value:function(){var e=[];if(this.sockets.forEach(function(t){t.status!==c.SOCKET_STATUS_ERROR&&(0===e.length?e.push(t):t.weight>e[0].weight?e=[t]:t.weight===e[0].weight&&e.push(t))}),0===e.length)return this.sockets.forEach(function(e){e.status=c.SOCKET_STATUS_READY}),void this._getSocket();var t=Math.floor(Math.random()*e.length);this.socket=e[t].socket}},{key:"_onConnect",value:function(){this.recover_attempts=0,this._ha_connect_time=void 0,this.status=c.STATUS_CONNECTED,null!==this.recovery_timer&&(clearTimeout(this.recovery_timer),this.recovery_timer=null),this.onconnect({socket:this})}},{key:"_onDisconnect",value:function(e,t,n){var r=this.status;if(this.status=c.STATUS_DISCONNECTED,this.ondisconnect({socket:this.socket,error:e,code:t,reason:n}),!this.close_requested){if(void 0!==this._ua.modes.sbc_ha_pairs_mode){if(r===c.STATUS_CONNECTED)return u.debug("AC: SBC HA pairs mode: Reconnect to the same SBC ".concat(this._ua.modes.sbc_ha_pairs_mode," seconds left")),this._ha_connect_time=(new Date).getTime()+1e3*this._ua.modes.sbc_ha_pairs_mode,void this._connect2();if(void 0!==this._ha_connect_time){var i=this._ha_connect_time-(new Date).getTime();if(i>0)return u.debug("AC: SBC HA pairs mode: Repeat ".concat(i/1e3," seconds left")),void this._connect2();u.debug("AC: SBC HA pairs mode: Failed"),this._ha_connect_time=void 0}}this.sockets.forEach(function(e){this.socket===e.socket&&(e.status=c.SOCKET_STATUS_ERROR)},this),this._reconnect()}}},{key:"_connect2",value:function(){var e=this,t=0;if(this._ha_last_connect){var n=(new Date).getTime()-this._ha_last_connect;t=n>500?0:500-n}this.recovery_timer=setTimeout(function(){e.close_requested||e.isConnected()||e.isConnecting()||(e._ha_last_connect=(new Date).getTime(),e.connect())},t)}},{key:"_onData",value:function(e){if("\r\n"!==e){if("string"!=typeof e){try{e=this.textDecoder?this.textDecoder.decode(e):String.fromCharCode.apply(null,new Uint8Array(e))}catch(e){return void u.debug("received binary message failed to be converted into string, message discarded")}u.debug("received binary message:\n\n".concat(e,"\n"))}else u.debug("received text message:\n\n".concat(e,"\n"));this.ondata({transport:this,message:e})}else u.debug("received message with CRLF Keep Alive response")}}])&&s(t.prototype,n),i&&s(t,i),e}()},{"./Constants":2,"./Logger":9,"./Socket":23}],28:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var n,i=a(e);if(t){var s=a(this).constructor;n=Reflect.construct(i,arguments,s)}else n=i.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;return l(e)}(this,n)}}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var u=e("events").EventEmitter,c=e("./Logger"),h=e("./Constants"),d=e("./Registrator"),f=e("./RTCSession"),_=e("./Subscriber"),p=e("./Notifier"),m=e("./Message"),v=e("./Options"),g=e("./Transactions"),y=e("./Transport"),T=e("./Utils"),b=e("./Exceptions"),S=e("./URI"),E=e("./Parser"),C=e("./SIPMessage"),A=e("./sanityCheck"),R=e("./Config"),w=new c("UA"),I={STATUS_INIT:0,STATUS_READY:1,STATUS_USER_CLOSED:2,STATUS_NOT_READY:3,CONFIGURATION_ERROR:1,NETWORK_ERROR:2};t.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(c,u);var t,n,r,a=o(c);function c(e){var t;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=a.call(this)).modes={},t._credentials={},t._cache={credentials:{}},t._configuration=Object.assign({},R.settings),t._dynConfiguration={},t._dialogs={},t._applicants={},t._sessions={},t._transport=null,t._contact=null,t._status=I.STATUS_INIT,t._error=null,t._transactions={nist:{},nict:{},ist:{},ict:{}},t._data={},t._closeTimer=null,void 0===e)throw new TypeError("Not enough arguments");try{t._loadConfig(e)}catch(e){throw t._status=I.STATUS_NOT_READY,t._error=I.CONFIGURATION_ERROR,e}return t._registrator=new d(l(t)),t}return t=c,r=[{key:"C",get:function(){return I}}],(n=[{key:"C",get:function(){return I}},{key:"status",get:function(){return this._status}},{key:"contact",get:function(){return this._contact}},{key:"configuration",get:function(){return this._configuration}},{key:"transport",get:function(){return this._transport}},{key:"start",value:function(){w.debug("start()"),this._status===I.STATUS_INIT?this._transport.connect():this._status===I.STATUS_USER_CLOSED?(w.debug("restarting UA"),null!==this._closeTimer&&(clearTimeout(this._closeTimer),this._closeTimer=null,this._transport.disconnect()),this._status=I.STATUS_INIT,this._transport.connect()):this._status===I.STATUS_READY?w.debug("UA is in READY status, not restarted"):w.debug("ERROR: connection is down, Auto-Recovery system is trying to reconnect"),this._dynConfiguration.register=this._configuration.register}},{key:"register",value:function(){w.debug("register()"),this._dynConfiguration.register=!0,this._registrator.register()}},{key:"unregister",value:function(e){w.debug("unregister()"),this._dynConfiguration.register=!1,this._registrator.unregister(e)}},{key:"registrator",value:function(){return this._registrator}},{key:"isRegistered",value:function(){return this._registrator.registered}},{key:"isConnected",value:function(){return this._transport.isConnected()}},{key:"call",value:function(e,t){w.debug("call()");var n=new f(this);return n.connect(e,t),n}},{key:"sendMessage",value:function(e,t,n){w.debug("sendMessage()");var r=new m(this);return r.send(e,t,n),r}},{key:"subscribe",value:function(e,t,n,r){return w.debug("subscribe()"),new _(this,e,t,n,r)}},{key:"notify",value:function(e,t,n){return w.debug("notify()"),new p(this,e,t,n)}},{key:"addCredential",value:function(e){this._credentials[e.realm]=T.cloneObject(e)}},{key:"getCredential",value:function(e){var t=this._credentials[e];return t||{username:this._configuration.authorization_user,password:this._configuration.password,realm:this._configuration.realm,ha1:this._configuration.ha1}}},{key:"updateCredential",value:function(e,t,n){var r=this._credentials[e];r?(r.realm=t,r.ha1=n):(this.set("realm",t),this.set("ha1",n))}},{key:"sendOptions",value:function(e,t,n){w.debug("sendOptions()");var r=new v(this);return r.send(e,t,n),r}},{key:"terminateSessions",value:function(e){for(var t in w.debug("terminateSessions()"),this._sessions)this._sessions[t].isEnded()||this._sessions[t].terminate(e)}},{key:"stop",value:function(){var e=this;if(w.debug("stop()"),this._dynConfiguration={},this._status!==I.STATUS_USER_CLOSED){this._registrator.close();var t=Object.keys(this._sessions).length;for(var n in this._sessions)if(Object.prototype.hasOwnProperty.call(this._sessions,n)){w.debug("closing session ".concat(n));try{this._sessions[n].terminate()}catch(e){}}for(var r in this._applicants)if(Object.prototype.hasOwnProperty.call(this._applicants,r))try{this._applicants[r].close()}catch(e){}this._status=I.STATUS_USER_CLOSED,0===Object.keys(this._transactions.nict).length+Object.keys(this._transactions.nist).length+Object.keys(this._transactions.ict).length+Object.keys(this._transactions.ist).length&&0===t?this._transport.disconnect():this._closeTimer=setTimeout(function(){e._closeTimer=null,e._transport.disconnect()},2e3)}else w.debug("UA already closed")}},{key:"normalizeTarget",value:function(e){return T.normalizeTarget(e,this._configuration.hostport_params)}},{key:"get",value:function(e){switch(e){case"authorization_user":return this._configuration.authorization_user;case"realm":return this._configuration.realm;case"ha1":return this._configuration.ha1;case"authorization_jwt":return this._configuration.authorization_jwt;default:return void w.warn('get() | cannot get "%s" parameter in runtime',e)}}},{key:"set",value:function(e,t){switch(e){case"authorization_user":this._configuration.authorization_user=String(t);break;case"password":this._configuration.password=String(t);break;case"realm":this._configuration.realm=String(t);break;case"ha1":this._configuration.ha1=String(t),this._configuration.password=null;break;case"authorization_jwt":this._configuration.authorization_jwt=String(t);break;case"display_name":this._configuration.display_name=t;break;default:return w.warn('set() | cannot set "%s" parameter in runtime',e),!1}return!0}},{key:"registerRedirect",value:function(e){return!!this._transport._register_redirect(e)||(w.debug('registerRedirect: ignored, "'.concat(e,'" is not found in configuration')),!1)}},{key:"switchSBC",value:function(e){return this._transport._get_number_of_sbc()<2?(w.debug("switchSBC: ignored, no other SBC"),!1):(e&&this._registrator._unregistered(null,h.causes.CONNECTION_ERROR),this._transport._switch_sbc(),!0)}},{key:"getNumberOfSBC",value:function(){return this._transport._get_number_of_sbc()}},{key:"newTransaction",value:function(e){this._transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})}},{key:"destroyTransaction",value:function(e){delete this._transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})}},{key:"newDialog",value:function(e){this._dialogs[e.id]=e}},{key:"destroyDialog",value:function(e){delete this._dialogs[e.id]}},{key:"newMessage",value:function(e,t){this._applicants[e]=e,this.emit("newMessage",t)}},{key:"newOptions",value:function(e,t){this._applicants[e]=e,this.emit("newOptions",t)}},{key:"destroyMessage",value:function(e){delete this._applicants[e]}},{key:"newRTCSession",value:function(e,t){this._sessions[e.id]=e,this.emit("newRTCSession",t)}},{key:"destroyRTCSession",value:function(e){delete this._sessions[e.id]}},{key:"registered",value:function(e){this.emit("registered",e)}},{key:"unregistered",value:function(e){this.emit("unregistered",e)}},{key:"registrationFailed",value:function(e){this.emit("registrationFailed",e)}},{key:"receiveRequest",value:function(e){var t=e.method;if(e.ruri.user!==this._configuration.uri.user&&e.ruri.user!==this._contact.uri.user)return w.debug("Request-URI does not point to us"),void(e.method!==h.ACK&&e.reply_sl(404));if(e.ruri.scheme!==h.SIPS){if(!g.checkTransaction(this,e)){if(t===h.INVITE?new g.InviteServerTransaction(this,this._transport,e):t!==h.ACK&&t!==h.CANCEL&&new g.NonInviteServerTransaction(this,this._transport,e),t===h.OPTIONS){if(0===this.listeners("newOptions").length)return void e.reply(200);new v(this).init_incoming(e)}else if(t===h.MESSAGE){if(0===this.listeners("newMessage").length)return void e.reply(405);new m(this).init_incoming(e)}else if(t===h.SUBSCRIBE){if(0===this.listeners("newSubscribe").length)return void e.reply(405)}else if(t===h.INVITE&&!e.to_tag&&0===this.listeners("newRTCSession").length)return void e.reply(405);var n,r;if(e.to_tag)(n=this._findDialog(e.call_id,e.from_tag,e.to_tag))?n.receiveRequest(e):t===h.NOTIFY?(r=this._findSession(e))?r.receiveRequest(e):(w.debug("received NOTIFY request for a non existent subscription"),e.reply(481,"Subscription does not exist")):t!==h.ACK&&e.reply(481);else switch(t){case h.INVITE:if(window.RTCPeerConnection)if(e.hasHeader("replaces")){var i=e.replaces;(n=this._findDialog(i.call_id,i.from_tag,i.to_tag))?(r=n.owner).isEnded()?e.reply(603):r.receiveRequest(e):e.reply(481)}else(r=new f(this)).init_incoming(e);else w.warn("INVITE received but WebRTC is not supported"),e.reply(488);break;case h.BYE:e.reply(481);break;case h.CANCEL:(r=this._findSession(e))?r.receiveRequest(e):w.debug("received CANCEL request for a non existent session");break;case h.ACK:break;case h.NOTIFY:this.emit("sipEvent",{event:e.event,request:e}),e.reply(200);break;case h.SUBSCRIBE:this.emit("newSubscribe",{event:e.event,request:e});break;default:e.reply(405)}}}else e.reply_sl(416)}},{key:"_findSession",value:function(e){var t=e.call_id,n=e.from_tag,r=e.to_tag,i=t+n,s=this._sessions[i],o=t+r,l=this._sessions[o];return s||(l||null)}},{key:"_findDialog",value:function(e,t,n){var r=e+t+n,i=this._dialogs[r];return i||(r=e+n+t,(i=this._dialogs[r])||null)}},{key:"_loadConfig",value:function(e){try{R.load(this._configuration,e)}catch(e){throw e}0===this._configuration.display_name&&(this._configuration.display_name="0"),this._configuration.instance_id||(this._configuration.instance_id=T.newUUID()),this._configuration.jssip_id=T.createRandomToken(5);var t=this._configuration.uri.clone();t.user=null,this._configuration.hostport_params=t.toString().replace(/^sip:/i,"");try{this._transport=new y(this,this._configuration.sockets,{max_interval:this._configuration.connection_recovery_max_interval,min_interval:this._configuration.connection_recovery_min_interval}),this._transport.onconnecting=function(e){this.emit("connecting",e)}.bind(this),this._transport.onconnect=function(e){if(this._status===I.STATUS_USER_CLOSED)return;this._status=I.STATUS_READY,this._error=null,this.emit("connected",e),this._dynConfiguration.register&&this._registrator.register()}.bind(this),this._transport.ondisconnect=function(e){for(var t=0,n=["nict","ict","nist","ist"];t<n.length;t++){var r=n[t];for(var i in this._transactions[r])Object.prototype.hasOwnProperty.call(this._transactions[r],i)&&this._transactions[r][i].onTransportError()}this.emit("disconnected",e),this._registrator.onTransportClosed(),this._status!==I.STATUS_USER_CLOSED&&(this._status=I.STATUS_NOT_READY,this._error=I.NETWORK_ERROR)}.bind(this),this._transport.ondata=function(e){var t=e.transport,n=e.message;if(!(n=E.parseMessage(n,this)))return;if(this._status===I.STATUS_USER_CLOSED&&n instanceof C.IncomingRequest)return;if(!A(n,this,t))return;if(n instanceof C.IncomingRequest)n.transport=t,this.receiveRequest(n);else if(n instanceof C.IncomingResponse){var r;switch(n.method){case h.INVITE:(r=this._transactions.ict[n.via_branch])&&r.receiveResponse(n);break;case h.ACK:break;default:(r=this._transactions.nict[n.via_branch])&&r.receiveResponse(n)}}}.bind(this)}catch(e){throw w.warn(e),new b.ConfigurationError("sockets",this._configuration.sockets)}if(delete this._configuration.sockets,this._configuration.authorization_user||(this._configuration.authorization_user=this._configuration.uri.user),!this._configuration.registrar_server){var n=this._configuration.uri.clone();n.user=null,n.clearParams(),n.clearHeaders(),this._configuration.registrar_server=n}this._configuration.no_answer_timeout*=1e3,this._configuration.contact_uri?this._configuration.via_host=this._configuration.contact_uri.host:this._configuration.contact_uri=new S("sip",T.createRandomToken(8),this._configuration.via_host,null,{transport:"ws"}),this._contact={pub_gruu:null,temp_gruu:null,uri:this._configuration.contact_uri,toString:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.anonymous||null,n=e.outbound||null,r="<";return r+=t?this.temp_gruu||"sip:anonymous@anonymous.invalid;transport=ws":this.pub_gruu||this.uri.toString(),!n||(t?this.temp_gruu:this.pub_gruu)||(r+=";ob"),r+=">"}};var r=["authorization_user","password","realm","ha1","authorization_jwt","display_name","register"];for(var i in this._configuration)Object.prototype.hasOwnProperty.call(this._configuration,i)&&(-1!==r.indexOf(i)?Object.defineProperty(this._configuration,i,{writable:!0,configurable:!1}):Object.defineProperty(this._configuration,i,{writable:!1,configurable:!1}));for(var s in w.debug("configuration parameters after validation:"),this._configuration)if(Object.prototype.hasOwnProperty.call(R.settings,s))switch(s){case"uri":case"registrar_server":w.debug("- ".concat(s,": ").concat(this._configuration[s]));break;case"password":case"ha1":case"authorization_jwt":w.debug("- ".concat(s,": NOT SHOWN"));break;default:w.debug("- ".concat(s,": ").concat(JSON.stringify(this._configuration[s])))}}}])&&i(t.prototype,n),r&&i(t,r),c}()},{"./Config":1,"./Constants":2,"./Exceptions":6,"./Logger":9,"./Message":10,"./Notifier":12,"./Options":13,"./Parser":14,"./RTCSession":15,"./Registrator":20,"./SIPMessage":22,"./Subscriber":24,"./Transactions":26,"./Transport":27,"./URI":29,"./Utils":30,"./sanityCheck":32,events:33}],29:[function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=e("./Constants"),l=e("./Utils"),a=e("./Grammar");t.exports=function(){function e(t,n,r,i){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!r)throw new TypeError('missing or invalid "host" parameter');for(var a in this._parameters={},this._headers={},this._scheme=t||o.SIP,this._user=n,this._host=r,this._port=i,s)Object.prototype.hasOwnProperty.call(s,a)&&this.setParam(a,s[a]);for(var u in l)Object.prototype.hasOwnProperty.call(l,u)&&this.setHeader(u,l[u])}var t,n,i;return t=e,i=[{key:"parse",value:function(e){return-1!==(e=a.parse(e,"SIP_URI"))?e:void 0}}],(n=[{key:"scheme",get:function(){return this._scheme},set:function(e){this._scheme=e.toLowerCase()}},{key:"user",get:function(){return this._user},set:function(e){this._user=e}},{key:"host",get:function(){return this._host},set:function(e){this._host=e.toLowerCase()}},{key:"port",get:function(){return this._port},set:function(e){this._port=0===e?e:parseInt(e,10)||null}},{key:"setParam",value:function(e,t){e&&(this._parameters[e.toLowerCase()]=null==t?null:t.toString())}},{key:"getParam",value:function(e){if(e)return this._parameters[e.toLowerCase()]}},{key:"hasParam",value:function(e){if(e)return!!this._parameters.hasOwnProperty(e.toLowerCase())}},{key:"deleteParam",value:function(e){if(e=e.toLowerCase(),this._parameters.hasOwnProperty(e)){var t=this._parameters[e];return delete this._parameters[e],t}}},{key:"clearParams",value:function(){this._parameters={}}},{key:"setHeader",value:function(e,t){this._headers[l.headerize(e)]=Array.isArray(t)?t:[t]}},{key:"getHeader",value:function(e){if(e)return this._headers[l.headerize(e)]}},{key:"hasHeader",value:function(e){if(e)return!!this._headers.hasOwnProperty(l.headerize(e))}},{key:"deleteHeader",value:function(e){if(e=l.headerize(e),this._headers.hasOwnProperty(e)){var t=this._headers[e];return delete this._headers[e],t}}},{key:"clearHeaders",value:function(){this._headers={}}},{key:"clone",value:function(){return new e(this._scheme,this._user,this._host,this._port,JSON.parse(JSON.stringify(this._parameters)),JSON.parse(JSON.stringify(this._headers)))}},{key:"toString",value:function(){var e=[],t="".concat(this._scheme,":");for(var n in this._user&&(t+="".concat(l.escapeUser(this._user),"@")),t+=this._host,(this._port||0===this._port)&&(t+=":".concat(this._port)),this._parameters)Object.prototype.hasOwnProperty.call(this._parameters,n)&&(t+=";".concat(n),null!==this._parameters[n]&&(t+="=".concat(this._parameters[n])));for(var i in this._headers)if(Object.prototype.hasOwnProperty.call(this._headers,i)){var s,o=r(this._headers[i]);try{for(o.s();!(s=o.n()).done;){var a=s.value;e.push("".concat(i,"=").concat(a))}}catch(e){o.e(e)}finally{o.f()}}return e.length>0&&(t+="?".concat(e.join("&"))),t}},{key:"toAor",value:function(e){var t="".concat(this._scheme,":");return this._user&&(t+="".concat(l.escapeUser(this._user),"@")),t+=this._host,e&&(this._port||0===this._port)&&(t+=":".concat(this._port)),t}}])&&s(t.prototype,n),i&&s(t,i),e}()},{"./Constants":2,"./Grammar":7,"./Utils":30}],30:[function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var o=e("./Constants"),l=e("./URI"),a=e("./Grammar");n.str_utf8_length=function(e){return unescape(encodeURIComponent(e)).length};var u=n.isFunction=function(e){return void 0!==e&&"[object Function]"===Object.prototype.toString.call(e)};n.isString=function(e){return void 0!==e&&"[object String]"===Object.prototype.toString.call(e)},n.isDecimal=function(e){return!isNaN(e)&&parseFloat(e)===parseInt(e,10)},n.isEmpty=function(e){return null===e||""===e||void 0===e||Array.isArray(e)&&0===e.length||"number"==typeof e&&isNaN(e)},n.hasMethods=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var i=0,s=n;i<s.length;i++){var o=s[i];if(u(e[o]))return!1}return!0};var c=n.createRandomToken=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,r="";for(t=0;t<e;t++)r+=(Math.random()*n|0).toString(n);return r};n.newTag=function(){return c(10)},n.newUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})},n.hostType=function(e){if(e)return-1!==(e=a.parse(e,"host"))?e.host_type:void 0};var h=n.escapeUser=function(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")};n.normalizeTarget=function(e,t){if(e){if(e instanceof l)return e;if("string"==typeof e){var n,r,i,s=e.split("@");switch(s.length){case 1:if(!t)return;n=e,r=t;break;case 2:n=s[0],r=s[1];break;default:n=s.slice(0,s.length-1).join("@"),r=s[s.length-1]}return n=n.replace(/^(sips?|tel):/i,""),/^[-.()]*\+?[0-9\-.()]+$/.test(n)&&(n=n.replace(/[-.()]/g,"")),e="".concat(o.SIP,":").concat(h(n),"@").concat(r),(i=l.parse(e))?i:void 0}}else;},n.headerize=function(e){var t,n={"Call-Id":"Call-ID",Cseq:"CSeq","Www-Authenticate":"WWW-Authenticate"},r=e.toLowerCase().replace(/_/g,"-").split("-"),i="",s=r.length;for(t=0;t<s;t++)0!==t&&(i+="-"),i+=r[t].charAt(0).toUpperCase()+r[t].substring(1);return n[i]&&(i=n[i]),i},n.sipErrorCause=function(e){for(var t in o.SIP_ERROR_CAUSES)if(-1!==o.SIP_ERROR_CAUSES[t].indexOf(e))return o.causes[t];return o.causes.SIP_FAILURE_CODE},n.getRandomTestNetIP=function(){return"192.0.2.".concat((e=1,t=254,Math.floor(Math.random()*(t-e+1)+e)));var e,t},n.calculateMD5=function(e){function t(e,t){return e<<t|e>>>32-t}function n(e,t){var n=2147483648&e,r=2147483648&t,i=1073741824&e,s=1073741824&t,o=(1073741823&e)+(1073741823&t);return i&s?2147483648^o^n^r:i|s?1073741824&o?3221225472^o^n^r:1073741824^o^n^r:o^n^r}function r(e,r,i,s,o,l,a){return e=n(e,n(n(function(e,t,n){return e&t|~e&n}(r,i,s),o),a)),n(t(e,l),r)}function i(e,r,i,s,o,l,a){return e=n(e,n(n(function(e,t,n){return e&n|t&~n}(r,i,s),o),a)),n(t(e,l),r)}function s(e,r,i,s,o,l,a){return e=n(e,n(n(function(e,t,n){return e^t^n}(r,i,s),o),a)),n(t(e,l),r)}function o(e,r,i,s,o,l,a){return e=n(e,n(n(function(e,t,n){return t^(e|~n)}(r,i,s),o),a)),n(t(e,l),r)}function l(e){var t,n="",r="";for(t=0;t<=3;t++)n+=(r="0".concat((e>>>8*t&255).toString(16))).substr(r.length-2,2);return n}var a,u,c,h,d,f,_,p,m,v;for(a=function(e){for(var t,n=e.length,r=n+8,i=16*((r-r%64)/64+1),s=new Array(i-1),o=0,l=0;l<n;)o=l%4*8,s[t=(l-l%4)/4]=s[t]|e.charCodeAt(l)<<o,l++;return o=l%4*8,s[t=(l-l%4)/4]=s[t]|128<<o,s[i-2]=n<<3,s[i-1]=n>>>29,s}(e=function(e){for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t}(e)),_=1732584193,p=4023233417,m=2562383102,v=271733878,u=0;u<a.length;u+=16)c=_,h=p,d=m,f=v,_=r(_,p,m,v,a[u+0],7,3614090360),v=r(v,_,p,m,a[u+1],12,3905402710),m=r(m,v,_,p,a[u+2],17,606105819),p=r(p,m,v,_,a[u+3],22,3250441966),_=r(_,p,m,v,a[u+4],7,4118548399),v=r(v,_,p,m,a[u+5],12,1200080426),m=r(m,v,_,p,a[u+6],17,2821735955),p=r(p,m,v,_,a[u+7],22,4249261313),_=r(_,p,m,v,a[u+8],7,1770035416),v=r(v,_,p,m,a[u+9],12,2336552879),m=r(m,v,_,p,a[u+10],17,4294925233),p=r(p,m,v,_,a[u+11],22,2304563134),_=r(_,p,m,v,a[u+12],7,1804603682),v=r(v,_,p,m,a[u+13],12,4254626195),m=r(m,v,_,p,a[u+14],17,2792965006),_=i(_,p=r(p,m,v,_,a[u+15],22,1236535329),m,v,a[u+1],5,4129170786),v=i(v,_,p,m,a[u+6],9,3225465664),m=i(m,v,_,p,a[u+11],14,643717713),p=i(p,m,v,_,a[u+0],20,3921069994),_=i(_,p,m,v,a[u+5],5,3593408605),v=i(v,_,p,m,a[u+10],9,38016083),m=i(m,v,_,p,a[u+15],14,3634488961),p=i(p,m,v,_,a[u+4],20,3889429448),_=i(_,p,m,v,a[u+9],5,568446438),v=i(v,_,p,m,a[u+14],9,3275163606),m=i(m,v,_,p,a[u+3],14,4107603335),p=i(p,m,v,_,a[u+8],20,1163531501),_=i(_,p,m,v,a[u+13],5,2850285829),v=i(v,_,p,m,a[u+2],9,4243563512),m=i(m,v,_,p,a[u+7],14,1735328473),_=s(_,p=i(p,m,v,_,a[u+12],20,2368359562),m,v,a[u+5],4,4294588738),v=s(v,_,p,m,a[u+8],11,2272392833),m=s(m,v,_,p,a[u+11],16,1839030562),p=s(p,m,v,_,a[u+14],23,4259657740),_=s(_,p,m,v,a[u+1],4,2763975236),v=s(v,_,p,m,a[u+4],11,1272893353),m=s(m,v,_,p,a[u+7],16,4139469664),p=s(p,m,v,_,a[u+10],23,3200236656),_=s(_,p,m,v,a[u+13],4,681279174),v=s(v,_,p,m,a[u+0],11,3936430074),m=s(m,v,_,p,a[u+3],16,3572445317),p=s(p,m,v,_,a[u+6],23,76029189),_=s(_,p,m,v,a[u+9],4,3654602809),v=s(v,_,p,m,a[u+12],11,3873151461),m=s(m,v,_,p,a[u+15],16,530742520),_=o(_,p=s(p,m,v,_,a[u+2],23,3299628645),m,v,a[u+0],6,4096336452),v=o(v,_,p,m,a[u+7],10,1126891415),m=o(m,v,_,p,a[u+14],15,2878612391),p=o(p,m,v,_,a[u+5],21,4237533241),_=o(_,p,m,v,a[u+12],6,1700485571),v=o(v,_,p,m,a[u+3],10,2399980690),m=o(m,v,_,p,a[u+10],15,4293915773),p=o(p,m,v,_,a[u+1],21,2240044497),_=o(_,p,m,v,a[u+8],6,1873313359),v=o(v,_,p,m,a[u+15],10,4264355552),m=o(m,v,_,p,a[u+6],15,2734768916),p=o(p,m,v,_,a[u+13],21,1309151649),_=o(_,p,m,v,a[u+4],6,4149444226),v=o(v,_,p,m,a[u+11],10,3174756917),m=o(m,v,_,p,a[u+2],15,718787259),p=o(p,m,v,_,a[u+9],21,3951481745),_=n(_,c),p=n(p,h),m=n(m,d),v=n(v,f);return(l(_)+l(p)+l(m)+l(v)).toLowerCase()},n.closeMediaStream=function(e){if(e)try{if(e.getTracks){var t,n=i(e.getTracks());try{for(n.s();!(t=n.n()).done;){t.value.stop()}}catch(e){n.e(e)}finally{n.f()}}else{var s,o=i(e.getAudioTracks());try{for(o.s();!(s=o.n()).done;){s.value.stop()}}catch(e){o.e(e)}finally{o.f()}var l,a=i(e.getVideoTracks());try{for(a.s();!(l=a.n()).done;){l.value.stop()}}catch(e){a.e(e)}finally{a.f()}}}catch(t){"function"!=typeof e.stop&&"object"!==r(e.stop)||e.stop()}},n.cloneArray=function(e){return e&&e.slice()||[]},n.cloneObject=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e&&Object.assign({},e)||t}},{"./Constants":2,"./Grammar":7,"./URI":29}],31:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=e("./Logger"),s=e("./Grammar"),o=new i("WebSocketInterface");t.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o.debug('new() [url:"%s"]',t),this._url=t,this._sip_uri=null,this._via_transport=null,this._ws=null;var n=s.parse(t,"absoluteURI");if(-1===n)throw o.warn("invalid WebSocket URI: ".concat(t)),new TypeError("Invalid argument: ".concat(t));if("wss"!==n.scheme&&"ws"!==n.scheme)throw o.warn("invalid WebSocket URI scheme: ".concat(n.scheme)),new TypeError("Invalid argument: ".concat(t));this._sip_uri="sip:".concat(n.host).concat(n.port?":".concat(n.port):"",";transport=ws"),this._via_transport=n.scheme.toUpperCase()}var t,n,i;return t=e,(n=[{key:"via_transport",get:function(){return this._via_transport},set:function(e){this._via_transport=e.toUpperCase()}},{key:"sip_uri",get:function(){return this._sip_uri}},{key:"url",get:function(){return this._url}},{key:"connect",value:function(){if(o.debug("connect()"),this.isConnected())o.debug("WebSocket ".concat(this._url," is already connected"));else if(this.isConnecting())o.debug("WebSocket ".concat(this._url," is connecting"));else{this._ws&&this.disconnect(),o.debug("connecting to WebSocket ".concat(this._url));try{this._ws=new WebSocket(this._url,"sip"),this._ws.binaryType="arraybuffer",this._ws.onopen=this._onOpen.bind(this),this._ws.onclose=this._onClose.bind(this),this._ws.onmessage=this._onMessage.bind(this),this._ws.onerror=this._onError.bind(this)}catch(e){this._onError(e)}}}},{key:"disconnect",value:function(){o.debug("disconnect()"),this._ws&&(this._ws.onopen=function(){},this._ws.onclose=function(){},this._ws.onmessage=function(){},this._ws.onerror=function(){},this._ws.close(),this._ws=null)}},{key:"send",value:function(e){return o.debug("send()"),this.isConnected()?(this._ws.send(e),!0):(o.warn("unable to send message, WebSocket is not open"),!1)}},{key:"isConnected",value:function(){return this._ws&&this._ws.readyState===this._ws.OPEN}},{key:"isConnecting",value:function(){return this._ws&&this._ws.readyState===this._ws.CONNECTING}},{key:"_onOpen",value:function(){o.debug("WebSocket ".concat(this._url," connected")),this.onconnect()}},{key:"_onClose",value:function(e){var t=e.wasClean,n=e.code,r=e.reason;o.debug("WebSocket ".concat(this._url," closed")),!1===t&&o.debug("WebSocket abrupt disconnection"),this.ondisconnect(!t,n,r)}},{key:"_onMessage",value:function(e){var t=e.data;o.debug("received WebSocket message"),this.ondata(t)}},{key:"_onError",value:function(e){o.warn("WebSocket ".concat(this._url," error: "),e)}}])&&r(t.prototype,n),i&&r(t,i),e}()},{"./Grammar":7,"./Logger":9}],32:[function(e,t,n){"use strict";function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,s=function(){};return{s:s,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw o}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s,o,l,a=e("./Logger"),u=e("./Constants"),c=e("./SIPMessage"),h=e("./Utils"),d=new a("sanityCheck"),f=[function(){for(var e=0,t=["from","to","call_id","cseq","via"];e<t.length;e++){var n=t[e];if(!s.hasHeader(n))return d.debug("missing mandatory header field : ".concat(n,", dropping the response")),!1}}],_=[function(){if("sip"!==s.s("to").uri.scheme)return m(416),!1},function(){if(!s.to_tag&&s.call_id.substr(0,5)===o.configuration.jssip_id)return m(482),!1},function(){var e=h.str_utf8_length(s.body),t=s.getHeader("content-length");if(e<t)return m(400),!1},function(){var e,t=s.from_tag,n=s.call_id,r=s.cseq;if(s.to_tag)return;if(s.method===u.INVITE){if(o._transactions.ist[s.via_branch])return!1;for(var i in o._transactions.ist)if(Object.prototype.hasOwnProperty.call(o._transactions.ist,i)&&(e=o._transactions.ist[i]).request.from_tag===t&&e.request.call_id===n&&e.request.cseq===r)return m(482),!1}else{if(o._transactions.nist[s.via_branch])return!1;for(var l in o._transactions.nist)if(Object.prototype.hasOwnProperty.call(o._transactions.nist,l)&&(e=o._transactions.nist[l]).request.from_tag===t&&e.request.call_id===n&&e.request.cseq===r)return m(482),!1}}],p=[function(){if(s.getHeaders("via").length>1)return d.debug("more than one Via header field present in the response, dropping the response"),!1},function(){var e=h.str_utf8_length(s.body),t=s.getHeader("content-length");if(e<t)return d.debug("message body length is lower than the value in Content-Length header field, dropping the response"),!1}];function m(e){var t,n,i=s.getHeaders("via"),o="SIP/2.0 ".concat(e," ").concat(u.REASON_PHRASE[e],"\r\n"),a=r(i);try{for(a.s();!(n=a.n()).done;){var c=n.value;o+="Via: ".concat(c,"\r\n")}}catch(e){a.e(e)}finally{a.f()}t=s.getHeader("To"),s.to_tag||(t+=";tag=".concat(h.newTag())),o+="To: ".concat(t,"\r\n"),o+="From: ".concat(s.getHeader("From"),"\r\n"),o+="Call-ID: ".concat(s.call_id,"\r\n"),o+="CSeq: ".concat(s.cseq," ").concat(s.method,"\r\n"),o+="\r\n",l.send(o)}t.exports=function(e,t,n){s=e,o=t,l=n;var i,a=r(f);try{for(a.s();!(i=a.n()).done;){if(!1===(0,i.value)())return!1}}catch(e){a.e(e)}finally{a.f()}if(s instanceof c.IncomingRequest){var u,h=r(_);try{for(h.s();!(u=h.n()).done;){if(!1===(0,u.value)())return!1}}catch(e){h.e(e)}finally{h.f()}}else if(s instanceof c.IncomingResponse){var d,m=r(p);try{for(m.s();!(d=m.n()).done;){if(!1===(0,d.value)())return!1}}catch(e){m.e(e)}finally{m.f()}}return!0}},{"./Constants":2,"./Logger":9,"./SIPMessage":22,"./Utils":30}],33:[function(e,t,n){var r=Object.create||function(e){var t=function(){};return t.prototype=e,new t},i=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return n},s=Function.prototype.bind||function(e){var t=this;return function(){return t.apply(e,arguments)}};function o(){this._events&&Object.prototype.hasOwnProperty.call(this,"_events")||(this._events=r(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0}t.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._maxListeners=void 0;var l,a=10;try{var u={};Object.defineProperty&&Object.defineProperty(u,"x",{value:0}),l=0===u.x}catch(e){l=!1}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,n,i){var s,o,l;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),l=o[t]):(o=e._events=r(null),e._eventsCount=0),l){if("function"==typeof l?l=o[t]=i?[n,l]:[l,n]:i?l.unshift(n):l.push(n),!l.warned&&(s=c(e))&&s>0&&l.length>s){l.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+l.length+' "'+String(t)+'" listeners added. Use emitter.setMaxListeners() to increase limit.');a.name="MaxListenersExceededWarning",a.emitter=e,a.type=t,a.count=l.length,"object"==typeof console&&console.warn&&console.warn("%s: %s",a.name,a.message)}}else l=o[t]=n,++e._eventsCount;return e}function d(){if(!this.fired)switch(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length){case 0:return this.listener.call(this.target);case 1:return this.listener.call(this.target,arguments[0]);case 2:return this.listener.call(this.target,arguments[0],arguments[1]);case 3:return this.listener.call(this.target,arguments[0],arguments[1],arguments[2]);default:for(var e=new Array(arguments.length),t=0;t<e.length;++t)e[t]=arguments[t];this.listener.apply(this.target,e)}}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=s.call(d,r);return i.listener=n,r.wrapFn=i,i}function _(e,t,n){var r=e._events;if(!r)return[];var i=r[t];return i?"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):m(i,i.length):[]}function p(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function m(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}l?Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||e!=e)throw new TypeError('"defaultMaxListeners" must be a positive number');a=e}}):o.defaultMaxListeners=a,o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){var t,n,r,i,s,o,l="error"===e;if(o=this._events)l=l&&null==o.error;else if(!l)return!1;if(l){if(arguments.length>1&&(t=arguments[1]),t instanceof Error)throw t;var a=new Error('Unhandled "error" event. ('+t+")");throw a.context=t,a}if(!(n=o[e]))return!1;var u="function"==typeof n;switch(r=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,i=m(e,r),s=0;s<r;++s)i[s].call(n)}(n,u,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var i=e.length,s=m(e,i),o=0;o<i;++o)s[o].call(n,r)}(n,u,this,arguments[1]);break;case 3:!function(e,t,n,r,i){if(t)e.call(n,r,i);else for(var s=e.length,o=m(e,s),l=0;l<s;++l)o[l].call(n,r,i)}(n,u,this,arguments[1],arguments[2]);break;case 4:!function(e,t,n,r,i,s){if(t)e.call(n,r,i,s);else for(var o=e.length,l=m(e,o),a=0;a<o;++a)l[a].call(n,r,i,s)}(n,u,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(r-1),s=1;s<r;s++)i[s-1]=arguments[s];!function(e,t,n,r){if(t)e.apply(n,r);else for(var i=e.length,s=m(e,i),o=0;o<i;++o)s[o].apply(n,r)}(n,u,this,i)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,i,s,o,l;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(i=this._events))return this;if(!(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=r(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(s=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){l=n[o].listener,s=o;break}if(s<0)return this;0===s?n.shift():function(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}(n,s),1===n.length&&(i[e]=n[0]),i.removeListener&&this.emit("removeListener",e,l||t)}return this},o.prototype.removeAllListeners=function(e){var t,n,s;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=r(null),this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=r(null):delete n[e]),this;if(0===arguments.length){var o,l=i(n);for(s=0;s<l.length;++s)"removeListener"!==(o=l[s])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=r(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return _(this,e,!0)},o.prototype.rawListeners=function(e){return _(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]}},{}],34:[function(e,t,n){(function(r){(function(){n.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))}),e.splice(i,0,n)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},n.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),t.exports=e("./common")(n);const{formatters:i}=t.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this)}).call(this,e("_process"))},{"./common":35,_process:37}],35:[function(e,t,n){t.exports=function(t){function n(e){let t,i=null;function s(...e){if(!s.enabled)return;const r=s,i=Number(new Date),o=i-(t||i);r.diff=o,r.prev=t,r.curr=i,t=i,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let l=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(t,i)=>{if("%%"===t)return"%";l++;const s=n.formatters[i];if("function"==typeof s){const n=e[l];t=s.call(r,n),e.splice(l,1),l--}return t}),n.formatArgs.call(r,e),(r.log||n.log).apply(r,e)}return s.namespace=e,s.useColors=n.useColors(),s.color=n.selectColor(e),s.extend=r,s.destroy=n.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null===i?n.enabled(e):i,set:e=>{i=e}}),"function"==typeof n.init&&n.init(s),s}function r(e,t){const r=n(this.namespace+(void 0===t?":":t)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map(e=>"-"+e)].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.names=[],n.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(t=0;t<i;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=e("ms"),n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach(e=>{n[e]=t[e]}),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return n.colors[Math.abs(t)%n.colors.length]},n.enable(n.load()),n}},{ms:36}],36:[function(e,t,n){var r=1e3,i=60*r,s=60*i,o=24*s,l=7*o,a=365.25*o;function u(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}t.exports=function(e,t){t=t||{};var n=typeof e;if("string"===n&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*a;case"weeks":case"week":case"w":return n*l;case"days":case"day":case"d":return n*o;case"hours":case"hour":case"hrs":case"hr":case"h":return n*s;case"minutes":case"minute":case"mins":case"min":case"m":return n*i;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(e);if("number"===n&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=o)return u(e,t,o,"day");if(t>=s)return u(e,t,s,"hour");if(t>=i)return u(e,t,i,"minute");if(t>=r)return u(e,t,r,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=o)return Math.round(e/o)+"d";if(t>=s)return Math.round(e/s)+"h";if(t>=i)return Math.round(e/i)+"m";if(t>=r)return Math.round(e/r)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],37:[function(e,t,n){var r,i,s=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{i="function"==typeof clearTimeout?clearTimeout:l}catch(e){i=l}}();var u,c=[],h=!1,d=-1;function f(){h&&u&&(h=!1,u.length?c=u.concat(c):d=-1,c.length&&_())}function _(){if(!h){var e=a(f);h=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===l||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||h||a(_)},p.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},{}],38:[function(e,t,n){var r=t.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+(e["encrypt-uri"]?" %s":"%v")+" %s"+(e.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),t+=null!=e["network-id"]?" network-id %d":"%v",t+=null!=e["network-cost"]?" network-cost %d":"%v"}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(e){return"ts-refclk:%s"+(null!=e.clksrcExt?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(e){var t="mediaclk:";return t+=null!=e.id?"id=%s %s":"%v%s",t+=null!=e.mediaClockValue?"=%s":"",t+=null!=e.rateNumerator?" rate=%s":"",t+=null!=e.rateDenominator?"/%s":""}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};Object.keys(r).forEach(function(e){r[e].forEach(function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")})})},{}],39:[function(e,t,n){var r=e("./parser"),i=e("./writer");n.write=i,n.parse=r.parse,n.parseParams=r.parseParams,n.parseFmtpConfig=r.parseFmtpConfig,n.parsePayloads=r.parsePayloads,n.parseRemoteCandidates=r.parseRemoteCandidates,n.parseImageAttributes=r.parseImageAttributes,n.parseSimulcastStreamList=r.parseSimulcastStreamList},{"./parser":40,"./writer":41}],40:[function(e,t,n){var r=function(e){return String(Number(e))===e?Number(e):e},i=function(e,t,n){var i=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:i&&!t[e.name]&&(t[e.name]={});var s=e.push?{}:i?t[e.name]:t;!function(e,t,n,i){if(i&&!n)t[i]=r(e[1]);else for(var s=0;s<n.length;s+=1)null!=e[s+1]&&(t[n[s]]=r(e[s+1]))}(n.match(e.reg),s,e.names,e.name),e.push&&t[e.push].push(s)},s=e("./grammar"),o=RegExp.prototype.test.bind(/^([a-z])=(.*)/);n.parse=function(e){var t={},n=[],r=t;return e.split(/(\r\n|\r|\n)/).filter(o).forEach(function(e){var t=e[0],o=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),r=n[n.length-1]);for(var l=0;l<(s[t]||[]).length;l+=1){var a=s[t][l];if(a.reg.test(o))return i(a,r,o)}}),t.media=n,t};var l=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length?e[n[0]]=r(n[1]):1===n.length&&t.length>1&&(e[n[0]]=void 0),e};n.parseParams=function(e){return e.split(/;\s?/).reduce(l,{})},n.parseFmtpConfig=n.parseParams,n.parsePayloads=function(e){return e.toString().split(" ").map(Number)},n.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(r),i=0;i<n.length;i+=3)t.push({component:n[i],ip:n[i+1],port:n[i+2]});return t},n.parseImageAttributes=function(e){return e.split(" ").map(function(e){return e.substring(1,e.length-1).split(",").reduce(l,{})})},n.parseSimulcastStreamList=function(e){return e.split(";").map(function(e){return e.split(",").map(function(e){var t,n=!1;return"~"!==e[0]?t=r(e):(t=r(e.substring(1,e.length)),n=!0),{scid:t,paused:n}})})}},{"./grammar":38}],41:[function(e,t,n){var r=e("./grammar"),i=/%[sdv%]/g,s=function(e,t,n){var r=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var s=0;s<t.names.length;s+=1){var o=t.names[s];t.name?r.push(n[t.name][o]):r.push(n[t.names[s]])}else r.push(n[t.name]);return function(e){var t=1,n=arguments,r=n.length;return e.replace(i,function(e){if(t>=r)return e;var i=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(i);case"%d":return Number(i);case"%v":return""}})}.apply(null,r)},o=["v","o","s","i","u","e","p","c","b","t","r","z","a"],l=["i","c","b","a"];t.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach(function(e){null==e.payloads&&(e.payloads="")});var n=t.outerOrder||o,i=t.innerOrder||l,a=[];return n.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?a.push(s(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){a.push(s(t,n,e))})})}),e.media.forEach(function(e){a.push(s("m",r.m[0],e)),i.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?a.push(s(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){a.push(s(t,n,e))})})})}),a.join("\r\n")+"\r\n"}},{"./grammar":38}],42:[function(e,t,n){t.exports={name:"jssip",title:"JsSIP",description:"the Javascript SIP library",version:"3.9.0",homepage:"https://jssip.net",contributors:["José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)","Iñaki Baz Castillo <ibc@aliax.net> (https://inakibaz.me)"],types:"lib/JsSIP.d.ts",main:"lib-es5/JsSIP.js",keywords:["sip","websocket","webrtc","node","browser","library"],license:"MIT",repository:{type:"git",url:"https://github.com/versatica/JsSIP.git"},bugs:{url:"https://github.com/versatica/JsSIP/issues"},dependencies:{"@types/debug":"^4.1.5","@types/node":"^14.14.34",debug:"^4.3.1",events:"^3.3.0","sdp-transform":"^2.14.1"},devDependencies:{"@babel/core":"^7.13.10","@babel/preset-env":"^7.13.10","ansi-colors":"^3.2.4",browserify:"^16.5.1",eslint:"^5.16.0","fancy-log":"^1.3.3",gulp:"^4.0.2","gulp-babel":"^8.0.0","gulp-eslint":"^5.0.0","gulp-expect-file":"^1.0.2","gulp-header":"^2.0.9","gulp-nodeunit-runner":"^0.2.2","gulp-plumber":"^1.2.1","gulp-rename":"^1.4.0","gulp-uglify-es":"^1.0.4",pegjs:"^0.7.0","vinyl-buffer":"^1.0.1","vinyl-source-stream":"^2.0.0"},scripts:{lint:"gulp lint",test:"gulp test",prepublishOnly:"gulp babel"}}},{}]},{},[8])(8)});

"use strict";
/*
 * AudioCodes WebRTC API v1.19.0
 * © 2022 AudioCodes Ltd. All rights reserved.
 *
 */class AudioCodesUA{constructor(){return this._isInitialized=!1,this.serverConfig={},this.account={user:null,userAuth:null,displayName:null,password:null,registerExpires:600,useSessionTimer:!1},this.constraints={audio:!0,video:!0},this.chromiumBased=[{n:"Edge",s:"edg/"},{n:"Opera",s:"opr/"},{n:"Samsung",s:"samsungbrowser/"},{n:"Yandex",s:"yabrowser/"}],this.modes={video_call_audio_answer_firefox_fix:!0,video_call_audio_answer_safari_fix:!0,ice_timeout_fix:2e3,chrome_rtp_timeout_fix:13,sbc_ha_pairs_mode:void 0,ringing_header_mode:void 0,sbc_switch_register5xx_mode:!0,cache_register_auth_mode:!0,check_remote_sdp_mode:!0},this.credentials=[],this.listeners={},this.registerExtraHeaders=null,this.jssipUA=null,this.browser="",this.browserVersion=0,this.browserName="",this.os="other",this.reconnectMin=2,this.reconnectMax=30,this.u17=void 0,this.activeCalls=0,this.wsSocket=null,this.wsOnMessage=null,this.wsPingMs=0,this.wsOrigPingMs=0,this.wsThrottlingPingMs=0,this.wsVisibility=!1,this.wsCall=!1,this.wsLog=0,this.wsPongTimeout=!0,this.wsIsThrottling=!1,this.wsPingJob=null,this.wsPingTime=null,this.wsNextPingTime=null,this.wsPongReceived=!1,this.wsPongSupported=null,this.wsPongTimeoutTime=null,this.wsPongDelays=null,this.wsPongDelaysIx=0,this.wsPongReport=0,this.wsPongReportCounter=0,this.wsPongDist=!1,this.dtmfUseWebRTC=!0,this.dtmfDuration=250,this.dtmfInterToneGap=250,this.enableAddVideo=!1,this.oauthToken=null,this.oauthTokenUseInInvite=!0,this.networkPriority=void 0,AudioCodesUA.ac_log=console.log,AudioCodesUA.js_log=null,void 0===AudioCodesUA.instance&&(AudioCodesUA.instance=this),this._detectBrowser(),this._detectOS(),this.webrtcapi=AudioCodesWebRTCWrapper,this.replacedCall=null,this.codecFilter=null,this.AUDIO=Symbol("audio"),this.VIDEO=Symbol("video"),this.RECVONLY_VIDEO=Symbol("recvonly_video"),AudioCodesUA.instance}version(){return"1.19.0 dev"}getBrowserName(){return this.browserName}getBrowser(){return this.browser}getBrowserVersion(){return this.browserVersion}getOS(){return this.os}getWR(){return this.webrtcapi}checkAvailableDevices(){return this.getWR().checkAvailableDevices()}getServerAddress(){if(null===this.wsSocket)return null;let e=this.wsSocket.url;return e.endsWith("/")&&(e=e.slice(0,-1)),e}setOAuthToken(e,i=!0){this.oauthToken=e,this.oauthTokenUseInInvite=i,this.setRegisterExtraHeaders(this.registerExtraHeaders)}setUserAgent(e){this.u17=e}setConstraints(e,i,s){let t=this.browser,o=this.browser+"|"+this.os;if(null===e||e===t||e===o){if(AudioCodesUA.ac_log(`AC: setConstraints ${e} ${i}  ${JSON.stringify(s)}`),"audio"!==i&&"video"!==i)throw new TypeError(`Wrong type: ${i}`);this.constraints[i]=s}else AudioCodesUA.ac_log(`AC: setConstraints ${e} - ignored, no current browser`)}setConstraint(e,i,s){if(null!==s&&void 0!==s?AudioCodesUA.ac_log(`AC: setConstraint ${e} ${i}=${JSON.stringify(s)}`):AudioCodesUA.ac_log(`AC: setConstraint remove ${e} ${i}`),"audio"!==e&&"video"!==e)throw new TypeError(`Wrong type: ${e}`);null!==s&&void 0!==s?(!0===this.constraints[e]&&(this.constraints[e]={}),this.constraints[e][i]=s):!0!==this.constraints[e]&&!1!==this.constraints[e]&&(delete this.constraints[e][i],0===Object.keys(this.constraints[e]).length&&(this.constraints[e]=!0))}setBrowsersConstraints(e){let i=this.browser,s=this.browser+"|"+this.os;for(let t in e){if(t!==i&&t!==s)continue;let o=e[t];void 0!==o.audio&&this.setConstraints(t,"audio",o.audio),void 0!==o.video&&this.setConstraints(t,"video",o.video)}}setCodecFilter(e){e&&(AudioCodesUA.ac_log(`AC: setCodecFilter ${JSON.stringify(e)}`),this.codecFilter=this._cf_unpack(e))}setServerConfig(e,i,s=[]){this.serverConfig={addresses:e,domain:i,iceServers:this._convertIceList(s)},AudioCodesUA.ac_log(`AC: setServerConfig() ${JSON.stringify(this.serverConfig)}`)}setReconnectIntervals(e,i){AudioCodesUA.ac_log(`AC: setReconnectIntervals min=${e} max=${i}`),this.reconnectMin=e,this.reconnectMax=i}setAccount(e,i,s,t){void 0!==i&&null!==i&&0!==i.length||(i=void 0),void 0!==t&&null!==t&&0!==t.length||(t=e);let o=this.account;o.user=e,o.displayName=i,o.password=s,o.authUser=t}setRegisterExpires(e){AudioCodesUA.ac_log(`AC: setRegisterExpires=${e}`),this.account.registerExpires=e}setUseSessionTimer(e){AudioCodesUA.ac_log(`AC: setUseSessionTimer=${e}`),this.account.useSessionTimer=e}setDtmfOptions(e,i=null,s=null){AudioCodesUA.ac_log(`AC: setDtmfOptions useWebRTC=${e} duration=${i} interToneGap=${s}`),this.dtmfUseWebRTC=e,null!==i&&(this.dtmfDuration=i),null!==s&&(this.dtmfInterToneGap=s)}setEnableAddVideo(e){AudioCodesUA.ac_log(`AC: setEnableAddVideo=${e}`),this.enableAddVideo=e}getEnableAddVideo(){return this.enableAddVideo}getAccount(){return this.account}setListeners(e){AudioCodesUA.ac_log("AC: setListeners()");for(let i of["loginStateChanged","outgoingCallProgress","callTerminated","callConfirmed","callShowStreams","incomingCall","callHoldStateChanged"])if(!(i in e))throw new Error(`${i} listener is missed`);this.listeners=e}static getSessionStatusName(e){switch(e){case 0:return"NULL (0)";case 1:return"INVITE_SENT (1)";case 2:return"1XX_RECEIVED (2)";case 3:return"INVITE_RECEIVED (3)";case 4:return"WAITING_FOR_ANSWER (4)";case 5:return"ANSWERED (5)";case 6:return"WAITING_FOR_ACK (6)";case 7:return"CANCELED (7)";case 8:return"TERMINATED (8)";case 9:return"CONFIRMED (9)";default:return"Unknown ("+e+")"}}setAcLogger(e){AudioCodesUA.ac_log=e}setJsSipLogger(e){AudioCodesUA.js_log=e}isInitialized(){return this._isInitialized}setModes(e={}){AudioCodesUA.ac_log(`AC: setModes() ${JSON.stringify(e)}`),Object.assign(this.modes,e),this._normalizeModes()}_normalizeModes(){function e(e,i){return"number"==typeof e&&e<=i?void 0:e}let i=this.modes;i.sbc_ha_pairs_mode=e(i.sbc_ha_pairs_mode,0),i.chrome_rtp_timeout_fix=e(i.chrome_rtp_timeout_fix,0)}init(e=!0){if(AudioCodesUA.ac_log(`AC: init() autoLogin=${e}`),this._isInitialized)return;this._isInitialized=!0,JsSIP.debug.enable("JsSIP:*"),JsSIP.debug.formatArgs=function(){AudioCodesUA.js_log&&(this.log=AudioCodesUA.js_log)};let i=[];for(let e of this.serverConfig.addresses)e instanceof Array?i.push({socket:new JsSIP.WebSocketInterface(e[0]),weight:e[1]}):i.push(new JsSIP.WebSocketInterface(e));let s={sockets:i,uri:"sip:"+this.account.user+"@"+this.serverConfig.domain,contact_uri:"sip:"+this.account.user+"@"+this._randomToken(12)+".invalid;transport=ws",authorization_user:this.account.authUser,password:this.account.password,register:e,session_timers:this.account.useSessionTimer,register_expires:this.account.registerExpires,user_agent:this.u17,connection_recovery_min_interval:this.reconnectMin,connection_recovery_max_interval:this.reconnectMax};this.account.displayName&&this.account.displayName.length>0&&(s.display_name=this.account.displayName),this.jssipUA=new JsSIP.UA(s),this.setRegisterExtraHeaders(this.registerExtraHeaders),this._setUACallbacks(),AudioCodesUA.ac_log(`AC: applied SDK modes: ${JSON.stringify(this.modes,(e,i)=>void 0===i?"<undefined>":i)}`),this.jssipUA.modes=this.modes;for(let e of this.credentials)this.jssipUA.addCredential(e);this.credentials=[],this.jssipUA.start()}deinit(){this._isInitialized=!1,this.jssipUA&&this.jssipUA.stop()}setRegisterExtraHeaders(e){if(this.registerExtraHeaders=e,this.jssipUA){let i=null!==e?e:[];null!==this.oauthToken&&(i=i.slice()).push(`Authorization: Bearer ${this.oauthToken}`),this.jssipUA.registrator().setExtraHeaders(i)}}getRegisterExtraHeaders(){return this.registerExtraHeaders}login(){AudioCodesUA.ac_log("AC: login()"),this.jssipUA.register()}logout(){AudioCodesUA.ac_log("AC: logout()"),this.jssipUA.isRegistered()&&this.jssipUA.unregister()}switchSBC(e=!0){return AudioCodesUA.ac_log("AC: switchSBC()"),this.jssipUA.switchSBC(e)}getNumberOfSBC(){return this.jssipUA.getNumberOfSBC()}setWebSocketKeepAlive(e,i=!0,s=!0,t=0,o=!1){if(AudioCodesUA.ac_log(`AC: setWebSocketKeepAlive pingInterval=${e} pongTimeout=${i}`+` timerThrottlingBestEffort=${JSON.stringify(s)} pongReport=${t} pongDist=${o}`),"number"!=typeof e||"boolean"!=typeof i)throw new TypeError("setWebSocketKeepAlive: wrong type of first or second argument");let n;this.wsPingMs=this.wsOrigPingMs=1e3*e,this.wsPongTimeout=i,this.wsPongReport=t,this.wsPongDist=o,this.wsPongReportCounter=0,this.wsIsThrottling=!1;let r=(n=!0===s?{log:0,chrome:{interval:1,visibility:!0,call:!0,log:1}}:!1===s?{log:0}:s)[this.browser];this.wsThrottlingPingMs=r&&void 0!==r.interval?1e3*r.interval:0,this.wsVisibility=!(!r||void 0===r.visibility)&&r.visibility,this.wsCall=!(!r||void 0===r.call)&&r.call,this.wsLog=r&&void 0!==r.log?r.log:n.log,this.wsPongDelays=new Array(this.wsPongReport>0?this.wsPongReport:50),this.wsPongDelaysIx=0,0!==this.wsOrigPingMs&&0!==this.wsThrottlingPingMs&&this.wsVisibility&&document.addEventListener("visibilitychange",this._onVisibilityChange.bind(this))}_pingLog(){return` (ping=${this.wsPingMs/1e3} sec)`}_visibilityLog(e){let i="AC: keep-alive: Page is "+(document.hidden?"hidden":"visible");document.hidden&&(this.wsCall&&(i+=", "+(0===this.activeCalls?"no active call":"active call")),i+=" and "+(this.wsIsThrottling?"was":"was not")+" trottling"),e&&(i+=this._pingLog()),AudioCodesUA.ac_log(i)}_activeCallsLog(e){let i=`AC: keep-alive: ${0===this.activeCalls?"Call ended":"Call started"}`;0===this.activeCalls&&(this.wsVisibility&&(i+=", page is "+(document.hidden?"hidden":"visible")),i+=" and "+(this.wsIsThrottling?"was":"was not")+" trottling"),e&&(i+=this._pingLog()),AudioCodesUA.ac_log(i)}_onActiveCallsChange(e){if(this.activeCalls+=e,this.wsCall&&0!==this.wsPingMs&&0!==this.wsThrottlingPingMs)if(this.activeCalls<0&&AudioCodesUA.ac_log("Warning: keep-alive: activeCalls < 0"),0===this.activeCalls){if((!this.wsVisibility||document.hidden)&&this.wsIsThrottling&&this.wsPingMs<this.wsThrottlingPingMs)return this.wsPingMs=this.wsThrottlingPingMs,void this._activeCallsLog(!0);this.wsLog>=2&&this._activeCallsLog(!1)}else if(1===this.activeCalls&&e>0){if(this.wsPingMs>this.wsOrigPingMs)return this.wsPingMs=this.wsOrigPingMs,void this._activeCallsLog(!0);this.wsLog>=2&&this._activeCallsLog(!1)}}_onVisibilityChange(){if(this.wsVisibility&&0!==this.wsPingMs&&0!==this.wsThrottlingPingMs)if(document.hidden){if(this.wsCall&&0===this.activeCalls&&this.wsIsThrottling&&this.wsPingMs<this.wsThrottlingPingMs)return this.wsPingMs=this.wsThrottlingPingMs,void this._visibilityLog(!0);this.wsLog>=2&&this._visibilityLog(!1)}else{if(this.wsPingMs>this.wsOrigPingMs)return this.wsPingMs=this.wsOrigPingMs,void this._visibilityLog(!0);this.wsLog>=2&&this._visibilityLog(!1)}}_onMessageHook(e){"\r\n"===e.data?this._onPong():this.wsOnMessage(e)}_onPong(){let e;this.wsPongReceived=!0,null===this.wsPongSupported&&(AudioCodesUA.ac_log("AC: keep-alive: Server supports CRLF pong"),this.wsPongSupported=!0),null!==this.wsPongTimeoutTime?(e=Date.now()-this.wsPongTimeoutTime,this.wsPongTimeoutTime=null,AudioCodesUA.ac_log(`AC: keep-alive: Received pong that exceeded the timeout, delay=${e}`)):e=Date.now()-this.wsPingTime;let i=this.wsPingMs-e;i<0&&(AudioCodesUA.ac_log(`AC: nextPing calculated to ${i}ms, so resetting to 0ms.`),i=0),null!==this.wsPingJob&&clearTimeout(this.wsPingJob),this.wsPingJob=setTimeout(this._sendPing.bind(this),i),this.wsPongDelays[this.wsPongDelaysIx]=e,this.wsPongDelaysIx=this.wsPongDelaysIx+1,this.wsPongDelaysIx===this.wsPongDelays.length&&(this.wsPongDelaysIx=0),this.wsPongReport>0&&this.wsPongReportCounter++}_onPongTimeout(e){if(AudioCodesUA.ac_log(`AC: keep-alive: Pong timeout (not received within ${e/1e3} seconds)`),AudioCodesUA.ac_log(`AC: keep-alive: Previous pongs statistics: ${this._createPongReport(!0)}`),this.wsPongTimeout){AudioCodesUA.ac_log("AC: keep-alive: Close websocket connection"),this._stopWsKeepAlive();try{this.wsSocket.close()}catch(e){AudioCodesUA.ac_log("AC: Close websocket error",e)}}else AudioCodesUA.ac_log("AC: keep-alive: Warning: websocket is not closed, because pongTimeout=false")}_sendPing(){try{let e=Date.now();if(null!==this.wsPingTime){let i=e-this.wsNextPingTime;this.wsLog>=3&&AudioCodesUA.ac_log(`AC: keep-alive: timer deviation (ms): ${i}`);let s=this.wsPingMs;if(Math.abs(i)>=1e4&&((this.wsLog>0||!this.wsIsThrottling)&&(AudioCodesUA.ac_log(`AC: keep-alive detected timer throttling: ${Math.round(i/1e3)} seconds ${i>0?"later":"earlier"}`),0===this.wsLog&&AudioCodesUA.ac_log("AC: keep-alive: The next timer throttling will not be shown in the logs, because log==0")),this.wsIsThrottling=!0,this.wsPingMs<this.wsThrottlingPingMs&&(this.wsPingMs=this.wsThrottlingPingMs,AudioCodesUA.ac_log(`AC: keep-alive: ping interval increased ${this._pingLog()}`))),null!==this.wsPongSupported||this.wsPongReceived||(AudioCodesUA.ac_log("AC: keep-alive: Server does not support CRLF pong."),this.wsPongSupported=!1),this.wsPongSupported&&!this.wsPongReceived&&null===this.wsPongTimeoutTime){if(this._onPongTimeout(s),this.wsPongTimeout)return;this.wsPongTimeoutTime=this.wsPingTime}}this.wsPingTime=e,this.wsNextPingTime=this.wsPingTime+this.wsPingMs,this.wsPongReceived=!1,this.wsSocket.readyState===WebSocket.OPEN?this.wsSocket.send("\r\n\r\n"):AudioCodesUA.ac_log(`AC: keep-alive: Warning: Cannot send Ping, websocket state=${this.wsSocket.readyState}`),this.wsPingJob=setTimeout(this._sendPing.bind(this),this.wsPingMs),this.wsPongReport>0&&this.wsPongReportCounter>=this.wsPongReport&&(this.wsPongReportCounter=0,AudioCodesUA.ac_log(`AC: keep-alive: Pong statistics: ${this._createPongReport(this.wsPongDist)}`))}catch(e){AudioCodesUA.ac_log("AC: keep-alive: send ping error",e)}}_startWsKeepAlive(e){this.wsSocket=e,0!==this.wsPingMs&&(this.wsOnMessage=e.onmessage,e.onmessage=this._onMessageHook.bind(this),this._stopWsKeepAlive(),this.wsPingTime=null,this.wsPingJob=setTimeout(this._sendPing.bind(this),this.wsPingMs))}_stopWsKeepAlive(){null!==this.wsPingJob&&(clearTimeout(this.wsPingJob),this.wsPingJob=null)}_createPongReport(e){let i,s="",t=!1,o=1e6,n=0;e&&(i=new Array(this.wsPingMs/1e3*4).fill(0));let r=0;for(let s=0;s<this.wsPongDelays.length;s++){let a=this.wsPongDelays[s];if(void 0!==a&&(r++,a<o&&(o=a),a>n&&(n=a),e)){let e=Math.floor(a/250);e>=i.length&&(e=i.length-1,t=!0),i[e]++}}if(e){s="\r\npongs distribution (1/4 second step): ";for(let e=0;e<i.length;e++)s+=i[e].toString(),e!==i.length-1&&(s+=(e+1)%4==0?",":" ");t&&(s+=" (+)")}return`pongs=${r} delay=${o}..${n} ms${s}`}_setUACallbacks(){this.jssipUA.on("connected",e=>{AudioCodesUA.ac_log('AC>>: loginStateChanged: isLogin=false "connected"'),this._startWsKeepAlive(e.socket.socket._ws),this.listeners.loginStateChanged(!1,"connected",null)}),this.jssipUA.on("disconnected",()=>{this._stopWsKeepAlive(),AudioCodesUA.ac_log('AC>>: loginStateChanged: isLogin=false "disconnected"'),this.listeners.loginStateChanged(!1,"disconnected",null)}),this.jssipUA.on("registered",e=>{AudioCodesUA.ac_log('AC>>: loginStateChanged: isLogin=true "login"'),this.listeners.loginStateChanged(!0,"login",e.response)}),this.jssipUA.on("unregistered",e=>{AudioCodesUA.ac_log('AC>>: loginStateChanged: isLogin=false "logout"'),this.listeners.loginStateChanged(!1,"logout",e.response)}),this.jssipUA.on("registrationFailed",e=>{let i=e.response?e.response.status_code:0;if(i>=300&&i<400){let i=e.response.parseHeader("contact");if(i){let e=i.uri,s="wss://"+e.host;if(e.port&&443!==e.port&&(s+=":"+e.port.toString()),AudioCodesUA.ac_log(`AC: registerRedirect("${s}")`),this.jssipUA.registerRedirect(s))return}else AudioCodesUA.ac_log('AC: 3xx response without "Contact" is ignored')}else if(i>=500&&i<600&&AudioCodesUA.instance.modes.sbc_switch_register5xx_mode&&AudioCodesUA.instance.switchSBC(!1))return;AudioCodesUA.ac_log('AC>>: loginStateChanged: isLogin=false "login failed"'),this.listeners.loginStateChanged(!1,"login failed",e.response?e.response:null)}),this.listeners.incomingMessage&&this.jssipUA.on("newMessage",e=>{"remote"===e.originator&&(AudioCodesUA.ac_log("AC>>: incomingMessage",e),this.listeners.incomingMessage(null,AudioCodesUA.instance._get_from(e.request),AudioCodesUA.instance._get_content_type(e.request),e.request.body,e.request))}),this.listeners.incomingNotify&&this.jssipUA.on("sipEvent",e=>{AudioCodesUA.ac_log("AC>>: incoming out of dialog NOTIFY",e),this.listeners.incomingNotify(null,e.event?e.event.event:null,AudioCodesUA.instance._get_from(e.request),AudioCodesUA.instance._get_content_type(e.request),e.request.body,e.request)||e.request.reply(481)}),this.listeners.incomingSubscribe&&this.jssipUA.on("newSubscribe",e=>{let i=e.request,s=i.parseHeader("event"),t=i.getHeaders("accept");AudioCodesUA.ac_log("AC>>: incomingSubscribe",i,s.event,t);let o=this.listeners.incomingSubscribe(i,s.event,t);o>0&&i.reply(o)}),this.jssipUA.on("newRTCSession",function(e){AudioCodesUA.ac_log(`AC: event ${"remote"===e.originator?"incoming":"outgoing"} "newRTCSession"`,e);let i,s=new AudioCodesSession(e.session);if(s.js_session.on("sipEvent",function(e){if(!AudioCodesUA.instance.listeners.incomingNotify)return;let i=this.data.ac_session;AudioCodesUA.ac_log("AC>>: incoming NOTIFY",i,e),e.taken=AudioCodesUA.instance.listeners.incomingNotify(i,e.event?e.event.event:null,AudioCodesUA.instance._get_from(e.request),AudioCodesUA.instance._get_content_type(e.request),e.request.body,e.request)}),s.js_session.on("newInfo",function(e){if(!AudioCodesUA.instance.listeners.incomingInfo)return;if("local"===e.originator)return;let i=this.data.ac_session;AudioCodesUA.ac_log("AC>>: incoming INFO",i,e),AudioCodesUA.instance.listeners.incomingInfo(i,AudioCodesUA.instance._get_from(e.request),AudioCodesUA.instance._get_content_type(e.request),e.request.body,e.request)}),s.js_session.on("replaces",function(e){AudioCodesUA.instance.replacedCall=this.data.ac_session,AudioCodesUA.ac_log("AC>>: incoming INVITE with Replaces. This call will be replaced:",this.data.ac_session),e.accept()}),s.js_session.on("sdp",function(e){AudioCodesUA.instance._sdp_checking(this,e)}),s.js_session.on("connecting",function(e){AudioCodesUA.ac_log("AC>>: connecting");let i=AudioCodesUA.instance.codecFilter;i&&(AudioCodesUA.instance._cf_filter("audio",this.data.ac_session,i.audio),AudioCodesUA.instance._cf_filter("video",this.data.ac_session,i.video))}),s.js_session.on("reinvite",function(e){if(!AudioCodesUA.instance.listeners.callIncomingReinvite)return;let i=this.data.ac_session;AudioCodesUA.ac_log("AC>>: callIncomingReinvite start"),AudioCodesUA.instance.listeners.callIncomingReinvite(i,!0,e.request),e.callback=function(){AudioCodesUA.ac_log("AC>>: callIncomingIncomingReinvite end"),AudioCodesUA.instance.listeners.callIncomingReinvite(i,!1,null)}}),s.js_session.on("hold",function(e){let i=this.data.ac_session,s="remote"===e.originator;AudioCodesUA.ac_log(`AC>>: callHoldStateChanged isHold=true isRemote=${s} session:`,i),AudioCodesUA.instance.listeners.callHoldStateChanged(i,!0,s)}),s.js_session.on("unhold",function(e){let i=this.data.ac_session,s="remote"===e.originator;AudioCodesUA.ac_log(`AC>>: callHoldStateChanged isHold=false isRemote=${s} session:`,i),AudioCodesUA.instance.listeners.callHoldStateChanged(i,!1,s)}),s.js_session.on("progress",function(e){if("remote"===e.originator){let i=this.data.ac_session;AudioCodesUA.ac_log("AC>>: outgoingCallProgress",i),AudioCodesUA.instance.listeners.outgoingCallProgress(i,e.response)}}),s.js_session.on("failed",function(e){let i=this.data.ac_session,s=null;if("Redirected"===e.cause&&e.message&&e.message.headers){let i=e.message.parseHeader("Contact");i&&(s=i.uri.toString())}AudioCodesUA.ac_log("AC>>: callTerminated (failed)",i,e.cause,s),AudioCodesUA.instance.listeners.callTerminated(i,e.message,e.cause,s)}),s.js_session.on("accepted",function(e){let i=this.data.ac_session;i.data._accepted=!0,"remote"===e.originator&&(i.data._ok_response=e.response)}),"remote"===e.originator&&null!==AudioCodesUA.instance.replacedCall&&s.js_session.removeAllListeners("confirmed"),s.js_session.on("confirmed",function(){let e,i=this.data.ac_session,t=null;"_ok_response"in i.data?(t=i.data._ok_response,delete i.data._ok_response,e="ACK sent"):e="ACK received",s.data._video_call_audio_answer_firefox&&(s.data._video_call_audio_answer_firefox=!1,AudioCodesUA.ac_log("AC: [video call/audio answer] Firefox workaround. Send re-INVITE"),s.sendReInvite({showStreams:!0})),AudioCodesUA.ac_log("AC>>: callConfirmed",i,e),AudioCodesUA.instance._onActiveCallsChange.call(AudioCodesUA.instance,1),AudioCodesUA.instance.listeners.callConfirmed(i,t,e)}),s.js_session.on("ended",function(e){let i=this.data.ac_session;i.data._screenSharing&&i._onEndedScreenSharing.call(i,"call terminated"),AudioCodesUA.ac_log("AC>>: callTerminated (ended)",i,e.cause),AudioCodesUA.instance._onActiveCallsChange.call(AudioCodesUA.instance,-1),AudioCodesUA.instance.listeners.callTerminated(i,e.message,e.cause)}),s.js_session.on("refer",function(e){if(AudioCodesUA.instance.listeners.transfereeCreatedCall){let i,s=this.data.ac_session;if(i=!AudioCodesUA.instance.listeners.transfereeRefer||AudioCodesUA.instance.listeners.transfereeRefer(s,e.request)){let i;AudioCodesUA.ac_log("AC>>: incoming REFER accepted"),i=s.isScreenSharing()?s.doesScreenSharingReplaceCamera():s.hasSendVideo();let t=AudioCodesUA.instance._callOptions(i,!0);e.accept(e=>{e.data._created_by_refer=s},t)}else AudioCodesUA.ac_log("AC>>: incoming REFER rejected"),e.reject()}else AudioCodesUA.ac_log("AC>>: incoming REFER rejected, because transfereeCreatedCall is not set"),e.reject()}),s._setEnabledReceiveVideo(AudioCodesUA.instance.enableAddVideo),s.js_session.connection?(AudioCodesUA.instance._set_connection_listener(s),AudioCodesUA.ac_log('AC: connection exists, set "track" listener')):(AudioCodesUA.ac_log("AC: peer connection does not exist, wait creation"),s.js_session.on("peerconnection",()=>{AudioCodesUA.instance._set_connection_listener(s),AudioCodesUA.ac_log('AC: [event connection] connection created, set "track" listener')})),i="remote"===e.originator?e.request.from:e.request.to,s.data._user=i.uri.user,s.data._host=i.uri.host,s.data._display_name=i.display_name,s.data._create_time=new Date,"remote"===e.originator){let i,t,o,n=null;if(null!==AudioCodesUA.instance.replacedCall&&(n=AudioCodesUA.instance.replacedCall,AudioCodesUA.instance.replacedCall=null),e.request.body){o=!0;let s=new AudioCodesSDP(e.request.body);[i,t]=s.getMediaDirection("video",!0)}else o=!1,s.data._incoming_invite_without_sdp=!0,i=t=!0,AudioCodesUA.ac_log("AC: warning incoming INVITE without SDP");s._setVideoState(i,t),AudioCodesUA.ac_log(`AC>>: incomingCall ${s.hasVideo()?"video":"audio"} from "${s.data._display_name}" ${s.data._user}`,s,n),AudioCodesUA.instance.listeners.incomingCall(s,e.request,n,o)}else s.js_session.data._created_by_refer?(AudioCodesUA.ac_log("AC>>: outgoing call created by REFER"),s.data._created_by_refer=s.js_session.data._created_by_refer,AudioCodesUA.instance.listeners.transfereeCreatedCall(s)):AudioCodesUA.ac_log("AC>>: outgoing call created by phone.call()")})}_get_from(e){return{user:e.from.uri.user,host:e.from.uri.host,displayName:e.from.display_name?e.from.display_name:null}}_get_content_type(e){let i=e.headers["Content-Type"];return i&&i.length>0?i[0].parsed:null}_set_connection_listener(e){AudioCodesUA.instance.getWR().connection.addEventListener(e.js_session.connection,"track",i=>{if(AudioCodesUA.ac_log(`AC>>: "track" event kind= ${i.track.kind}`,i),i.streams.length>0){let s=i.streams[0];AudioCodesUA.ac_log(`AC: set call remote stream id=${s.id}`,e),e.data._remoteMediaStream=s}else AudioCodesUA.ac_log('AC: Warning "track" event without stream');if("video"===i.track.kind){if(!e.hasEnabledReceiveVideo()){e.data._video_call_audio_answer_safari&&(i.track.onmute=(()=>{AudioCodesUA.ac_log('AC: [video call/audio answer] Safari fix. Fired video track "mute" event.  Call callShowStream'),i.track.onmute=null;let s=e.getRTCLocalStream(),t=e.getRTCRemoteStream();AudioCodesUA.ac_log("AC>>: callShowStreams",e,s,t),AudioCodesUA.instance.listeners.callShowStreams(e,s,t)}),AudioCodesUA.ac_log('AC: [video call/audio answer] Safari fix. Set video track "mute" event listener'),e.data._video_call_audio_answer_safari=!1),AudioCodesUA.ac_log('AC>>: event "track" video and !hasEnabledReceiveVideo therefore change transceiver direction.',e);let s=AudioCodesUA.instance.getWR().connection.getTransceiver(e.js_session.connection,"video");if(null!==s){let i=e.hasEnabledSendVideo()?"sendonly":"inactive";AudioCodesUA.instance.getWR().transceiver.setDirection(s,i)}}return void(AudioCodesUA.instance.codecFilter&&AudioCodesUA.instance._cf_filter("video",e,AudioCodesUA.instance.codecFilter.video))}let s=e.getRTCLocalStream(),t=e.getRTCRemoteStream();AudioCodesUA.ac_log("AC>>: callShowStreams",e,s,t),AudioCodesUA.instance.listeners.callShowStreams(e,s,t)})}_check_remote_sdp(e,i){try{i.codec_map||(i.codec_map={});let s=e.getMedia("audio");AudioCodesUA.instance._check_remote_m(s,i.codec_map);let t=e.getMedia("video");t&&AudioCodesUA.instance._check_remote_m(t,i.codec_map)}catch(e){AudioCodesUA.ac_log("AC:SDP exception",e)}}_check_remote_m(e,i){let s={};function t(e,i){let s=i.indexOf(" ",e);return-1===s?["?","?"]:[i.substring(e,s),i.substring(s+1).toLowerCase()]}for(let i of e)if(i.startsWith("a=rtpmap:")){let[e,o]=t(9,i);s[e]||(s[e]={}),s[e].rtpmap=o}else if(i.startsWith("a=fmtp:")){let[e,o]=t(7,i);s[e]||(s[e]={}),s[e].fmtp=o}for(let e of Object.keys(s))if(i[e])s[e].rtpmap===i[e].rtpmap?s[e].fmtp!==i[e].fmtp&&AudioCodesUA.ac_log(`AC:SDP [The same payload type and codec name, different fmtp] pt=${e} rtpmap=${s[e].rtpmap} fmtp=${s[e].fmtp}, previously was fmtp=${i[e].fmtp}`):(parseInt(e)>=64||s[e].rtpmap&&i[e].rtpmap)&&AudioCodesUA.ac_log(`AC:SDP [The same payload type, different codec names] pt=${e} rtpmap=${s[e].rtpmap}, previously was rtpmap=${i[e].rtpmap}`);else{let t,o=s[e];for(let[e,s]of Object.entries(i))if(o.rtpmap===s.rtpmap&&o.fmtp===s.fmtp){t=e;break}if(t){let s=i[t];o.fmtp||s.fmtp?AudioCodesUA.ac_log(`AC:SDP [The same codec name used with different payload types] pt=${e} rtpmap=${o.rtpmap} fmtp=${o.fmtp}, previously was pt=${t} rtpmap=${s.rtpmap} fmtp=${s.fmtp}`):AudioCodesUA.ac_log(`AC:SDP [The same codec name used with different payload types] pt=${e} rtpmap=${o.rtpmap}, previously was pt=${t} rtpmap=${s.rtpmap}`)}else i[e]=o}}_sdp_checking(e,i){let s,t,o,n=i.originator+" "+i.type,r=e.data.ac_session;try{s=new AudioCodesSDP(i.sdp),[t,o]=s.getMediaDirection("video","remote"===i.originator)}catch(i){return void AudioCodesUA.ac_log("AC: cannot parse SDP",i)}let a=r.data._initial;switch("answer"===i.type&&(r.data._initial=!1),AudioCodesUA.ac_log(`AC: Event "sdp" ${a?"initial":""} ${n}   Session state:${AudioCodesUA.getSessionStatusName(e._status)}`),n){case"remote offer":AudioCodesUA.instance.modes.check_remote_sdp_mode&&AudioCodesUA.instance._check_remote_sdp(s,e.data);break;case"remote answer":if(AudioCodesUA.instance.modes.check_remote_sdp_mode&&AudioCodesUA.instance._check_remote_sdp(s,e.data),r.isLocalHold()||r.isRemoteHold())break;r._setVideoState(t,o);break;case"local offer":AudioCodesUA.instance.networkPriority&&AudioCodesUA.instance._set_senders_dscp(e);break;case"local answer":if(r.isLocalHold()||r.isRemoteHold())break;AudioCodesUA.instance.networkPriority&&AudioCodesUA.instance._set_senders_dscp(e),r._setVideoState(t,o)}}_set_senders_dscp(e){if("chrome"!==AudioCodesUA.instance.browser)return;AudioCodesUA.ac_log("AC: _set_senders_dscp()");let i=AudioCodesUA.instance.networkPriority;AudioCodesUA.instance._set_dscp(e,"audio",i),AudioCodesUA.instance._set_dscp(e,"video",i)}_set_dscp(e,i,s){let t=e.connection,o=AudioCodesUA.instance.getWR().connection.getTransceiver(t,i);return o||"video"!==i?Promise.resolve().then(()=>{let e=o.sender.getParameters();if(!e)throw new Error("sender getParameters() returns undefined");let t=e.encodings;if(!t)throw new Error("parameters encodings is undefined");if(0===t.length)throw new Error("parameters encodings is empty array");let n=t[0].networkPriority;if(!n)throw new Error("parameters encodings networkPriority is undefined");return n===s||(t[0].networkPriority=s,o.sender.setParameters(e).then(()=>(AudioCodesUA.ac_log(`AC: DSCP: ${i} "${s}"`),!0)))}).catch(e=>(AudioCodesUA.ac_log(`AC: DSCP: ${i} error: ${e}`),!1)):Promise.resolve(!1)}_cf_unpack(e){function i(e,i){let s,t=i.indexOf("/"),o=i.indexOf("#");s=-1!==t?t:-1!==o?o:void 0;let n={mimeType:(e+"/"+i.substring(0,s)).toLowerCase()};return-1!==t&&(s=-1!==o?o:void 0,n.clockRate=parseInt(i.substring(t+1,s))),-1!==o&&(n.sdpFmtpLine=i.substring(o+1)),n}if(!e)return null;let s={};for(let t in e){s[t]={};for(let o in e[t])s[t][o]=e[t][o].map(e=>i(t,e))}return s}_cf_pack(e){return e.map(e=>(function(e){let i=e.mimeType.substring(6).toLowerCase();return e.clockRate&&(i+="/"+e.clockRate),e.sdpFmtpLine&&(i+="#"+e.sdpFmtpLine),i})(e))}_cf_str(e){return JSON.stringify(AudioCodesUA.instance._cf_pack(e))}_cf_match(e,i){let s=e.mimeType.toLowerCase();for(let t of i)if(t.mimeType===s){if(t.clockRate&&t.clockRate!==e.clockRate)continue;if(t.sdpFmtpLine&&t.sdpFmtpLine!==e.sdpFmtpLine)continue;return!0}return!1}_cf_find(e,i){let s=[];for(let t of i){let i=t.mimeType.toLowerCase();if(e.mimeType===i){if(e.clockRate&&e.clockRate!==t.clockRate)continue;if(e.sdpFmtpLine&&e.sdpFmtpLine!==t.sdpFmtpLine)continue;s.push(t)}}return s}_cf_filter(e,i,s){if(s&&!i.data[`_used_${e}_codec_filter`])try{let t=i.getRTCPeerConnection(),o=AudioCodesUA.instance.getWR().connection.getTransceiver(t,e);if(!o)return void("audio"===e&&AudioCodesUA.ac_log("AC: codec-filter: cannot get audio transceiver"));if(i.data[`_used_${e}_codec_filter`]=!0,!RTCRtpSender.getCapabilities||!RTCRtpReceiver.getCapabilities||!o.setCodecPreferences)return void AudioCodesUA.ac_log("AC: codec-filter is not supported.");let n=RTCRtpSender.getCapabilities(e).codecs,r=RTCRtpReceiver.getCapabilities(e).codecs,a=[];for(let e of r){-1===n.findIndex(i=>e.mimeType===i.mimeType&&e.clockRate===i.clockRate&&e.sdpFmtpLine===i.sdpFmtpLine)&&a.push(e)}let d=n.concat(a);if(AudioCodesUA.ac_log(`AC: ${e} codec-filter original: ${AudioCodesUA.instance._cf_str(d)}\n(receiver: ${a.length})`),s.remove&&s.remove.length>0){let i=d.length;(d=d.filter(e=>!AudioCodesUA.instance._cf_match(e,s.remove))).length<i&&AudioCodesUA.ac_log(`AC: ${e} codec-filter remaining: ${AudioCodesUA.instance._cf_str(d)}`)}if(s.priority&&s.priority.length>0){let i=[];for(let e of s.priority){let s=AudioCodesUA.instance._cf_find(e,d);0!==s.length&&(i=i.concat(s),d=d.filter(e=>!s.includes(e)))}d=i.concat(d),AudioCodesUA.ac_log(`AC: ${e} codec-filter changed priority: ${AudioCodesUA.instance._cf_str(d)}`)}return void o.setCodecPreferences(d)}catch(e){return void AudioCodesUA.ac_log("AC: codec filter exception",e)}}_convertIceList(e){let i=[];for(let s of e)"string"==typeof s&&(s={urls:"stun:"+s}),i.push(s);return i}_randomToken(e){let i="";for(let s=0;s<e;s++)i+=Math.floor(36*Math.random()).toString(36);return i}_detectBrowser(){try{let e=navigator.userAgent;if(this.browser="other",this.browserName=e,this.browserVersion=0,navigator.mozGetUserMedia)this.browser="firefox",this.browserName=e.match(/Firefox\/([.\d]+)$/)[0],this.browserVersion=parseInt(e.match(/Firefox\/(\d+)\./)[1],10);else if(navigator.webkitGetUserMedia){this.browser="chrome",this.browserName=e.match(/Chrom(e|ium)\/([\d]+)/)[0],this.browserVersion=parseInt(e.match(/Chrom(e|ium)\/(\d+)\./)[2],10);let i=e.toLowerCase();for(let e=0;e<this.chromiumBased.length;e++){let s=this.chromiumBased[e].s,t=i.indexOf(s);if(-1!==t){let o=i.substring(t+s.length).match(/([.\d]+)/)[1];this.browserName+=" ("+this.chromiumBased[e].n+"/"+o+")";break}}}else window.safari?(this.browser="safari",this.browserName="Safari/"+e.match(/Version\/([.\d]+)/)[1],this.browserVersion=parseInt(e.match(/Version\/(\d+)\./)[1],10)):-1!==e.indexOf("Edge/")&&(this.browser="other",this.browserName=e.match(/Edge\/([.\d]+)/)[0],this.browserVersion=parseInt(e.match(/Edge\/(\d+).(\d+)$/)[2],10));/iPad|iPhone|iPod/.test(e)&&(this.browserName=e,e.includes("CriOS")?(this.browser="chrome",this.browserVersion=parseInt(e.match(/CriOS\/(\d+)\./)[1],10)):e.includes("FxiOS")?(this.browser="firefox",this.browserVersion=parseInt(e.match(/FxiOS\/(\d+)\./)[1],10)):(this.browser="safari",this.browserVersion=parseInt(e.match(/Version\/(\d+)\./)[1],10)))}catch(e){AudioCodesUA.ac_log("AC: Browser detection error",e),this.browser="other",this.browserName=navigator.userAgent,this.browserVersion=0}}_detectOS(){this._detectOS1(),"other"===this.os&&this._detectOS2()}_detectOS1(){try{let e=!!navigator.userAgentData&&navigator.userAgentData.platform;if(!e)return;"windows"!==(e=e.toLowerCase())&&"linux"!==e&&"android"!==e&&"macos"!==e||(this.os=e)}catch(e){AudioCodesUA.ac_log("AC: detectOS1 error",e),this.os="other"}}_detectOS2(){try{let e=navigator.platform;if(!e)return;(e=e.toLowerCase()).startsWith("win")?this.os="windows":e.startsWith("android")?this.os="android":e.startsWith("linux")?navigator.userAgent.includes("Android")?this.os="android":this.os="linux":e.startsWith("mac")?this.os="macos":/ipad|iphone|ipod/.test(e)&&(this.os="ios")}catch(e){AudioCodesUA.ac_log("AC: detectOS2 error",e),this.os="other"}}_mediaConstraints(e){let i=AudioCodesUA.instance,s={audio:i.constraints.audio};return e&&(s.video=i.constraints.video),s}_callOptions(e,i,s=null,t=null){let o={},n=AudioCodesUA.instance;return"chrome"===n.browser&&n.networkPriority&&(o={rtcConstraints:{optional:[{googDscp:!0}]}}),null!==t&&Object.assign(o,t),o.mediaConstraints=n._mediaConstraints(e),void 0===o.pcConfig&&(o.pcConfig={}),o.pcConfig.iceServers=n.serverConfig.iceServers,null!==s&&(s=s.slice()),null!==n.oauthToken&&n.oauthTokenUseInInvite&&i&&(null===s&&(s=[]),s.push("Authorization: Bearer "+n.oauthToken)),null!==s&&(o.extraHeaders=s),o}call(e,i,s=null,t=null){if(!1===e?e=AudioCodesUA.instance.AUDIO:!0===e&&(e=AudioCodesUA.instance.VIDEO),"symbol"!=typeof e||![AudioCodesUA.instance.AUDIO,AudioCodesUA.instance.VIDEO].includes(e))throw new TypeError(`Illegal videoOption=${e.toString()}`);i=i.replace(/\s+/g,""),AudioCodesUA.ac_log(`AC: call ${e.description} to ${i}`);let o=this._callOptions(e===AudioCodesUA.instance.VIDEO,!0,s,t),n=this.jssipUA.call(i,o);o.mediaStream&&(n._localMediaStreamLocallyGenerated=!0);let r=n.data.ac_session;return r._setEnabledSendVideo(e===AudioCodesUA.instance.VIDEO),e===AudioCodesUA.instance.VIDEO&&r._setEnabledReceiveVideo(!0),r}sendMessage(e,i,s="text/plain"){return AudioCodesUA.ac_log(`AC: sendMessage to: ${e} "${i}"`),new Promise((t,o)=>{let n={contentType:s,eventHandlers:{succeeded:e=>t(e),failed:e=>o(e)}};this.jssipUA.sendMessage(e,i,n)})}isScreenSharingSupported(){return AudioCodesUA.instance.getWR().hasDisplayMedia()}openScreenSharing(){return this.isScreenSharingSupported()?(AudioCodesUA.ac_log("AC: openScreenSharing()"),AudioCodesUA.instance.getWR().getDisplayMedia().then(e=>e).catch(e=>{throw AudioCodesUA.ac_log("AC: openScreenSharing() error",e),e})):(AudioCodesUA.ac_log("AC: openScreenSharing: screen sharing is not supported in the browser"),Promise.reject("Screen sharing is not supported"))}closeScreenSharing(e){if(AudioCodesUA.ac_log("AC: closeScreenSharing()"),e){let i=e.getVideoTracks();if(0==i.length)return;let s=i[0];"live"===s.readyState&&(s.stop(),s.dispatchEvent(new Event("ended")))}}setNetworkPriority(e){if(AudioCodesUA.ac_log(`AC: setNetworkPriority ${e}`),void 0!==e&&"high"!==e&&"medium"!==e&&"low"!==e&&"very-low"!==e)throw new TypeError(`setNetworkPriority: illegal value: ${e}`);this.networkPriority=e}subscribe(...e){return this.jssipUA.subscribe(...e)}notify(...e){return this.jssipUA.notify(...e)}addCredential(e){if(!e.realm||!e.password||!e.username)throw new TypeError("wrong credential structure");this.credentials.push(e)}}class AudioCodesSession{constructor(e){this.js_session=e,this.data={_user:null,_display_name:null,_create_time:null,_initial:!0,_remoteMediaStream:null,_wasUsedSendVideo:!1,_screenSharing:null,_video:{send:!1,receive:!1,enabledSend:!1,enabledReceive:!1}},e.data.ac_session=this}getRTCPeerConnection(){return this.js_session.connection}getRTCLocalStream(){return this.js_session._localMediaStream}getRTCRemoteStream(){return this.data._remoteMediaStream}isEstablished(){return this.js_session.isEstablished()}isTerminated(){return this.js_session.isEnded()}isOutgoing(){return"outgoing"===this.js_session.direction}isAudioMuted(){return this.js_session.isMuted().audio}isVideoMuted(){return this.js_session.isMuted().video}wasAccepted(){return!0===this.data._accepted}getReplacesHeader(){if(!this.js_session.isEstablished()||!this.js_session._dialog)return AudioCodesUA.ac_log("getReplacesHeader(): call is not established"),null;let e=this.js_session._dialog.id;return`${e.call_id};to-tag=${e.remote_tag};from-tag=${e.local_tag}`}muteAudio(e){AudioCodesUA.ac_log(`AC: muteAudio() arg=${e} `),e?this.js_session.mute({audio:!0,video:!1}):this.js_session.unmute({audio:!0,video:!1})}muteVideo(e){AudioCodesUA.ac_log(`AC: muteVideo() arg=${e} `),e?this.js_session.mute({audio:!1,video:!0}):this.js_session.unmute({audio:!1,video:!0})}sendDTMF(e){let i=AudioCodesUA.instance.dtmfUseWebRTC;if(i&&"safari"===AudioCodesUA.instance.browser){void 0===AudioCodesUA.instance.getWR().connection.getDTMFSender(this.js_session.connection)&&(i=!1)}AudioCodesUA.ac_log(`AC: sendDTMF() tone=${e} ${i?"[RFC2833]":"[INFO]"}`);let s={duration:AudioCodesUA.instance.dtmfDuration,interToneGap:AudioCodesUA.instance.dtmfInterToneGap,transportType:i?"RFC2833":"INFO"};this.js_session.sendDTMF(e,s)}sendInfo(e,i,s=null){AudioCodesUA.ac_log("AC: sendInfo()",e,i,s);let t=null!==s?{extraHeaders:s}:void 0;this.js_session.sendInfo(i,e,t)}duration(){let e=this.js_session.start_time;if(!e)return 0;let i=this.js_session.end_time;return i||(i=new Date),Math.floor((i.getTime()-e.getTime())/1e3)}hasSendVideo(){return this.data._video.send}hasReceiveVideo(){return this.data._video.receive}hasVideo(){return this.hasSendVideo()&&this.hasReceiveVideo()}getVideoState(){return this.hasSendVideo()&&this.hasReceiveVideo()?"sendrecv":this.hasSendVideo()?"sendonly":this.hasReceiveVideo()?"recvonly":"inactive"}_setVideoState(e,i){AudioCodesUA.ac_log(`AC: _setVideoState(send=${e}, receive=${i})`),this.data._video.send=e,this.data._video.receive=i}hasEnabledSendVideo(){return this.data._video.enabledSend}hasEnabledReceiveVideo(){return this.data._video.enabledReceive}getEnabledVideoState(){return this.hasEnabledSendVideo()&&this.hasEnabledReceiveVideo()?"sendrecv":this.hasEnabledSendVideo()?"sendonly":this.hasEnabledReceiveVideo()?"recvonly":"inactive"}_setEnabledSendVideo(e){AudioCodesUA.ac_log(`AC: _setEnabledSendVideo(${e})`),this.data._video.enabledSend=e}_setEnabledReceiveVideo(e){AudioCodesUA.ac_log(`AC: _setEnabledReceiveVideo(${e})`),this.data._video.enabledReceive=e}answer(e,i=null,s=null){if(this.data._answer_called)return void AudioCodesUA.ac_log("AC: answer() is already called. [Ignored]");if(this.data._answer_called=!0,!1===e?e=AudioCodesUA.instance.AUDIO:!0===e&&(e=AudioCodesUA.instance.VIDEO),"symbol"!=typeof e||![AudioCodesUA.instance.AUDIO,AudioCodesUA.instance.RECVONLY_VIDEO,AudioCodesUA.instance.VIDEO].includes(e))throw new TypeError(`Illegal videoOption=${e.toString()}`);if(AudioCodesUA.ac_log(`AC: ${e.description} answer`),this.hasVideo()||e!==AudioCodesUA.instance.RECVONLY_VIDEO&&e!==AudioCodesUA.instance.VIDEO||(AudioCodesUA.ac_log('AC: incoming INVITE without video, so answer can be only "audio"'),e=AudioCodesUA.instance.AUDIO),this.hasVideo()&&e===AudioCodesUA.instance.AUDIO){let e=AudioCodesUA.instance,i=e.browser,s=e.modes,t=e.browserVersion;"firefox"===i&&s.video_call_audio_answer_firefox_fix?this.data._video_call_audio_answer_firefox=!0:"safari"===i&&(!0===s.video_call_audio_answer_safari_fix&&t<14||"force"===s.video_call_audio_answer_safari_fix)&&(this.data._video_call_audio_answer_safari=!0)}switch(e){case AudioCodesUA.instance.AUDIO:this._setEnabledSendVideo(!1),this.data._incoming_invite_without_sdp?this._setEnabledReceiveVideo(AudioCodesUA.instance.enableAddVideo):this._setEnabledReceiveVideo(!this.hasVideo()&&AudioCodesUA.instance.enableAddVideo),this._setVideoState(!1,!1);break;case AudioCodesUA.instance.VIDEO:this._setEnabledSendVideo(!0),this._setEnabledReceiveVideo(!0),this._setVideoState(!0,!0);break;case AudioCodesUA.instance.RECVONLY_VIDEO:this._setEnabledSendVideo(!1),this._setEnabledReceiveVideo(!0),this._setVideoState(!1,!0)}let t=AudioCodesUA.instance._callOptions(e===AudioCodesUA.instance.VIDEO,!1,i,s);Promise.resolve().then(()=>t.mediaStream?t.mediaStream:AudioCodesUA.instance.getWR().getUserMedia(t.mediaConstraints)).then(e=>{t.mediaStream=e,this.js_session._localMediaStreamLocallyGenerated=!0,AudioCodesUA.ac_log("AC: answer options:",t),this.js_session.answer(t)}).catch(e=>{AudioCodesUA.ac_log("AC: getUserMedia failure",e),this.reject(488)})}reject(e=486,i=null){AudioCodesUA.ac_log("AC: reject()");try{let s={status_code:e};i&&(s.extraHeaders=i),this.js_session.terminate(s)}catch(e){AudioCodesUA.ac_log("AC: call reject error:",e)}}terminate(){AudioCodesUA.ac_log("AC: terminate()");try{this.js_session.terminate()}catch(e){AudioCodesUA.ac_log("AC: call terminate error:",e)}}redirect(e,i=302,s=null){AudioCodesUA.ac_log(`AC: redirect() callTo=${e}`);try{let t={status_code:i,extraHeaders:["Contact: "+AudioCodesUA.instance.jssipUA.normalizeTarget(e)]};s&&t.extraHeaders.push(...s),this.js_session.terminate(t)}catch(e){AudioCodesUA.ac_log("AC: call redirect error:",e)}}isLocalHold(){return this.js_session.isOnHold().local}isRemoteHold(){return this.js_session.isOnHold().remote}isReadyToReOffer(){return this.js_session._isReadyToReOffer()}hold(e){return AudioCodesUA.ac_log(`AC: hold(${e})`),new Promise((i,s)=>{(e?this.js_session.hold:this.js_session.unhold).call(this.js_session,{},()=>{AudioCodesUA.ac_log("AC: hold()/unhold() is completed"),i()})||(AudioCodesUA.ac_log("AC: hold()/unhold() failed"),s())})}enableReceiveVideo(e){this._setEnabledReceiveVideo(e);let i=this.getRTCPeerConnection(),s=AudioCodesUA.instance.getWR().connection.getTransceiver(i,"video");if(null!==s){let e=this.getEnabledVideoState();AudioCodesUA.instance.getWR().transceiver.setDirection(s,e)}return AudioCodesUA.ac_log(`AC: enableReceiveVideo(${e}) ${null!==s?"":"No video transceiver"}`),null!==s}startSendingVideo(e={}){let i=e&&!1!==e.enabledReceiveVideo;return this.hasEnabledSendVideo()?(AudioCodesUA.ac_log("AC: startSendingVideo(). Already started"),Promise.reject("video already started")):(AudioCodesUA.ac_log("AC: startSendingVideo()"),AudioCodesUA.instance.getWR().getUserMedia({video:AudioCodesUA.instance.constraints.video}).catch(e=>{throw AudioCodesUA.ac_log("AC: startSendingVideo() getUserMedia failure",e),e}).then(e=>{let s=e.getVideoTracks()[0];this.getRTCLocalStream().addTrack(s),this._setEnabledSendVideo(!0),this._setEnabledReceiveVideo(i);let t=this.data._wasUsedSendVideo;return AudioCodesUA.instance.getWR().connection.addVideo(this.getRTCPeerConnection(),this.getRTCLocalStream(),s,this.hasEnabledReceiveVideo(),t).then(()=>{!t&&AudioCodesUA.instance.codecFilter&&AudioCodesUA.instance._cf_filter("video",this,AudioCodesUA.instance.codecFilter.video)}).catch(e=>{throw AudioCodesUA.ac_log("AC: startSendingVideo(). Adding video error",e),e})}).then(()=>this._renegotiate(e)))}stopSendingVideo(e={}){return this.hasEnabledSendVideo()?(AudioCodesUA.ac_log("AC: stopSendingVideo()"),AudioCodesUA.instance.getWR().connection.removeVideo(this.getRTCPeerConnection(),this.getRTCLocalStream()).catch(e=>{throw AudioCodesUA.ac_log("AC: stopSendingVideo(). Remove video error",e),e}).then(()=>(this._setEnabledSendVideo(!1),this.data._wasUsedSendVideo=!0,this._renegotiate(e)))):(AudioCodesUA.ac_log("AC: stopSendingVideo(). Already stopped"),Promise.reject("video already stopped"))}_doRenegotiate(e){return this.js_session.isEnded()?Promise.reject("call is ended"):new Promise(i=>{if(!this.js_session.renegotiate(e,()=>i(!0)))return i(!1)})}_renegotiate(e,i=30,s=500){return AudioCodesUA.ac_log(`AC: _renegotiate() attemptsLeft=${i}`),this._doRenegotiate(e).then(t=>{if(t)return AudioCodesUA.ac_log("AC: Renegotiation success"),!0;if(i<=1)throw new Error("Too many attempts");return new Promise(e=>setTimeout(e,s)).then(()=>this._renegotiate(e,i-1,s))}).catch(e=>{throw AudioCodesUA.ac_log("AC: Renegotiation failed",e),e})}sendReInvite(e={}){return AudioCodesUA.ac_log("AC: sendReInvite()"),this._renegotiate(e).then(()=>{if(e.showStreams){let e=this.getRTCLocalStream(),i=this.getRTCRemoteStream();AudioCodesUA.ac_log("AC>>: [after send re-INVITE] callShowStreams",this,e,i),AudioCodesUA.instance.listeners.callShowStreams(this,e,i)}})}startScreenSharing(e,i={localScreenSharing:!0,enabledReceiveVideo:!0,separateVideo:!1}){if(AudioCodesUA.ac_log("AC: startScreenSharing"),!e)return Promise.reject("missed stream argument");if(this.data._screenSharing)return Promise.reject("the call is already using screen-sharing");let s=i&&!1!==i.enabledReceiveVideo,t=e.getVideoTracks()[0],o=void 0;i.localScreenSharing&&(o=this._onEndedScreenSharingTrack.bind(this),t.addEventListener("ended",o)),this.data._screenSharing={stream:e,onended:o,hadSendVideo:this.hasSendVideo()};let n=this.data._wasUsedSendVideo;return this._setEnabledSendVideo(!0),this._setEnabledReceiveVideo(s),AudioCodesUA.instance.getWR().connection.addVideo(this.getRTCPeerConnection(),this.getRTCLocalStream(),t,this.hasEnabledReceiveVideo(),n).then(()=>{!n&&AudioCodesUA.instance.codecFilter&&AudioCodesUA.instance._cf_filter("video",this,AudioCodesUA.instance.codecFilter.video)}).catch(e=>{throw AudioCodesUA.ac_log("AC: startScreenSharing() error",e),this.data._screenSharing=null,e}).then(()=>{return this._renegotiate({extraHeaders:["X-Screen-Sharing: on"]})})}stopScreenSharing(){return AudioCodesUA.ac_log("AC: stopScreenSharing"),this.data._screenSharing?this._onEndedScreenSharing("called stopScreenSharing()"):Promise.reject("the call does not use screen-sharing")}isScreenSharing(){return!!this.data._screenSharing}doesScreenSharingReplaceCamera(){let e=this.data._screenSharing;return e&&e.hadSendVideo}_onEndedScreenSharingTrack(){return this._onEndedScreenSharing("track ended")}_onEndedScreenSharing(e){let i=this.data._screenSharing;this.data._screenSharing=null;let s=i.stream,t=i.onended;if(s&&t){s.getVideoTracks()[0].removeEventListener("ended",t)}return Promise.resolve().then(()=>{if(!this.isTerminated()){let e=this.getRTCPeerConnection(),s=this.getRTCLocalStream(),t={extraHeaders:["X-Screen-Sharing: off"]};return i.hadSendVideo?(AudioCodesUA.ac_log("AC: screen sharing stopped - restore previously sending video track"),AudioCodesUA.instance.getWR().connection.replaceSenderTrack(e,"video",s),this._renegotiate(t)):(AudioCodesUA.ac_log("AC: screen sharing stopped - stop send video"),this.stopSendingVideo(t))}}).then(()=>{AudioCodesUA.instance.listeners.callScreenSharingEnded&&(AudioCodesUA.ac_log(`AC>>: callScreenSharingEnded "${e}"`,this,s),AudioCodesUA.instance.listeners.callScreenSharingEnded(this,s))})}setRemoteHoldState(){this.js_session._remoteHold=!0}sendRefer(e,i=null){if(!AudioCodesUA.instance.listeners.transferorNotification)throw new Error("transferorNotification listener is missed");let s=this,t={eventHandlers:{requestSucceeded(){AudioCodesUA.ac_log("AC>>: transferorNotification progress [REFER accepted]"),AudioCodesUA.instance.listeners.transferorNotification(s,0)},requestFailed(){AudioCodesUA.ac_log("AC>>: transferorNotification failed [REFER failed]"),AudioCodesUA.instance.listeners.transferorNotification(s,-1)},trying(){AudioCodesUA.ac_log("AC>>: transferorNotification progress [NOTIFY 1xx]"),AudioCodesUA.instance.listeners.transferorNotification(s,0)},progress(){AudioCodesUA.ac_log("AC>>: transferorNotification progress [NOTIFY 1xx]"),AudioCodesUA.instance.listeners.transferorNotification(s,0)},accepted(){AudioCodesUA.ac_log("AC>>: transferorNotification success [NOTIFY 2xx]"),AudioCodesUA.instance.listeners.transferorNotification(s,1)},failed(){AudioCodesUA.ac_log("AC>>: transferorNotification failed [NOTIFY >= 300]"),AudioCodesUA.instance.listeners.transferorNotification(s,-1)}}};null!==i&&(t.replaces=i.js_session),this.js_session.refer(e,t)}}class AudioCodesSDP{constructor(e){this.start=[],this.media=[];let i=e.split("\n").map(e=>e.trim()).filter(e=>e.length>0),s=this.start;for(let e of i)e.startsWith("m=")&&(s=[],this.media.push(s)),s.push(e)}getMedia(e){for(let i of this.media)if(i.length>0&&i[0].startsWith("m="+e))return i;return null}checkSendRecv(e){switch(e){case"a=sendrecv":return"sendrecv";case"a=sendonly":return"sendonly";case"a=recvonly":return"recvonly";case"a=inactive":return"inactive";default:return null}}getMediaDirectionValue(e){let i,s=this.getMedia(e);if(null===s)return null;let t="sendrecv";for(let e of this.start)if(null!==(i=this.checkSendRecv(e))){t=i;break}for(let e of s)if(null!==(i=this.checkSendRecv(e))){t=i;break}return t}getMediaDirection(e,i){let s=this.getMediaDirectionValue(e);switch(s){case"sendrecv":return[!0,!0,s];case"sendonly":return i?[!1,!0,s]:[!0,!1,s];case"recvonly":return i?[!0,!1,s]:[!1,!0,s];case null:case"inactive":return[!1,!1,s]}}toString(){let e=this.start;for(let i of this.media)e=e.concat(i);return e.join("\r\n")+"\r\n"}}let AudioCodesWebRTCWrapper={getUserMedia:e=>(AudioCodesUA.ac_log(`[webrtc] getUserMedia constraints=${JSON.stringify(e)}`),navigator.mediaDevices.getUserMedia(e)),hasDisplayMedia:()=>navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia,getDisplayMedia:()=>(AudioCodesUA.ac_log("[webrtc] getDisplayMedia"),navigator.mediaDevices.getDisplayMedia({video:!0})),mediaDevices:{enumerateDevices:()=>navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices():Promise.reject("WebRTC is not supported"),addDeviceChangeListener(e){navigator.mediaDevices&&navigator.mediaDevices.addEventListener("devicechange",e)},removeDeviceChangeListener(e){navigator.mediaDevices&&navigator.mediaDevices.removeEventListener("devicechange",e)}},checkAvailableDevices(){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return Promise.reject("WebRTC is not supported");let e=!1,i=!1,s=!1;return navigator.mediaDevices.enumerateDevices().then(t=>(t.forEach(function(t){switch(t.kind){case"videoinput":e=!0;break;case"audioinput":i=!0;break;case"audiooutput":s=!0}}),void 0===navigator.webkitGetUserMedia&&(s=!0),s?i?Promise.resolve(e):Promise.reject("Missing a microphone! Please connect one and reload"):Promise.reject("Missing a speaker! Please connect one and reload")))},transceiver:{setDirection(e,i){let s="";null!==e.sender.track?s=e.sender.track.kind:null!==e.receiver.track&&(s=e.receiver.track.kind),AudioCodesUA.ac_log(`[webrtc] set ${s} transceiver direction=${i}`),e.direction=i}},stream:{getInfo(e){function i(e){return e.length>0?e[0].enabled.toString():"-"}return null===e?Promise.resolve("stream is null"):Promise.resolve(`audio: ${i(e.getAudioTracks())} video: ${i(e.getVideoTracks())}`)}},connection:{getTransceiversInfo(e){function i(e){return null===e?"none":`d=${e.direction} c=${e.currentDirection}`}let s=e.getTransceivers(),t=AudioCodesUA.instance.getWR().connection.getTransceiver(e,"audio"),o=AudioCodesUA.instance.getWR().connection.getTransceiver(e,"video");return Promise.resolve(`(${s.length}) audio ${i(t)} video ${i(o)}`)},getTransceiver(e,i){for(let s of e.getTransceivers()){if(null!==s.sender&&null!==s.sender.track&&s.sender.track.kind===i)return s;if(null!==s.receiver&&null!==s.receiver.track&&s.receiver.track.kind===i)return s}return null},addEventListener:(e,i,s)=>(AudioCodesUA.ac_log(`[webrtc] Connection addEventListener ${i}`),"track"!==i?Promise.reject(`Wrong event name: ${i}`):(e.addEventListener(i,s),Promise.resolve())),getDTMFSender(e){let i=e.getSenders().find(e=>e.track&&"audio"===e.track.kind);if(i&&i.dtmf)return i.dtmf},addVideo(e,i,s,t,o){AudioCodesUA.ac_log("[webrtc] Connection addVideo");let n=AudioCodesUA.instance.getWR().connection.getTransceiver(e,"video");if(null!==n){let e=t?"sendrecv":"sendonly";AudioCodesUA.instance.getWR().transceiver.setDirection(n,e)}return null===n||null===n.sender.track&&!o?(AudioCodesUA.ac_log("[webrtc] addVideo (connection addTrack)"),e.addTrack(s,i),Promise.resolve(!0)):(AudioCodesUA.ac_log("[webrtc] addVideo (video transceiver sender replaceTrack)"),n.sender.replaceTrack(s).then(()=>!1))},removeVideo(e,i){AudioCodesUA.ac_log("[webrtc] Connection removeVideo");let s=AudioCodesUA.instance.getWR().connection.getTransceiver(e,"video");if(null===s)return Promise.reject("no video transceiver found");if(e.removeTrack(s.sender),i)for(let e of i.getVideoTracks())i.removeTrack(e),e.stop();return Promise.resolve()},replaceSenderTrack(e,i,s){AudioCodesUA.ac_log(`[webrtc] ReplaceSenderTrack ${i}`);let t=null;for(let s of e.getSenders())if(null!==s.track&&s.track.kind===i){t=s;break}if(null===t)return Promise.reject(`No ${i} sender`);let o="audio"===i?s.getAudioTracks():s.getVideoTracks();return 0===o.length?Promise.reject(`No ${i} track`):t.replaceTrack(o[0])},getStats(e,i){let s="";return e.getStats(null).then(e=>(e.forEach(e=>{if(i.includes(e.type)){s+=" {";let i=!0;for(let t of Object.keys(e))i?i=!1:s+=",",s+=t+"="+e[t];s+="} \r\n"}}),s))}}};
'use strict';
/*
 * The utilities used to build our phone examples.

 * You may consider them an optional part of our SDK.
 * You can use them if they are suitable for your project or replace them with other libraries.
 * For example instead provided in this file AudioPlayer you may use other audio library,
 * instead storageLoadConfig other library to work with local storage, etc.
 *
 *  Load/save configuration from/to local storage
 *  - storageLoadConfig
 *  - storageSaveConfig
 *
 *  IndexedDB
 *  - AbstractDb (abstract indexeddb with single store)
 *  - CallLogDb (call log indexeddb)
 *  - VoiceDb   (recorded voice messages indexeddb)
 *  - MessageDb (received text messages indexeddb)
 *
 *  Audio
 *  - AudioPlayer
 *  - AudioRecorder
 *  - AnsweringMachine
 *
 *  SIP
 *  - AlertInfo parser
 *
 *  Conference
 *  - CallAudioMixer
 *  - CallVideoMixer
 *
 *  Igor Kolosov AudioCodes 2019
 *  Last edit 26-Sep-2019
 */


/**
 * Load JSON object from local storage
 *
 * If object does not exist, will be used default value.
 * If object exists, and has version different from default value version, will be used default value.
 *
 * The version used to override browser local storage value to default value from site.
 *
 * Example:
 *   We upgrade in our site phone from version 1.1 to 1.2.
 *   There are many users of phone version 1.1 in the world and they store some phone configuration
 *   to browser local storage.
 *   In phone version 1.2 the construction of the configuration object is different.
 *   To prevent errors, we should change version of default configuration object in our site,
 *   it forces to load updated version instead using saved in local storage.
 *   (See phone prototype config.js)
 *
 * For debugging can be used storeBack = true,
 * to edit stored value via browser dev. tools.
 */
function storageLoadConfig(name, defValue = null, useLog = true, storeBack = false) {
    let str_value = localStorage.getItem(name);
    let value = null;
    let isLoaded = false;
    let isReplaced = false;
    let isDefault;
    if (str_value) {
        isLoaded = true;
        value = JSON.parse(str_value);
    }
    if (value === null || (defValue !== null && value.version !== defValue.version)) {
        if (isLoaded)
            isReplaced = true;
        isLoaded = false;
        isDefault = true;
        if (defValue !== null)
            value = Object.assign({}, defValue);
    } else {
        isDefault = dataEquals(value, defValue);
    }
    if (useLog) {
        ac_log('Used %s %s', value !== null ? (isDefault ? 'default' : 'custom') : 'null', name);
    }
    if (value !== null && (isReplaced || (storeBack && !isLoaded)))
        localStorage.setItem(name, JSON.stringify(value));
    return value;
}

/**
 * Save JSON object to local storage.
 *
 * Default value is optional.
 * If it's provided and object has default value, it will be removed from local storage.
 */
function storageSaveConfig(name, value, defValue = null) {
    if (defValue === null || !dataEquals(value, defValue)) {
        if (defValue !== null && defValue.version && !value.version)
            value.version = defValue.version;
        localStorage.setItem(name, JSON.stringify(value));
    } else {
        localStorage.removeItem(name);
    }
}

// Objects deep equals
function dataEquals(obj1, obj2) {
    if (obj1 === null || obj2 === null) return obj1 === obj2;
    for (let p in obj1) {
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;
        switch (typeof (obj1[p])) {
            case 'object':
                if (!dataEquals(obj1[p], obj2[p])) return false;
                break;
            case 'function': // No compare functions.
                break;
            default:
                if (obj1[p] != obj2[p]) return false;
        }
    }
    for (let p in obj2) {
        if (typeof (obj1[p]) == 'undefined') return false;
    }
    return true;
}


/**
 * Database with single store and with copy of the store in memory - objects list
 * Purpose: make the list persistent.
 * Key is part of record, based on current time, unique and has name 'id'
 * Number of objects in store is limited, oldest objects will be deleted.
 * If needed, additional stores can be added: override open(),
 * and use get(), put(), clear(), delete() methods with store name.
 */
class AbstractDb {
    constructor(dbName, storeName, maxSize) {
        this.dbName = dbName;
        this.storeName = storeName;
        this.maxSize = maxSize; // max number of objects
        this.db = null;
        this.list = []; // default store copy in memory.
        this.idSeqNumber = -1; // to generate unique key.
    }

    // Create store unique key. (no more than 1 million in the same millisecond)
    // key must be part or record and have name 'id'
    createId(time) {
        this.idSeqNumber = (this.idSeqNumber + 1) % 1000000; // range 0..999999
        return time.toString() + '-' + ('00000' + this.idSeqNumber.toString()).slice(-6);
    }

    // Open the database, if needed create it.
    open() {
        return new Promise((resolve, reject) => {
            let r = indexedDB.open(this.dbName);
            r.onupgradeneeded = (e) => {
                e.target.result.createObjectStore(this.storeName, { keyPath: 'id' });
            }
            r.onsuccess = () => {
                this.db = r.result;
                resolve();
            }
            r.onerror = r.onblocked = () => { reject(r.error); };
        });
    }

    // load records to memory, ordered by time, if needed delete oldest records
    load() {
        return new Promise((resolve, reject) => {
            if (this.db === null) { reject('db is null'); return; }
            let trn = this.db.transaction(this.storeName, 'readwrite');
            trn.onerror = () => { reject(trn.error); }
            let store = trn.objectStore(this.storeName)
            let onsuccess = (list) => {
                this.list = list;
                let nDel = this.list.length - this.maxSize;
                if (nDel <= 0) {
                    resolve();
                } else {
                    let r = store.delete(IDBKeyRange.upperBound(this.list[nDel - 1].id));
                    r.onerror = () => { reject(r.error); }
                    r.onsuccess = () => {
                        this.list = this.list.splice(-maxSize);
                        resolve();
                    }
                }
            }
            let onerror = (e) => { reject(e); }
            let getAll = store.getAll ? this._getAllBuiltIn : this._getAllCursor;
            getAll(store, onsuccess, onerror);
        });
    }

    _getAllBuiltIn(store, onsuccess, onerror) { // Chrome, Firefox
        let r = store.getAll();
        r.onerror = () => onerror(r.error);
        r.onsuccess = () => onsuccess(r.result);
    }

    _getAllCursor(store, onsuccess, onerror) { // Edge
        let list = [];
        let r = store.openCursor();
        r.onerror = () => onerror(r.error);
        r.onsuccess = (e) => {
            let cursor = e.target.result;
            if (cursor) {
                list.push(cursor.value);
                cursor.continue();
            } else {
                onsuccess(list);
            }
        };
    }

    // Add new record. If needed delete oldest records
    add(record) {
        return new Promise((resolve, reject) => {
            if (this.db === null) { reject('db is null'); return; }
            let trn = this.db.transaction(this.storeName, 'readwrite');
            trn.onerror = () => { reject(trn.error); }
            let store = trn.objectStore(this.storeName)
            let r = store.add(record);
            r.onerror = () => { reject(r.error); }
            r.onsuccess = () => {
                this.list.push(record);
                let nDel = this.list.length - this.maxSize;
                if (nDel <= 0) {
                    resolve();
                } else {
                    r = store.delete(IDBKeyRange.upperBound(this.list[nDel - 1].id));
                    r.onerror = () => { reject(r.error); }
                    r.onsuccess = () => {
                        this.list = this.list.splice(-this.maxSize);
                        resolve();
                    }
                }
            }
        });
    }

    // Update record with some unique id.
    update(record) {
        let index = this.list.findIndex((r) => r.id === record.id);
        if (index == -1)
            return Promise.reject('Record is not found');
        this.list[index] = record;
        return this._exec('put', this.storeName, record);
    }

    // Delete record with the key (if store is default delete also from list)
    delete(id, storeName = this.storeName) {
        if (storeName === this.storeName) {
            let index = this.list.findIndex((r) => r.id === id);
            if (index == -1)
                return Promise.reject('Record is not found');
            this.list.splice(index, 1);
        }
        return this._exec('delete', storeName, id);
    }

    // Clear all store records
    clear(storeName = this.storeName) {
        this.list = [];
        return this._exec('clear', storeName);
    }

    get(key, storeName) {
        return this._exec('get', storeName, key);
    }

    put(record, storeName) {
        return this._exec('put', storeName, record);
    }

    // Single transaction operation.
    _exec(op, storeName, data) {
        return new Promise((resolve, reject) => {
            if (this.db === null) { reject('db is null'); return; }
            let trn = this.db.transaction(storeName, 'readwrite');
            trn.onerror = () => { reject(trn.error); }
            let store = trn.objectStore(storeName)
            let r;
            switch (op) {
                case 'clear':
                    r = store.clear();
                    break;
                case 'delete':
                    r = store.delete(data);
                    break;
                case 'put':
                    r = store.put(data);
                    break;
                case 'get':
                    r = store.get(data);
                    break;
                default:
                    reject('db: wrong request');
                    return;
            }
            r.onerror = () => { reject(r.error); }
            r.onsuccess = () => { resolve(r.result); }
        });
    }
}


/**
 * To keep phone call logs.
 */
class CallLogDb extends AbstractDb {
    constructor(maxSize) {
        super('phone', 'call_log', maxSize);
    }
}

/*
 *  To use with automatic answer machine. Created 2 stores:
 *  'records' default store, to save last (up to maxSize) answer records.
 *  'greeting' additional store, to save custom greeting.
 */
class VoiceDb extends AbstractDb {
    constructor(maxSize) {
        super('voice_db', 'records', maxSize);
    }

    open() {
        return new Promise((resolve, reject) => {
            let r = indexedDB.open(this.dbName);
            r.onupgradeneeded = (e) => {
                e.target.result.createObjectStore(this.storeName, { keyPath: 'id' });
                e.target.result.createObjectStore('greeting', { keyPath: 'id' });
            }
            r.onsuccess = () => {
                this.db = r.result;
                resolve();
            }
            r.onerror = r.onblocked = () => { reject(r.error); };
        });
    }
}

/**
 * To keep incoming text messages.
 */
class MessageDb extends AbstractDb {
    constructor(maxSize) {
        super('message_db', 'messages', maxSize);
    }
}

/*
 * Download & decode sound from site
 * Generate sound by pattern (ring-tone, busy-tone, special, DTMF, ...)
 * Play sound to speaker or to stream
 *
 * For modern browsers only.
 * Used AudioContext API.
 * Can be used in Chrome, Firefox, Safari, Edge
 */
class AudioPlayer {
    constructor(createCtx = true) {
        this.logger = console.log; // by default.
        this.audioCtx = null;
        this.sounds = {};
        this.source = null;
        this.resolve = null;
        this.gain = null;
        this.streamDestination = null;
        this.browser = this._browser();
        this.encodings = {
            chrome: ['mp3', 'ogg', 'aac'],
            firefox: ['ogg', 'mp3', 'aac'],
            safari: ['aac', 'mp3'],
            edge: ['mp3', 'aac'],
            other: ['mp3', 'ogg', 'aac']
        }[this.browser];

        if (createCtx) {
            this.createCtx();
            if (this.isDisabled()) {
                console.log('AudioPlayer: AudioContext is suspended [Autoplay Policy]');
            }
        }
    }

    _browser() {
        if (navigator.mozGetUserMedia) return 'firefox';
        if (navigator.webkitGetUserMedia) return 'chrome';
        if (navigator.userAgent.indexOf('Edge/') !== -1) return 'edge';
        if (navigator.userAgent.indexOf('Safari/') !== -1) return 'safari';
        return 'other';
    }

    createCtx() {
        try {
            this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            this.logger('AudioPlayer: cannot create audioContext', e);
        }
    }

    init(logger, audioCtx = undefined) {
        this.logger = logger;
        if (audioCtx !== undefined)
            this.audioCtx = audioCtx;

        if (this.browser === 'safari')
            this._setDecodeAudioDataShim(this.audioCtx);
    }

    // for Safari
    _setDecodeAudioDataShim(audioCtx) {
        let origDecodeAudioData = audioCtx.decodeAudioData;
        audioCtx.decodeAudioData = (data) => new Promise((resolve, reject) => {
            origDecodeAudioData.call(audioCtx, data, (d) => resolve(d), (e) => reject(e))
        });
    }

    // for Safari
    _setStartRenderingShim(offlineCtx) {
        let origStartRendering = offlineCtx.startRendering;
        offlineCtx.startRendering = () => new Promise((resolve) => {
            offlineCtx.oncomplete = (e) => { resolve(e.renderedBuffer); }
            origStartRendering.call(offlineCtx);
        });
    }

    // Check if context is disabled by audio auto-play policy.
    // Chrome implementation of audio auto-play policy is not compatible with Firefox,
    // where audio context after creation is also suspended during short time.
    isDisabled() {
        switch (this.browser) {
            case 'chrome':
            case 'safari':
                return this.isSuspended();
            default:
                return false;
        }
    }

    enable() {
        switch (this.browser) {
            case 'chrome':
            case 'safari':
                return this.resume();
            default:
                return Promise.resolve();
        }
    }

    isSuspended() {
        return this.audioCtx.state === 'suspended';
    }

    resume() {
        return this.audioCtx.resume();
    }

    suspend() {
        return this.audioCtx.suspend();
    }

    /**
     * Play sound
     * @param options
     *   name  sound clip name (must be set)
     *
     *   volume = 0..1.0   (1.0 by default)
     *
     *   Loop options:
     *     loop = true/false (false by default) Endless loop
     *     repeat =  repeat N times (undefined by default) Set automatically loop=true
     *
     *     duration seconds (undefined by default) Can be used with or without loop=true
     *
     *   If we want use part of downloaded sound, can be used:
     *
     *   clipStart (undefined by default)
     *   clipEnd  (undefined by default)
     *
     *   streamDestination (undefined by default), value mediaStreamDestination.
     *   Assign output to audio stream (dest.stream) instead of speaker.
     *
     *   startDelay  (0 by default).
     *   Before start delay some time.
     *
     * dropDisabled returns immediately when audioContext is suspended.
     * @returns Promise to check when playing is finished.
     */
    play(options) {
        if (!this.audioCtx)
            return Promise.reject('No audio context');

        if (this.isDisabled() && options.dropDisabled) { // To prevent sound defect after enabling.
            return Promise.resolve('drop sound for disabled');
        }

        return new Promise((resolve, reject) => {
            this.stop();
            this.resolve = resolve;
            try {
                let buf = this.sounds[options.name];
                if (!buf) {
                    this.logger('AudioPlayer: no sound: ' + options.name);
                    reject('No sound');
                    return;
                }
                this.logger('AudioPlayer: play:', options);
                this.source = this.audioCtx.createBufferSource();
                this.source.buffer = buf;

                this.source.onended = (e) => {
                    this.logger('AudioPlayer: onended ' + options.name);
                    resolve(true);
                }
                this.source.onerror = (e) => {
                    this.logger('AudioPlayer: onerror callback', e);
                    this._releaseResources();
                    reject('onerror callback');
                }

                this.gain = this.audioCtx.createGain();
                let volume = options.volume ? options.volume : 1.0;
                this.gain.gain.setValueAtTime(volume, this.audioCtx.currentTime);
                this.source.connect(this.gain);
                if (options.streamDestination) {
                    this.streamDestination = options.streamDestination;
                    this.gain.connect(this.streamDestination);
                } else {
                    this.streamDestination = null;
                    this.gain.connect(this.audioCtx.destination);
                }

                let clipStart = options.clipStart ? options.clipStart : 0;
                let clipEnd = options.clipEnd ? options.clipEnd : null;
                if (options.loop === true || options.repeat) {
                    this.source.loop = true;
                    this.source.loopStart = clipStart;
                    if (clipEnd)
                        this.source.loopEnd = clipEnd;
                }

                let duration = null;
                if (options.duration) {
                    duration = options.duration;
                } else if (options.repeat) {
                    if (clipEnd === null) clipEnd = this.source.buffer.duration;
                    duration = (clipEnd - clipStart) * options.repeat;
                } else if (clipEnd !== null) {
                    duration = clipEnd - clipStart;
                }

                let startDelay = 0;
                if (options.startDelay) {
                    startDelay = this.audioCtx.currentTime + options.startDelay;
                    if (duration)
                        duration += options.startDelay;
                }
                this.source.start(startDelay, clipStart);
                if (duration)
                    this.source.stop(this.audioCtx.currentTime + duration);
            } catch (e) {
                this.logger('AudioPlayer: play error', e);
                reject(e);
            }
        });
    }

    _releaseResources() {
        if (this.source)
            this.logger('AudioPlayer: release resources');

        try {
            this.source && this.source.stop();
        } catch (e) {
        }

        try {
            this.gain && this.gain.disconnect();
            this.source && this.source.disconnect();
            this.streamDestination && this.streamDestination.disconnect();
            this.gain = null;
            this.source = null;
            this.streamDestination = null;
        } catch (e) {
            this.logger('AudioPlayer: release resources error', e);
        }
    }

    /**
     * Stop playing (if was)
     */
    stop() {
        this._releaseResources();
        // Chrome bug workaround: source.stop does not lead to a call "onended"
        if (this.resolve) {
            this.resolve('stopped externally');
            this.resolve = null;
        }
    }

    /*
        Download set of sounds & decoding

        The same sound should be saved in site in different encodings: mp3, ogg, acc.

        For each browser used preferred encoding sequence.
        For example for Chrome used: ['mp3', 'ogg', 'aac'].
        At the first the function try to download and decode mp3 format,
        if there no such file or encoding error occured, will be used next encoding from the list.
        Firefox to decode mp3 use Windows AP, without installed codecs, it's fail
        So in Firefox better use ogg (vorbis) encoding, instead mp3
        Edge don't support ogg format.
        The same mp3 file can be succesfully decoded in one browser, and fail in other.

        Usage example: download('sounds/', ['ring', 'kukuriku'])

        Encoding formats by default set according browser
        The download of sound stop after successull decoding, to check all encodings formats
        in some browser let use test=true
    */
    async downloadSounds(path, soundList, encodings = this.encodings, test = false) {
        this.logger('AudioPlayer: downloadSounds', soundList);
        for (let sound of soundList) {
            await this.downloadSound(path, sound, encodings, test);
        }
    }

    // Download & decode sound. Try use different encoding.
    async downloadSound(path, sound, encodings = this.encodings, test = false) {
        let decodedData = null;
        for (let ext of encodings) {
            let fileName = sound + '.' + ext;
            let data = null;
            let downloadStart = Date.now();
            try {
                let response = await fetch(path + fileName, { credentials: 'same-origin' });
                data = await response.arrayBuffer();
            } catch (e) {
                continue;
            }

            let decodingStart = Date.now();
            try {
                decodedData = await this.audioCtx.decodeAudioData(data);
                if (!test)
                    break;
                let decodingEnd = Date.now();
                this.logger('AudioPlayer [test] ' + fileName + ' is downloaded (%s) and decoded (%s)',
                    ((decodingStart - downloadStart) / 1000).toFixed(3), ((decodingEnd - decodingStart) / 1000).toFixed(3));
            } catch (e) {
                this.logger('AudioPlayer: decoding error: ' + fileName, e);
                continue;
            }
        }
        if (decodedData !== null) {
            this.sounds[sound] = decodedData;
        } else {
            this.logger('AudioPlayer: Cannot download & decode: ' + sound);
        }
        return decodedData;
    }

    /*  Phone ringing, busy and other tones vary in different countries, see:
     *  https://www.itu.int/ITU-T/inr/forms/files/tones-0203.pdf
     *
     *  Most can be easily generated, other can be downloaded as recorded sound.
     *
     *  France:
     *           Ringing tone - 440 1.5 on 3.5 off
     *           Busy tone - 440 0.5 on 0.5 off
     *
     *  Germany:
     *           Ringing tone - 425 1.0 on 4.0 off
     *           Busy tone - 425 0.48 on 0.48 off
     *           Special information tone - 900/1400/1800 3x0.33 on 1.0 off
     *
     *  Great Britain
     *          Ringing tone - 400+450  0.4 on 0.2 off 0.4 on 2.0 off  (simplified)
     *          Busy tone -  400 0.375 on 0.375 off
     *
     *  toneDefinition argument describe tone generation, as sequence of steps:
     *  here f - frequency, t - time.
     *
     *  Germany ringing [{f:425, t:1.0},  {t:4.0}]
     *  Germany busy    [{f:425, t:0.48}, {t:0.48}]
     *  Germany special [{f:900, t:0.33}, {f:1400, t:0.33}, {f:1800, t:0.33}, {t:1.0}]
     *  DTMF for '#'    [{f:[941, 1477], 0.2}]
     *  Great Britain ringing [{f:[400,450], t:0.4}, {t:0.2}, {f:[400, 450], t:0.4}, {t:2.0}]
     */
    generateTone(toneName, toneDefinition) {
        function getArray(e) {
            if (e === undefined) return [];
            if (Array.isArray(e)) return e;
            return [e];
        }

        try {
            let duration = 0;
            let oscillatorNumber = 0;
            for (let step of toneDefinition) {
                duration += step.t;
                oscillatorNumber = Math.max(oscillatorNumber, getArray(step.f).length);
            }
            let channels = 1;
            let sampleRate = this.audioCtx.sampleRate;
            let frameCount = sampleRate * duration;
            let offlineCtx = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(channels, frameCount, sampleRate);
            if (this.browser === 'safari')
                this._setStartRenderingShim(offlineCtx);

            let oscillators = new Array(oscillatorNumber);
            for (let i = 0; i < oscillators.length; i++) {
                oscillators[i] = offlineCtx.createOscillator();
                oscillators[i].connect(offlineCtx.destination);
            }

            let time = 0;
            for (let i = 0, num = toneDefinition.length; i < num; i++) {
                let step = toneDefinition[i];
                let frequencies = getArray(step.f);
                for (let j = 0; j < oscillators.length; j++) {
                    let f = (j < frequencies.length) ? frequencies[j] : 0;
                    oscillators[j].frequency.setValueAtTime(f, offlineCtx.currentTime + time);
                }
                time += step.t;
            }

            for (let o of oscillators) {
                o.start(0);
                o.stop(offlineCtx.currentTime + duration);
            }

            return offlineCtx.startRendering()
                .then(renderedBuffer => {
                    for (let o of oscillators)
                        o.disconnect();
                    this.sounds[toneName] = renderedBuffer;
                });
        } catch (e) {
            this.logger('AudioPlayer: cannot generate tone', e);
            return Promise.reject(e);
        }
    }

    generateTones(ringingTone, busyTone) {
        return this.generateTone('ringingTone', ringingTone)
            .then(() => { return this.generateTone('busyTone', busyTone); })
            .then(() => { return this.generateTone('1', [{ f: [697, 1209], t: 0.2 }]); })
            .then(() => { return this.generateTone('2', [{ f: [697, 1336], t: 0.2 }]); })
            .then(() => { return this.generateTone('3', [{ f: [697, 1477], t: 0.2 }]); })
            .then(() => { return this.generateTone('4', [{ f: [770, 1209], t: 0.2 }]); })
            .then(() => { return this.generateTone('5', [{ f: [770, 1336], t: 0.2 }]); })
            .then(() => { return this.generateTone('6', [{ f: [770, 1477], t: 0.2 }]); })
            .then(() => { return this.generateTone('7', [{ f: [852, 1209], t: 0.2 }]); })
            .then(() => { return this.generateTone('8', [{ f: [852, 1336], t: 0.2 }]); })
            .then(() => { return this.generateTone('9', [{ f: [852, 1477], t: 0.2 }]); })
            .then(() => { return this.generateTone('*', [{ f: [941, 1209], t: 0.2 }]); })
            .then(() => { return this.generateTone('0', [{ f: [941, 1336], t: 0.2 }]); })
            .then(() => { return this.generateTone('#', [{ f: [941, 1477], t: 0.2 }]); });
    }
}

/*
 * Recording API.
 * For modern browsers only. Used MediaRecorder API.
 * Can be used in Chrome and Firefox.
 * Not implemented in Edge and Safari
 */
class AudioRecorder {
    constructor() {
        this.logger = null;
        this.audioCtx = null;
        this.chunks = [];
        this.recorder = null;
        this.browser = this._browser();
        this.options = {
            'chrome': { mimeType: 'audio/webm;codec=opus' },
            'firefox': { mimeType: 'audio/ogg;codec=opus' },
            'safari': undefined,
            'edge': undefined,
            'other': undefined
        }[this.browser];
    }

    _browser() {
        if (navigator.mozGetUserMedia) return 'firefox';
        if (navigator.webkitGetUserMedia) return 'chrome';
        if (navigator.userAgent.indexOf('Edge/') !== -1) return 'edge';
        if (navigator.userAgent.indexOf('Safari/') !== -1) return 'safari';
        return 'other';
    }

    init(logger, audioCtx) {
        this.logger = logger;
        this.audioCtx = audioCtx;
    }

    isRecording() {
        return this.recorder && this.recorder.state === 'recording';
    }

    recordStream(stream) {
        this.logger('AudioRecorder: recordStream()');
        this.create(stream);
        return this.start()
            .then(blob => {
                let tracks = this.recorder.stream.getTracks();
                for (let track of tracks)
                    track.stop();
                return blob;
            });
    }

    static canBeUsed() {
        return typeof MediaRecorder === 'function';
    }

    create(stream) {
        this.recorder = new MediaRecorder(stream, this.options);
    }

    start() {
        return new Promise((resolve, reject) => {
            this.chunks = [];
            this.recorder.ondataavailable = (e) => {
                this.chunks.push(e.data);
            };
            this.recorder.onerror = (e) => {
                reject(e);
            }
            this.recorder.onstop = () => {
                resolve(new Blob(this.chunks, { type: 'audio/ogg;codecs=opus' }));
                this.chunks = [];
            };
            this.recorder.start();
        });
    }

    stop() {
        if (!this.recorder || this.recorder.state !== 'recording')
            return;
        this.logger('AudioRecorder: stop');
        this.recorder.stop();
    }

    decodeSoundBlob(blob) {
        return fetch(URL.createObjectURL(blob))
            .then(response => {
                return response.arrayBuffer();
            })
            .then(buffer => {
                return this.audioCtx.decodeAudioData(buffer);
            })
    }
}

/**
 * Automatic answering machine.
 * Play greeting, record answer.
 */
class AnsweringMachine {
    constructor() {
        this.use = true;
        this.startDelay = 16;
        this.recordDuration = 20;
        this.run = false;
        this.logger = null;
        this.call = null;
        this.streamDest = null;
        this.answerTimer = null;
        this.recordingTimer = null;
    }

    init(audioPlayer, audioRecorder) {
        this.audioPlayer = audioPlayer;
        this.logger = audioPlayer.logger;
        this.audioRecorder = audioRecorder;
    }

    startTimer(call, answerCallback) {
        this.call = call;
        this.stopTimer();
        this.answerTimer = setTimeout(() => {
            this.run = true;
            answerCallback();
        }, this.startDelay * 1000);
    }

    stopTimer() {
        if (this.answerTimer !== null) {
            clearTimeout(this.answerTimer);
            this.answerTimer = null;
        }
    }

    createPlayerStream() {
        this.streamDest = this.audioPlayer.audioCtx.createMediaStreamDestination();
        return this.streamDest.stream;
    }

    // Called if a call is terminated.
    stop(call) {
        if (call === this.call) {
            this.stopTimer();
            this.audioRecorder.stop();
            if (this.recordingTimer !== null) {
                clearTimeout(this.recordingTimer);
                this.recordingTimer = null;
            }
            this.run = false;
        }
    }

    // Use destination stream, instead speaker.
    playGreeting() {
        return this.audioPlayer.play({
            name: 'greeting',
            streamDestination: this.streamDest,
            volume: 1.0,
            startDelay: 1.6
        })
            .then(() => {
                return this.audioPlayer.play({
                    name: 'beep',
                    volume: 0.2,
                    streamDestination: this.streamDest,
                });
            })
    }

    // Record remote stream of the call.
    recordAnswer(remoteStream) {
        this.audioRecorder.create(remoteStream);

        this.recordingTimer = setTimeout(() => {
            this.logger('AnsweringMachine: maximum recording time reached.');
            this.audioRecorder.stop();
        }, this.recordDuration * 1000);

        return this.audioRecorder.start()
            .then(blob => {
                this.run = false;
                return blob;
            });
    }
}

/**
 *  SIP Alert-Info header parser.
 *
 * Alert-Info   =  "Alert-Info" HCOLON alert-param *(COMMA alert-param)
 * alert-param  =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
 */
class AlertInfo {
    constructor(incomingMsg) {
        this.parsed = [];
        try {
            for (let hh of incomingMsg.getHeaders('alert-info')) {
                for (let h of hh.split(',')) {
                    this._parseHeader(h);
                }
            }
        } catch (e) {
            ac_log('Alert-Info parsing error', e);
        }
    }

    _parseHeader(h) {
        let st = h.split(';');
        let url;
        if (st[0].startsWith('<') && st[0].endsWith('>'))
            url = st[0].slice(1, -1);
        else
            return;
        let params = new Map();
        for (let pr of st.slice(1)) {
            let eq = pr.indexOf('=');
            if (eq !== -1) {
                let k = pr.substring(0, eq);
                let v = pr.substring(eq + 1);
                if (v.startsWith('"') && v.endsWith('"'))
                    v = v.slice(1, -1);
                params.set(k.toLowerCase(), v.toLowerCase());
            }
        }
        this.parsed.push({ url: url, params: params });
    }

    exists() {
        return this.parsed.length > 0;
    }

    param(key, ix = 0) {
        if (ix >= this.parsed.length)
            return null;
        return this.parsed[ix].params.get(key)
    }

    url(ix = 0) {
        return this.parsed[ix].url;
    }

    getDelay(ix = 0) {
        let delay = this.param('delay', ix);
        if (!delay)
            return -1;
        return parseInt(delay);
    }

    hasAutoAnswer(ix = 0) {
        return this.param('info', ix) === 'alert-autoanswer';
    }
}

/**
 *  Audio mixer (for audio conference)
 */
class CallAudioMixer {
    // For each call created audio mixer instance.
    // Аudio context can be taken from audio player
    constructor(audioCtx, call) {
        this.audioCtx = audioCtx;
        this.dest = this.audioCtx.createMediaStreamDestination();
        this.calls = [];
        let source = this.audioCtx.createMediaStreamSource(call.getRTCLocalStream());
        source.connect(this.dest);
        this.calls.push({ call, source });
    }

    // Close mixer, release all resources.
    close() {
        if (this.dest !== null) {
            this.dest.disconnect();
            this.dest = null;
        }
        for (let c of this.calls) {
            c.source.disconnect();
        }
        this.calls = [];
    }

    // Get mixed audio stream
    getMix() { return this.dest.stream; }

    // Add call to mixer.
    // Returns true if added, false if the call is already added.
    add(call) {
        let ix = this.calls.findIndex(c => c.call === call);
        if (ix !== -1)
            return false;
        let stream = call.getRTCRemoteStream();
        let source = this.audioCtx.createMediaStreamSource(stream);
        source.connect(this.dest);
        this.calls.push({ call, source });
        return true;
    }

    // Remove call from mixer
    // Returns true if removed.
    // Returns false, if the call was not added, or cannot be removed, because set in constructor.
    remove(call) {
        let ix = this.calls.findIndex(c => c.call === call);
        if (ix === -1 || ix === 0)
            return false;
        this.calls[ix].source.disconnect();
        this.calls.splice(ix, 1);
        return true;
    }

    // Returns string with calls list
    toString() { return 'audio mixer ' + this.calls.map((c) => c.call.data['_line_index'] + 1); }
}

/**
 *  Video mixer (for video conference)
 */
class CallVideoMixer {
    // Used single instance for all calls.
    constructor() {
        this.layout = 'compact';
        this.run = false;
        this.calls = [];
        this.localVideo = null;
        this.canvas = null;
        this.canvasCtx = null;
        this.canvasBackground = "#F5F5F5"; // light smoke
        this.width = 160;
        this.height = 120;
        this.nVideo = 0;
        this.drawInterval = 100;
        this.remoteVideoId = '';
        this.frame = 1;
        this.data = {};
    }

    // Set canvas id.
    // Set local video element id.
    // Set remote video element id prefix. (will be added video element index 0, 1, ...)
    setElements(canvasId, localVideoId, remoteVideoId) {
        this.canvas = document.getElementById(canvasId);
        this.canvasCtx = this.canvas.getContext('2d');
        this.localVideo = document.getElementById(localVideoId);;
        this.remoteVideoId = remoteVideoId;
    }

    // Set number of frames per seconds of mixed stream.
    // For example: 1, 2, 5, 10, 20, 50.
    // Default: 10
    setFPS(v) { this.setDrawInterval(1000 / v); }

    // Set interval between draw (milliseconds)
    // Default: 100
    // It can be set also via setFPS
    setDrawInterval(v) { this.drawInterval = v; }

    // Set calls video layout: 'linear' or 'compact'
    // Default: 'compact'
    setLayout(v) {
        switch (v) {
            case 'linear':
            case 'compact':
                this.layout = v;
                break;
            default:
                throw 'Unknown layout: ' + v;
        }
        this.resize();
    }

    // Set call video size (pixels)
    // Default w=160, h=120
    setSize(w, h) {
        this.width = w;
        this.height = h;
        this.resize();
    }

    // Set call video sizes (pixels)
    // size likes: {width: '160px', height: '120px'}
    setSizes(size) { // format {width: '160px', height: '120px'}
        let w = parseInt(size.width.slice(0, -2));
        let h = parseInt(size.height.slice(0, -2));
        this.setSize(w, h);
    }

    // Returns true when mixer is started
    isOn() { return this.run; }

    // Start mixer
    start() {
        if (this.run)
            return;
        setTimeout(this._draw.bind(this), this.drawInterval);
        this.run = true;
    }

    // Stop mixer, remove all calls, release resources.
    // After using stop the mixer can be restarted.
    stop() {
        while (this.calls.length > 0)
            this.remove(this.calls[0].call);
        this.run = false;
    }

    // Get mixed video stream for added call.
    getMix(call) {
        let ix = this.calls.findIndex(d => d.call === call);
        return (ix !== -1) ? this.calls[ix].mix : null;
    }

    // Add call to mixer or update send/receive mode.
    // Returns true if send video was added (should be replaced connection sender track)
    add(call, send = true, receive = true) {
        let ix = this.calls.findIndex(d => d.call === call);
        if (ix === -1) {
            return this._add(call, send, receive);
        } else {
            return this._update(ix, send, receive);
        }
    }

    _add(call, send, receive) {
        let mix = send ? this.canvas.captureStream() : null;
        let elt = receive ? document.getElementById(this.remoteVideoId + call.data['_line_index']) : null;
        let x = 0;
        let y = 0;
        this.calls.push({ call, elt, mix, x, y });
        if (elt !== null)
            this.resize();
        return mix !== null;
    }

    _update(ix, send, receive) {
        let d = this.calls[ix];
        let sendModified = false;
        if (send) {
            if (d.mix === null) {
                d.mix = this.canvas.captureStream();
                sendModified = true;
            }
        } else {
            if (d.mix !== null) {
                for (let track of d.mix.getVideoTracks())
                    track.stop();
                d.mix = null;
                sendModified = true;
            }
        }
        if (receive) {
            if (d.elt === null) {
                d.elt = document.getElementById(this.remoteVideoId + d.call.data['_line_index']);
                this.resize();
            }
        } else {
            if (d.elt !== null) {
                d.elt = null;
                this.resize();
            }
        }
        return sendModified;
    }

    // Remove call from mixer.
    // Returns true if removed, false if was not added.
    remove(call) {
        let ix = this.calls.findIndex(d => d.call === call);
        //console.log('video mixer: remove call with index=', call.data['_line_index'], ix);
        if (ix === -1)
            return false;
        let d = this.calls[ix];
        if (d.mix !== null) {
            for (let track of d.mix.getVideoTracks())
                track.stop();
        }
        this.calls.splice(ix, 1);
        if (d.elt !== null)
            this.resize();
        return true;
    }

    // number of video displayed in canvas
    _nVideo() {
        let n = 0;
        if (this.localVideo.srcObject !== null)
            n++;
        for (let d of this.calls)
            if (d.elt !== null)
                n++;
        return n;
    }

    // Resize video layout then changed number of video channels
    // Used when added/removed local video channel.
    // Called automatically in methods: add, remove, setLayout, setSize
    //
    // Warning: it's designed for 5 lines phone !
    // Max number of video controls is 6 (including local video)
    // If you use more lines, please modify this method.
    //
    // Video layouts
    // linear   0 1     0 1 2     0 1 2 3    0 1 2 3 4 ....
    //
    // compact  0 1     0 1      0 1      0 1 2     0 1 2
    //                   2       2 3       3 4      3 4 5
    resize() {
        this.nVideo = this._nVideo(); // number of shown video
        //console.log(`videoMixer: resize nVideo=${this.nVideo} [${this.localVideo.srcObject !== null ? 'with local':'without local'} video]`);
        switch (this.layout) {
            case 'linear':
                this.canvas.width = (this.width + this.frame) * this.nVideo;
                this.canvas.height = this.height;
                break;
            case 'compact':
                if (this.nVideo <= 2) {
                    this.canvas.width = (this.width + this.frame) * this.nVideo;
                    this.canvas.height = this.height;
                } else if (this.nVideo <= 4) {
                    this.canvas.width = (this.width + this.frame) * 2;
                    this.canvas.height = this.height * 2 + this.frame;
                } else {
                    this.canvas.width = this.width * 3;
                    this.canvas.height = this.height * 2 + this.frame;
                }
                break;
        }

        this.canvasCtx.fillStyle = this.canvasBackground;
        this.canvasCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // sort calls by line index
        this.calls.sort((d1, d2) => d1.call.data['_line_index'] - d2.call.data['_line_index']);

        // reorder pictures in canvas
        let ix = 0;
        if (this.localVideo.srcObject !== null)
            ix++;
        for (let d of this.calls) {
            if (d.elt !== null) {
                let [x, y] = this._location(ix);
                d.x = x;
                d.y = y;
                ix++;
            }
        }
    }

    // Calculate video picture location by index.
    //
    // Warning: it's designed for 5 lines phone !
    // Max number of video controls is 6 (including local video)
    // If you use more lines, modify this method
    _location(ix) {
        let w = this.width + this.frame;
        let h = this.height + this.frame;
        switch (this.layout) {
            case 'linear':
                return [ix * w, 0];
            case 'compact':
                switch (this.nVideo) {
                    case 0:
                    case 1:
                    case 2:
                        return [ix * w, 0];
                    case 3:
                        return (ix < 2) ? [w, 0] : [w * (ix - 2) + 0.5 * w, h];
                    case 4:
                        return (ix < 2) ? [w, 0] : [w * (ix - 2), h];
                    case 5:
                        return (ix < 3) ? [w * ix, 0] : [w * (ix - 3) + 0.5 * w, h];
                    case 6:
                        return (ix < 3) ? [w * ix, 0] : [w * (ix - 3), h];
                }
        }
    }

    _draw() {
        if (!this.run)
            return;
        try {
            if (this.nVideo > 0) {
                if (this.localVideo.srcObject !== null)
                    this.canvasCtx.drawImage(this.localVideo, 0, 0, this.width, this.height);
                for (let d of this.calls) {
                    if (d.elt !== null)
                        this.canvasCtx.drawImage(d.elt, d.x, d.y, this.width, this.height);
                }
            }
        } catch (e) {
            console.log(e);
        }
        setTimeout(this._draw.bind(this), this.drawInterval);
    }

    // Returns string with calls list
    toString() {
        if (this.run) {
            return 'video mixer ' + this.calls.map((c) => `${c.call.data['_line_index'] + 1}${c.mix !== null ? 's' : ''}${c.elt !== null ? 'r' : ''}`);
        } else {
            return 'video mixer is off';
        }
    }
}
//============================================================================

// Copyright (c) IFM Infomaster. All rights reserved.

//============================================================================

"use strict";

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

(function() {
  var ns = namespace("Ifm.PhoneBar.Media");

  // Import
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  var Phone = ns.Phone;

  // Constructor
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  function WebRTC() {
    // Base constructor call:
    Phone.apply(this, arguments);

    this.phonebar.log(THIS, DEBUG, 'WebRTC Phone instance creation');

    // Audiocodes phone
    this.phone = new AudioCodesUA();

    const audioCodesVersion = this.phone.version();
    this.phonebar.log(THIS, DEBUG, `AudioCodes Library Version is ${audioCodesVersion}`);

    // Sound player
    this.audioPlayer = new AudioPlayer();

    // Single audio context
    this.audioCtx = this.audioPlayer.audioCtx;

    this.phoneConfig = null;
    this.serverConfig = null;

    this.muteFlag = false;
    this.lowIsInConference = false;

    this.activeCallsArray = [null, null];
    this.mediaElements = [ document.getElementById('remote_audio0'),
                           document.getElementById('remote_audio1')];

    this.phonebar.log(THIS, DEBUG, 'WebRTC Phone instance created');
  }

  var base = inherits(WebRTC, Phone);

  // Device Capabilities
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  WebRTC.prototype.numberOfLines      = 2;
  WebRTC.prototype.supportsConference = true;

  // Internal Virtual Methods -- called by PhoneBar
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  // Fires during PhoneBar's initialization.
  // Derived classes should prefer this method instead of constructor.
  WebRTC.prototype._initialize = function() {
    this.phonebar.log(THIS, DEBUG, "Initializing WebRTC");

    webRTCInit(this);

    this._onInitialized();
  };

  // Fires when Agent goes logged in.
  // Derived classes should use this method to establish connection and
  // register to the switching platform.
  WebRTC.prototype._connect = function() {
    this.phonebar.log(THIS, DEBUG, "Connecting");

    const cfg = this.serverConfig;

    if (!cfg || !cfg.addresses || !cfg.addresses.length
             || !cfg.iceServers || !cfg.iceServers.length) {
      this.logError("Invalid WebRTC configuration");

      // raise a disconnected event so the ui alerts the user:
      this._onDisconnected(true);
      return;
    }

    webRTCInitPhoneStack(this);

    // if there's no connection to an external service (and there's no
    // connection callback) we can proceed synchronously here:
    this._onConnected();
  };

  // Fires when Agent is logged out (either by choice or connection closed).
  WebRTC.prototype._disconnect = function() {
    this.phonebar.log(THIS, DEBUG, "Disconnecting");

    // if there's no connection to an external service (and there's no
    // connection callback) we can proceed synchronously here:
    this._onDisconnected(true);
    this._unregister();

    // TBR:
    this.phone.deinit();
  };

  // Fires when a configuration change is being applied.
  WebRTC.prototype._terminate = function() {
    this.phonebar.log(THIS, DEBUG, "Terminating WebRTC");
    // moved in _disconnect
    //this.phone.deinit();
  };

  // Fires when an access token is retrieved/renewed.
  WebRTC.prototype._setAccessToken = function(token) {
    this.phonebar.log(THIS, DEBUG, "Setting Access Token");
    webRTCAccessTokenUpdated(this, token);
  };

  // Virtual Methods
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  WebRTC.prototype._answer = function() {
    this.logInfo('_answer');
    webRTCAnswer(this);
  };

  WebRTC.prototype._dial = function (number) {
    this.logInfo(`_dial (${number})`);
    webRTCDial(this, number);
  };

  WebRTC.prototype._dtmf = function (tones) {
    this.logInfo(`_dtmf (${tones})`);
    webRTCSendDTMFs(this, tones);
  };

  WebRTC.prototype._drop = function () {
    this.logInfo("_drop");
    webRTCDropCurrentCall(this);
  };

  WebRTC.prototype._enterConference = function () {
    this.logInfo("_enterConference");
    webRTCEnterConference(this);
  };

  WebRTC.prototype._leaveConference = function () {
    this.logInfo("_leaveConference");
    webRTCExitConference(this);
  };

  WebRTC.prototype._mute = function () {
    this.logInfo("_mute");
    webRTCSetMuteState(this, true);
  };

  WebRTC.prototype._register = function (domain, extension) {
    if (arguments.length === 0) {
      this.logInfo(`_register without parameters - Internally called`);
    } else {
      this.logInfo(`_register (domain = ${domain}, extension = ${extension})`);
    }
    webRTCSetRegisterState(this, true);
  };

  WebRTC.prototype._selectLine = function (lineId) {
    this.logInfo(`_selectLine (${lineId})`);
    webRTCSetActiveLine(this, lineId);
  };

  WebRTC.prototype._unmute = function () {
    this.logInfo("_unmute");
    webRTCSetMuteState(this, false);
  };

  WebRTC.prototype._unregister = function () {
    this.logInfo("_unregister");
    webRTCSetRegisterState(this, false);
  };

  // Misc Functions
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  function webRTCSleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  function webRTCExtendTokenWithSIPInfo(token, exTokenInfo) {
    const infoAsJson = JSON.stringify(exTokenInfo);
    const infoB64 = window.btoa(infoAsJson);
    return token + "." + infoB64;
  }

  function webRTCAccessTokenUpdated(instance, token) {
    const self = instance;

    if (self.phone) {
      const exToken = webRTCExtendTokenWithSIPInfo(token, self._extendedTokenInfo);
      self.logDebug(`Extended Authorization Token = ${exToken}`);
      self.phone.setOAuthToken(exToken);
    }
  }

  function webRTCGetOtherLine(line) {
    if (line === 0) {
      return 1;
    }
    else if (line === 1) {
      return 0;
    }
    else {
      console.error(`webRTCGetOtherLine: error!!! - LineId = ${line}`);
    }
  }

  function webRTCComputeVUMeterLevelUBytes(dataArray) {
    let sum = 0.0;
    for (let val of dataArray) {
      const tmp = (val - 128.0) / 128.0;
      sum += tmp * tmp;
    }
    const power = sum / dataArray.length;
    const powerDB = 10.0 * Math.log10(power);
    const level = webRTCScalePowerDBToVUMeterLevel(powerDB);

    return level;
  }

  function webRTCComputeVUMeterLevelFloats(dataArray) {
    let sum = 0.0;
    for (let val of dataArray) {
      sum += val * val;
    }
    const power = sum / dataArray.length;
    const powerDB = 10.0 * Math.log10(power);
    const level = webRTCScalePowerDBToVUMeterLevel(powerDB);

    return level;
  }

  function webRTCScalePowerDBToVUMeterLevel(powerDB) {
    const m = (VUMeterMaxLevel - VUMeterMinLevel) / (VUMeterMaxLevelDB - VUMeterMinLevelDB);
    const vuMeterLevel = VUMeterMinLevel + (powerDB - VUMeterMinLevelDB) * m;

    let vuMeterLevelSafe = Math.min(VUMeterMaxLevel, vuMeterLevel);
    vuMeterLevelSafe = Math.max(VUMeterMinLevel, vuMeterLevel);
    return vuMeterLevelSafe;
  }

  // Call methods
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  function webRTCCallAndMediaValid(call) {
    const valid = call
      && call.remoteStream
      && call.localStream;

    return valid;
  }

  // PhoneBar methods
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  function webRTCCreateAudioCodesAccount(phonebar) {
    const user = phonebar.agent.extension;
    const pass = phonebar.agent.password;
    const upn  = phonebar.agent.username;
    const upnParts = upn.split('@');
    const upnDomain = upnParts.length == 2 ? upnParts[1] : null;

    const newAccount = {
      user: user,
      authUser: user,
      password: pass,
      displayName: user + " (#phonebar/WebRTC)",
      upnDomain: upnDomain
    };

    newAccount.password = "NotUsedNow"; // GBL: TBR

    return newAccount;
  }

  function webRTCLog(phonebar, level) {
    const args = [].slice.call(arguments);

    // log redirected to the PhoneBar
    const logArgs = [THIS, level, args.slice(2)];
    phonebar.log.apply(phonebar, logArgs);
/*
    // Direct log
    let logMethod = null;
    let color = null;
    switch (level) {
      case DEBUG:
        logMethod = console.debug;
        color = 'color: Gray;';
        break;

      case INFO:
        logMethod = console.info;
        color = 'color: Green;';
        break;

      case WARN:
        logMethod = console.warn;
        color = 'color: Orange;';
        break;

      case ERROR:
        logMethod = console.error;
        color = 'color: Red;';
        break;

      default:
        console.error(`webRTCLog: Invalid log level = ${level}`);
        return;
    }

    let [, , firstArg, ...otherArgs] = args;
    firstArg = '%c' + firstArg;
    const modArgs2 = [firstArg, color, ...otherArgs];

    logMethod.apply(console, modArgs2);
*/
  }

  // Private WebRTC Methods
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //
  // Misc Initialization
  //

  function webRTCInit(instance) {
    const self = instance;

    // Logger settings
    webRTCSetupLogger(self);
    self.phone.setAcLogger(self.logDebug);
    self.phone.setJsSipLogger(self.logDebug);

    self.logDebug('webRTCInit: Enter');

    // Notify initial WebRTC Phone state
    self._onLineStateChanged(0, Phone.States.Idle);
    self._onLineStateChanged(1, Phone.States.Idle);

    // Current line
    self.lowSelectedLine = 0;
    self._onLineSelected(self.lowSelectedLine);

    // Conference state
    self.lowIsInConference = false;
    self._onConferenceStateChanged(self.lowIsInConference);

    // For debugging
    if (window.adapter) {
      self.logInfo('webRTCInit: WebRTC adapter is used');
    } else {
      self.logInfo('webRTCInit: WebRTC adapter is not used');
      if (self.phone.getBrowser() === 'safari' || self.phone.getBrowser() === 'edge') {
        self.logError('webRTCInit: Error! The browser cannot be used without webrtc adapter');
      }
    }

    // Main Audiocodes phone configuration
    self.serverConfig = self._settings.webrtcconfig.SBCConfig;
    self.phoneConfig = self._settings.webrtcdefaults.PhoneConfig;

    // Audio player initialization
    self.audioPlayer.init(self.logDebug);

    // GBL: TBR
    // Tones vs files
    let ringingTone = [{f: 425, t: 1.0}, {t: 4.0}];
    let busyTone = [{f: 425, t: 0.48}, {t: 0.48}];

    // GBL: TBR
    const soundPath = 'assets/sounds/';
    const soundList = [
      'fastbusy',
      'hangup',
      'pickup',
      'pound',
      'registered',
      'ring',
      'secondring',
      'star',
      'unregistered'
    ];

    self.audioPlayer.downloadSounds(soundPath, soundList)
      .then(() => {
        return self.audioPlayer.generateTones(ringingTone, busyTone);
      })
      .then(() => {
        self.logInfo('webRTCInit: Sounds are ready');
      });

    // Check available devices
    // For debugging
    self.phone.checkAvailableDevices()
      .then((camera) => {
        // Debug only
        self.logInfo(`webRTCInit: Devices available: camera = ${camera}`);
      })
      .catch((e) => {
        // Debug only
        self.logError(`webRTCInit: No Devices available error = ${e}`);
      });

    webRTCSetupVUMeter(self);
  }

  function webRTCSetupLogger(instance) {
    const self = instance;
    const phonebar = self.phonebar;

    self.logDebug = webRTCLog.bind(self, phonebar, DEBUG);
    self.logInfo = webRTCLog.bind(self, phonebar, INFO);
    self.logWarn = webRTCLog.bind(self, phonebar, WARN);
    self.logError = webRTCLog.bind(self, phonebar, ERROR);
  }

  function webRTCInitPhoneStack(instance) {
    const self = instance;
    const phonebar = self.phonebar;

    self.logInfo("webRTCInitPhoneStack: Enter");

    // Get account info of the user currently logged on the PhoneBar
    const accountInfo = webRTCCreateAudioCodesAccount(phonebar);

    let domain = self.serverConfig.domain;
    if (self.serverConfig.useDomainOfLoggedUser) {
      domain = accountInfo.upnDomain;
    }

    self.phone.setServerConfig(self.serverConfig.addresses, domain, self.serverConfig.iceServers);
    self.phone.setAccount(accountInfo.user, accountInfo.displayName, accountInfo.password, accountInfo.authUser);

    //
    // *** OAuth2 Authorization stuff ***
    //

    self._extendedTokenInfo = { 
      SIPIdentity: accountInfo.user + '@' + domain
    }

    // Phone options
    self.phone.setReconnectIntervals(self.phoneConfig.reconnectIntervalMin, self.phoneConfig.reconnectIntervalMax);
    self.phone.setRegisterExpires(self.phoneConfig.registerExpires);
    self.phone.setUseSessionTimer(self.phoneConfig.useSessionTimer);
    self.phone.setBrowsersConstraints(self.phoneConfig.constraints);
    self.phone.setWebSocketKeepAlive(self.phoneConfig.keepAlivePing, self.phoneConfig.keepAlivePong, self.phoneConfig.keepAliveStats);
    self.phone.setDtmfOptions(self.phoneConfig.dtmfUseWebRTC, self.phoneConfig.dtmfDuration, self.phoneConfig.dtmfInterToneGap);
    self.phone.setEnableAddVideo(false);

    self.phone.setUserAgent('PhoneBar WebRTC phone');

    // GBL: TBR
    // self.phone.setRegisterExtraHeaders(['PhoneBar']);

    // Event handlers
    self.phone.setListeners({
      loginStateChanged: function (isLogin, cause) {
        switch (cause) {
          case "connected":
            self.logDebug('loginStateChanged: connected');
            break;

          case "disconnected":
            self.logDebug('loginStateChanged: disconnected');
            break;

          case "login failed":
            self.logDebug('loginStateChanged: login failed');
            break;

          case "login":
            self.logDebug('loginStateChanged: login');
            break;

          case "logout":
            self.logDebug('loginStateChanged: logout');
            break;
        }

        // fire a change notification only when there's a state change:
        if (isLogin !== self._isRegistered) {
          self._onRegisteredStateChanged(isLogin);

          if (isLogin){
            self.logInfo(`Registered with Server Address = ${self.phone.getServerAddress()}`);
            self.audioPlayer.play({name: 'registered', loop: false, volume: RegisterStateVolume});
          } else {
            self.logInfo(`Unregistered with Server Address = ${self.phone.getServerAddress()}`);
            self.audioPlayer.play({name: 'unregistered', loop: false, volume: RegisterStateVolume});
          }
        }
      },

      // Optional callbacks
      // Not used by the PhoneBar

      callIncomingReinvite: function (call, start, request) {
        // nothing to do...
      },

      transferorNotification: function (call, state) {
        self.logWarn("Feature not supported");
      },

      transfereeRefer: function (call, refer) {
        self.logWarn("Feature not supported");
      },

      transfereeCreatedCall: function (call) {
        self.logWarn("Feature not supported");
      },

      outgoingCallProgress: function (call, response) {
        self.logDebug('outgoingCallProgress event');
        const line = call.associatedLine;

        // "Propagate" event to Phonebar
        self._onLineStateChanged(line, Phone.States.Calling);
        self._onCalling(line);

        self.audioPlayer.play({name: 'ringingTone', loop: true, volume: RingingToneVolume});
      },

      callTerminated: function (call, message, cause, redirectTo) {
        self.logDebug('callTerminated event');
        const line = call.associatedLine;

        // "Propagate" event to Phonebar
        self._onCallDisconnected(line, message, cause);
        self._onLineStateChanged(line, Phone.States.Idle);

        if (call.data['terminated_transferred'])
          cause = 'call transfer is successful';
        else if (call.data['terminated_replaced'])
          cause = 'call is replaced';
        self.logDebug(`callTerminated event: cause = ${cause}`);

        // Remove active call
        webRTCRemoveActiveCall(self, call);

        // Stop sound
        self.audioPlayer.stop();

        let duration = call.duration();

        if (cause !== 'Redirected') {
          if (call.isOutgoing() && (duration > 0) ) {
            self.audioPlayer.play({name: 'hangup', volume: HangupVolume, repeat: 1});
          } else {
            self.audioPlayer.play({name: 'fastbusy', volume: HangupVolume, repeat: 1});
          }
        }

        if (cause === 'Redirected') {
          self.logWarn('Feature not supported');
        }

      },

      callConfirmed: function (call, message, cause) {
        self.logDebug('callConfirmed event');
        const line = call.associatedLine;

        // Stop audio
        self.audioPlayer.stop();

        // "Propagate" event to PhoneBar
        self._onLineStateChanged(line, Phone.States.Talking);
        self._onCallConnected(line);

        call.isConfirmed = true;
      },

      callShowStreams: function (call, localStream, remoteStream) {
        self.logDebug('callShowStreams event');

        // Stop audio
        self.audioPlayer.stop();
        webRTCCheckAndAssignCallStream(self, call, localStream, remoteStream);

        if (self.conferenceActivationInProgress) {
          self.logInfo('Stream update not notified!!!');
        }
        else {
          webRTCUpdateMediaState(self, MediaChangeReasons.STREAM_CHANGE);
        }
      },

      incomingCall: function (call, invite, replacedCall) {
        self.logDebug('incomingCall', call, invite, replacedCall);

        // GBL: TBR
        // If received INVITE with Replaces header
        if (replacedCall !== null) {
          self.logWarn('Feature not supported');
          return;
        }

        // Check if exists other active call
        let newLine = webRTCGetAvailableLine(self);

        if (newLine === -1) {
          self.logWarn('No free line');
          call.reject();
          return;
        }

        call.associatedLine = newLine;

        // Set active call
        webRTCNewActiveCall(self, call);

        // "Propagate" event to PhoneBar
        self._onLineStateChanged(newLine, Phone.States.Incoming);
        self._onIncomingCall(newLine);

        // Handle "display name" and send to PhoneBar
        const user = call.data['_user'];
        const dn = call.data['_display_name']; // optional
        const dname = dn ? dn : "";
        self._onDisplayName(newLine, dname, user);

        // Async ringing
        webRTCDoRinging(self, call);
      },

      callHoldStateChanged: function (call, isHold, isRemote) {
        // GBL: TBR
        self.logDebug('callHoldStateChanged event');

        let remoteHold = call.isRemoteHold();
        let localHold = call.isLocalHold();

        let holdStateAsString;
        if (remoteHold && localHold) {
          holdStateAsString = 'Remote & Local HOLD';
        } else if (remoteHold && !localHold) {
          holdStateAsString = 'Remote HOLD';
        } else if (!remoteHold && localHold) {
          holdStateAsString ='Local HOLD';
        } else {
          holdStateAsString = 'Unhold done';
        }

        self.logInfo(`call ${call.associatedLine}: Hold state = ${holdStateAsString}`);
      },

      // Optional callbacks
      // a return value is used!!!

      incomingNotify: function (call, eventName, from, contentType, body, request) {
        self.logWarn("Feature not supported");
        return false;
      },

      incomingMessage: function (call, from, contentType, body, request) {
        self.logWarn("Feature not supported");
        return false;
      }

    });

    // Init Audiocodes phone (autoLogin=false)
    // self.phone.init(false);

    // Init Audiocodes phone (autoLogin=true)
    self.phone.init(true);
  }

  //
  // Lines/Calls management
  //

  function webRTCGetAvailableLine(instance) {
    const self = instance;

    const freeLineIndex = self.activeCallsArray.findIndex(c => c === null);
    return freeLineIndex;
  }

  function webRTCSetActiveLine(instance, lineId) {
    const self = instance;
    const prevLine = self.lowSelectedLine;

    self.lowSelectedLine = lineId;
    self._onLineSelected(lineId);

    if (prevLine !== lineId) {
      webRTCUpdateMediaState(self, MediaChangeReasons.LINE_CHANGE);
    }
  }

  function webRTCGetSelectedCall(instance) {
    const self = instance;
    const retCall = self.activeCallsArray[self.selectedLineId];

    if (retCall === null) {
      self.logWarn("webRTCGetSelectedCall: null call will be returned!!!");
    }

    return retCall;
  }

  function webRTCIsCallActive(instance, call) {
    const self = instance;
    if (call === null) {
      return false;
    }

    const idx = self.activeCallsArray.indexOf(call);
    const isActive = (idx !== -1);

    return isActive;
  }

  function webRTCNewActiveCall(instance, call) {
    const self = instance;
    const newLine = call.associatedLine;

    if (self.muteFlag) {
      call.muteAudio(true);
    }

    if ( (newLine !== 0) && (newLine !== 1) )
    {
      throw "webRTCNewActiveCall: invalid lineId";
    }

    self.activeCallsArray[newLine] = call;
  }

  function webRTCRemoveActiveCall(instance, call) {
    const self = instance;
    const line = call.associatedLine;

    if ( (line !== 0) && (line !== 1) )
    {
      throw "webRTCRemoveActiveCall: invalid lineId";
    }

    self.activeCallsArray[line] = null;

    webRTCUpdateMediaState(self, MediaChangeReasons.STREAM_CHANGE);
  }

  //
  // VU Meter
  //

  function webRTCSetupVUMeter(instance) {
    const self = instance;
    const audioCtx = self.audioCtx;

    self.analyserCapture = audioCtx.createAnalyser();
    self.analyserRender = audioCtx.createAnalyser();

    self.analyserCapture.fftSize = 512;
    self.analyserRender.fftSize = 512;

    self.captureDataArray = new Uint8Array(self.analyserCapture.frequencyBinCount);
    self.renderDataArray = new Uint8Array(self.analyserRender.frequencyBinCount);

    self.vuMeterBoundedCallback = webRTCVUMeterUpdateCallback.bind(self);

    // VU Meter update interval
    const typicalFrameRate = 60.0;
    const vuMeterMinUpdateInterval = 1.0 / typicalFrameRate;
    let vuMeterUpdateInterval = (1.0 / VUMeterUpdatesPerSec) - (vuMeterMinUpdateInterval / 2.0);
    vuMeterUpdateInterval = Math.max(vuMeterUpdateInterval, vuMeterMinUpdateInterval);
    self.vuMeterUpdateIntervalMs = vuMeterUpdateInterval * 1000.0;
  }

  function webRTCDisconnectAndResetVUMeterSources(instance) {
    const self = instance;

    if (self.vuMeterSources) {
      for (let src of self.vuMeterSources) {
        src.disconnect();
      }
    }

    self.vuMeterSources = [];
  }

  function webRTCConnectStreamToVUMeter(instance, connectLine0, connectLine1) {
    const self = instance;
    const [call0, call1] = self.activeCallsArray;
    const audioCtx = self.audioCtx;

    self.logInfo(`webRTCConnectStreamToVUMeter: connectLine0 = ${connectLine0} - connectLine1 = ${connectLine1}`);

    webRTCDisconnectAndResetVUMeterSources(self);

    let captureStream = null;
    let remoteStream0 = null;
    let remoteStream1 = null;

    if (call0 && connectLine0) {
      captureStream = call0.localStream;
      remoteStream0 = call0.remoteStream;
    }

    if (call1 && connectLine1) {
      captureStream = call1.localStream;
      remoteStream1 = call1.remoteStream;
    }

    if (captureStream) {
      const captureStreamSource = audioCtx.createMediaStreamSource(captureStream);
      captureStreamSource.connect(self.analyserCapture);
      self.vuMeterSources.push(captureStreamSource);
    }

    if (remoteStream0 && (remoteStream0.getAudioTracks().length > 0) ) {
      const renderStreamSource0 = audioCtx.createMediaStreamSource(remoteStream0);
      renderStreamSource0.connect(self.analyserRender);
      self.vuMeterSources.push(renderStreamSource0);
    }

    if (remoteStream1 && (remoteStream1.getAudioTracks().length > 0) ) {
      const renderStreamSource1 = audioCtx.createMediaStreamSource(remoteStream1);
      renderStreamSource1.connect(self.analyserRender);
      self.vuMeterSources.push(renderStreamSource1);
    }

    const enableVUMeter = (captureStream && (self.vuMeterSources.length >= 2));

    webRTCSetVUMeterMonitoringState(instance, enableVUMeter);
    if (!enableVUMeter) {
      webRTCDisconnectAndResetVUMeterSources(self);
    }
  }

  function webRTCSetVUMeterMonitoringState(instance, enableVUMeter) {
    const self = instance;

    if (!enableVUMeter) {
      self.logInfo('webRTCSetVUMeterState: VU Meter levels forced to zero');
      self._onVUMeter(0.0, 0.0);
    } 

    if (!self.isVUMeterEnabled && enableVUMeter) {
      webRTCRequestNewVUMeterUpdate(self);
    }
    self.isVUMeterEnabled = enableVUMeter;
  }

  function webRTCRequestNewVUMeterUpdate(instance) {
    const self = instance;

    setTimeout(() => { requestAnimationFrame(self.vuMeterBoundedCallback);}, self.vuMeterUpdateIntervalMs);
  }

  function webRTCVUMeterUpdateCallback(timestamp) {
    const self = this;

    if (self.isVUMeterEnabled) {
      webRTCComputeAndNotifyVUMeterLevels(self, timestamp);
      webRTCRequestNewVUMeterUpdate(self);
    } else {
      self.logInfo('webRTCVUMeterUpdateCallback: VU Meter levels forced to zero');
      self._onVUMeter(0.0, 0.0);
    }
  }

  function webRTCComputeAndNotifyVUMeterLevels(instance, timestamp) {
    const self = instance;

    self.analyserCapture.getByteTimeDomainData(self.captureDataArray);
    self.analyserRender.getByteTimeDomainData(self.renderDataArray);
    const captureLevel = webRTCComputeVUMeterLevelUBytes(self.captureDataArray);
    const renderLevel = webRTCComputeVUMeterLevelUBytes(self.renderDataArray);

    // self.logInfo(`timestamp = ${timestamp} - capture = ${captureLevel} - render = ${renderLevel}`);
    self._onVUMeter(captureLevel, renderLevel);
  }

  //
  // Media and Mixers
  //

  function webRTCIsConferencePossible(instance) {
    const self = instance;
    const isConferenceIsPossible = self.activeCallsArray.every(webRTCCallAndMediaValid);
    return isConferenceIsPossible;
  }

  function webRTCCheckAndAssignCallStream(instance, call, localStream, remoteStream) {
    const self = instance;
    let localStreamState;
    let remoteStreamState;
    let remoteTrackState;
    let curTrackID = -1;

    const remoteTrack = remoteStream.getAudioTracks()[0];
    if (remoteTrack)
    {
      curTrackID = remoteTrack.id;
    }

    if (call.localStream) {
      localStreamState = (call.localStream === localStream) ? 'SAME' : 'CHANGED';
    } else {
      localStreamState = 'NEW';
    }

    if (call.remoteStream) {
      remoteStreamState = (call.remoteStream === remoteStream) ? 'SAME' : 'CHANGED';
    } else {
      remoteStreamState = 'NEW';
    }

    if (call.remoteTrackID) {
      remoteTrackState = (call.remoteTrackID === curTrackID) ? 'SAME' : 'CHANGED';
    } else {
      remoteTrackState = 'NEW';
    }

    call.localStream = localStream;
    call.remoteStream = remoteStream;
    call.remoteTrackID = curTrackID;

    self.logInfo(`call ${call.associatedLine}: LOCAL Stream  : ID = ${localStream.id} (${localStreamState})`);
    self.logInfo(`call ${call.associatedLine}: REMOTE Stream : ID = ${remoteStream.id} (${remoteStreamState})`);
    self.logInfo(`call ${call.associatedLine}: REMOTE Track  : ID = ${curTrackID} (${remoteTrackState})`);
  }

  function webRTCConnectAudioElements(instance, connectLine0, connectLine1) {
    const self = instance;
    const [call0, call1] = self.activeCallsArray;
    const [mediaEl0, mediaEl1] = self.mediaElements;

    self.logInfo(`webRTCConnectAudioElements: connectLine0 = ${connectLine0} - connectLine1 = ${connectLine1}`);

    if (call0 !== null && call0.remoteStream && connectLine0) {
      mediaEl0.srcObject = call0.remoteStream;
      mediaEl0.muted = false;
    }

    if (!connectLine0) {
      mediaEl0.muted = true;
    }

    if (call1 !== null && call1.remoteStream && connectLine1) {
      mediaEl1.srcObject = call1.remoteStream;
      mediaEl1.muted = false;
    }

    if (!connectLine1) {
      mediaEl1.muted = true;
    }
  }

  function webRTCReplaceSenderTrack(instance, call, stream) {
    const self = instance;
    const connection = call.getRTCPeerConnection();

    if (stream.active && (stream.getAudioTracks().length > 0)) {
      self.phone.getWR().connection.replaceSenderTrack(connection, 'audio', stream)
        .then(() => {
          self.logInfo(`webRTCReplaceSenderTrack: call ${call.associatedLine} replaced send stream`);
        })
        .catch(e => {
          self.logError(`webRTCReplaceSenderTrack: call ${call.associatedLine} error ${e} replacing send stream`);
        });
    }
    else {
      self.logInfo('webRTCReplaceSenderTrack: stream no(more) valid');
    }
  }

  function webRTCInitConferenceCallMixers(instance) {
    const self = instance;
    const [call0, call1] = self.activeCallsArray;
    const audioCtx = self.audioCtx;

    self.audioMixers = [new CallAudioMixer(audioCtx, call0),
                        new CallAudioMixer(audioCtx, call1)];
    self.callsInConference = [call0, call1];

    self.audioMixers[0].add(call1);
    self.audioMixers[1].add(call0);

    webRTCReplaceSenderTrack(self, call0, self.audioMixers[0].getMix());
    webRTCReplaceSenderTrack(self, call1, self.audioMixers[1].getMix());
  }

  function webRTCDestroyConferenceCallMixers(instance) {
    const self = instance;
    const [confCall0, confCall1] = self.callsInConference;

    self.audioMixers[0].remove(confCall1);
    self.audioMixers[1].remove(confCall0);
    self.audioMixers[0].close();
    self.audioMixers[1].close();

    delete self.callsInConference;
    delete self.audioMixers;

    webRTCReplaceSenderTrack(self, confCall0, confCall0.getRTCLocalStream());
    webRTCReplaceSenderTrack(self, confCall1, confCall1.getRTCLocalStream());
  }

  function webRTCUpdateMediaState(instance, reason) {
    const self = instance;
    const isConferencePossible = webRTCIsConferencePossible(self);

    const tryEnterConference = (reason === MediaChangeReasons.CONFERENCE_ON);
    const tryExitConference = (reason === MediaChangeReasons.CONFERENCE_OFF);

    const doEnterConference = !self.lowIsInConference && isConferencePossible && tryEnterConference;
    const doExitConference = self.lowIsInConference && (tryExitConference || !isConferencePossible);

    const selectedLine = self.selectedLineId;
    const selLine0 = (selectedLine === 0);
    const selLine1 = (selectedLine === 1);

    self.logInfo(`webRTCUpdateMediaState: Selected line = ${selectedLine} - Reason = ${reason}`);

    if (doEnterConference) {
      self.logInfo('webRTCUpdateMediaState: enter conference');
      self.conferenceActivationInProgress = true;

      webRTCConnectStreamToVUMeter  (self, true, true);

      // Now, it is called when the webRTCSetHoldState is completed
      // webRTCConnectAudioElements (self, true, true);
      const ret = webRTCSetHoldState(self, false, false);

      // GBL: TBR
      // It is necessary to wait until the change of state has been completed
      ret.then(() => {
        webRTCInitConferenceCallMixers(self);
        webRTCConnectAudioElements(self, true, true);
        delete self.conferenceActivationInProgress;
      }).catch(error => {
        self.logInfo(`webRTCUpdateMediaState: Hold failed: error = ${error}`);
      });
          
      // PhoneBar notification
      self.lowIsInConference = true;
      self._onConferenceStateChanged(self.lowIsInConference);
    } else if (doExitConference) {
      self.logInfo("webRTCUpdateMediaState: exit conference");

      webRTCConnectStreamToVUMeter(self, selLine0, selLine1);
      webRTCConnectAudioElements  (self, selLine0, selLine1);
      webRTCSetHoldState          (self, !selLine0, !selLine1);
      webRTCDestroyConferenceCallMixers(self);

      // PhoneBar notification
      self.lowIsInConference = false;
      self._onConferenceStateChanged(self.lowIsInConference);
    } else {
      if (!self.lowIsInConference) {
        webRTCConnectStreamToVUMeter(self, selLine0, selLine1);
        webRTCConnectAudioElements(self, selLine0, selLine1);
        webRTCSetHoldState(self, !selLine0, !selLine1);
      }
    }
  }

  //
  // Basic methods
  //

  function webRTCDial(instance, number) {
    const self = instance;

    // GBL: TBR
    const extraHeaders = ['X-Greeting: The IFM PhoneBar welcomes you!'];

    const newCall = self.phone.call(false, number, extraHeaders);
    newCall.associatedLine = self.lowSelectedLine;

    webRTCNewActiveCall(self, newCall);
  }

  function webRTCDropCurrentCall(instance) {
    const self = instance;
    const call = webRTCGetSelectedCall(self);

    webRTCEnableSound(self);
   
    if (call !== null) {
      call.terminate();
      webRTCRemoveActiveCall(self, call);
    } else {
      // GBL: TBR
      // Selected line notified as IDLE
      self.logWarn(`webRTCDropCurrentCall: SelectLine = ${self.selectedLineId} notified as IDLE!!!`);
      self._onLineStateChanged(self.selectedLineId, Phone.States.Idle);
    }
  }

  function webRTCAnswer(instance) {
    const self = instance;
    const call = webRTCGetSelectedCall(self);

    if (call !== null) {
      call.answer(false, null);
    }
  }

  function webRTCEnableSound(instance) {
    const self = instance;

    if (!self.audioPlayer.isDisabled())
      return;

    self.logDebug('Enable sound');
    self.audioPlayer.enable()
      .then(() => {
        self.logInfo('webRTCEnableSound: Sound is enabled')
      })
      .catch((e) => {
        self.logWarn(`webRTCEnableSound: Cannot enable sound - error = ${e}`);
      });
  }

  function webRTCSetRegisterState(instance, doRegister) {
    const self = instance;

    if (self.phone.isInitialized()) {
      if (doRegister) {
        self.phone.login();
      } else {
        self.phone.logout();
      }
    }
    else {
      self.logError("webRTCSetRegisterState: phone not initialized!!!");
    }
  }

  function webRTCSetMuteState(instance, muteFlag) {
    const self = instance;

    self.muteFlag = muteFlag;
    self._onMuteChanged(muteFlag);

    for (let call of self.activeCallsArray) {
      if (call !== null) {
        call.muteAudio(muteFlag);
      }
    }
  }

  function webRTCEnterConference(instance) {
    const self = instance;
    webRTCUpdateMediaState(self, MediaChangeReasons.CONFERENCE_ON);
  }

  function webRTCExitConference(instance) {
    const self = instance;
    webRTCUpdateMediaState(self, MediaChangeReasons.CONFERENCE_OFF);
  }

  //
  // Async methods
  //

  async function webRTCSetHoldState(instance, holdLine0, holdLine1) {
    const self = instance;
    const [call0, call1] = self.activeCallsArray;

    self.logInfo(`webRTCSetHoldState: holdLine0 = ${holdLine0} - holdLine1 = ${holdLine1}`);

    const hold0 = (call0 !== null) && !call0.isLocalHold() && holdLine0;
    const hold1 = (call1 !== null) && !call1.isLocalHold() && holdLine1;
    const unhold0 = (call0 !== null) && call0.isLocalHold() && !holdLine0;
    const unhold1 = (call1 !== null) && call1.isLocalHold() && !holdLine1;

    let promise0 = null;
    let promise1 = null;

    // GBL: TBR
    // First hold
    if (hold0) promise0 = call0.hold(true);
    if (hold1) promise1 = call1.hold(true);
    if (unhold0) promise0 = call0.hold(false);
    if (unhold1) promise1 = call1.hold(false);

    const ret = Promise.all([promise0, promise1]);

    return ret;
  }

  async function webRTCSendDTMFs(instance, stringWithDTMFCodes) {
    const self = instance;
    const call = webRTCGetSelectedCall(self);

    if (call !== null) {
      for (let dtmfCode of stringWithDTMFCodes) {
        let dtmfToPlay = dtmfCode;

        // GBL: TBR
        // Flash mapping
        if (dtmfCode === '!') {
          dtmfToPlay = '#';
          dtmfCode = self.phoneConfig.dtmfUseWebRTC ? 'R' : 'A';
        }

        // Send DTMF
        call.sendDTMF(dtmfCode);

        let res;
        if (dtmfToPlay.match(/[0-9*#]/)) {
          // DTMF echo
          res = await self.audioPlayer.play({name: dtmfToPlay, volume: DTMFVolume});
        } else {
          if (dtmfToPlay === ',') {
            // DTMF pause
            res = await webRTCSleep(DTMFPauseDuration);
          } else {
            // Wrong DTMF Code
            self.logWarn(`webRTCSendDTMFs: Unexpected DTMF code = ${dtmfToPlay}`);
          }
        }

        // GBL: TBR
        // Work with play
        if (res === "stopped externally") {
          break;
        }

        if (call !== webRTCGetSelectedCall(self)) {
          break;
        }
      }
    }
  }

  async function webRTCDoRinging(instance, call) {
    const self = instance;

    let rings = 1;
    while (rings < maxRings) {

      // Ringing PhoneBar notification
      self._onRinging(call.associatedLine, rings);

      let res = await self.audioPlayer.play({name: 'ring', volume: RingVolume});
      if (res === "stopped externally") {
        break;
      }

      if (!webRTCIsCallActive(self, call)) {
        break;
      }

      if (call.isConfirmed) {
        break;
      }

      rings += 1;
    }
  }

  // Base Event Methods
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  // These functions are responsible for notifying the UI of changes and
  // dispatching those notifications to public api's events: in case their
  // behaviour has to be overridden, do invoke:
  //    base.methodName.apply(this, arguments);
  // in the new overriding functions.

  /* examples of invocations:

  // Service events:
    this._onInitialized();
    this._onConnected();
    this._onDisconnected();

  // Phone events:
    this._onRegisteredStateChanged(isRegistered);

  // Line state events:
    this._onLineStateChanged(lineId, state);

  // Multiline events:
    this._onConferenceStateChanged(inConference);
    this._onLineSelected(lineId);

  // Call events:
    this._onCalling(lineId);
    this._onCallConnected(lineId);
    this._onCallDisconnected(lineId, sipCode, sipCause);
    this._onDisplayName(lineId, displayName);
    this._onIncomingCall(lineId);
    this._onRinging(lineId, rings);

  // Audio events:
    this._onMuteChanged(isMuted);
    this._onVUMeter(microphone, speakers);

  */

  // Static Members
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  // Logging constants:
  var THIS = "PhoneBar.Media.Phone.WebRTC", // Logging context (filter)
      DEBUG = 'Debug', INFO = 'Info', WARN = 'Warn', ERROR = 'Error';

  // Media change reasons
  const MediaChangeReasons = {
    CONFERENCE_ON:   'conference_on',
    CONFERENCE_OFF:  'conference_off',
    LINE_CHANGE:     'line_change',
    STREAM_CHANGE:   'stream_change'
  };

  // Volume of sound effects
  const RingingToneVolume = 0.2;
  const RegisterStateVolume = 0.9;
  const HangupVolume = 0.5;
  const RingVolume = 0.9;
  const DTMFVolume = 0.15;

  const DTMFPauseDuration = 2000; // 2 seconds

  // Max number of rings
  const maxRings = 60;

  // Power dB => PhoneBar VU meter level
  const VUMeterMaxLevel = 100.0;
  const VUMeterMinLevel = 0.0;
  const VUMeterMaxLevelDB = 0.0;
  const VUMeterMinLevelDB = -60.0;
  const VUMeterUpdatesPerSec = 5;

  // Export
  //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ns.WebRTC = WebRTC;
})();

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
